<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="838.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="821" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="821" > </text>
<g id="frames">
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (11 samples, 0.01%)</title><rect x="849.8" y="341" width="0.2" height="15.0" fill="rgb(246,35,49)" rx="2" ry="2" />
<text  x="852.85" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;::base (8 samples, 0.01%)</title><rect x="872.8" y="565" width="0.1" height="15.0" fill="rgb(218,35,20)" rx="2" ry="2" />
<text  x="875.76" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_erase_aux (53 samples, 0.06%)</title><rect x="851.5" y="357" width="0.7" height="15.0" fill="rgb(227,84,34)" rx="2" ry="2" />
<text  x="854.47" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (9 samples, 0.01%)</title><rect x="885.0" y="629" width="0.1" height="15.0" fill="rgb(235,221,13)" rx="2" ry="2" />
<text  x="887.95" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::deallocate (15 samples, 0.02%)</title><rect x="1103.0" y="613" width="0.2" height="15.0" fill="rgb(209,137,51)" rx="2" ry="2" />
<text  x="1105.98" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (40 samples, 0.05%)</title><rect x="503.7" y="277" width="0.6" height="15.0" fill="rgb(248,129,47)" rx="2" ry="2" />
<text  x="506.71" y="287.5" ></text>
</g>
<g >
<title>_int_malloc (15 samples, 0.02%)</title><rect x="68.7" y="501" width="0.2" height="15.0" fill="rgb(237,164,39)" rx="2" ry="2" />
<text  x="71.73" y="511.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (362 samples, 0.41%)</title><rect x="605.1" y="677" width="4.9" height="15.0" fill="rgb(248,156,13)" rx="2" ry="2" />
<text  x="608.12" y="687.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (12 samples, 0.01%)</title><rect x="177.6" y="533" width="0.2" height="15.0" fill="rgb(227,195,5)" rx="2" ry="2" />
<text  x="180.60" y="543.5" ></text>
</g>
<g >
<title>LockedPoolManager::Instance (15 samples, 0.02%)</title><rect x="684.0" y="581" width="0.2" height="15.0" fill="rgb(221,225,39)" rx="2" ry="2" />
<text  x="687.00" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_Tuple_impl&lt;std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (20 samples, 0.02%)</title><rect x="948.2" y="565" width="0.2" height="15.0" fill="rgb(212,208,5)" rx="2" ry="2" />
<text  x="951.16" y="575.5" ></text>
</g>
<g >
<title>__os_io (31 samples, 0.04%)</title><rect x="136.4" y="469" width="0.4" height="15.0" fill="rgb(253,225,16)" rx="2" ry="2" />
<text  x="139.41" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (23 samples, 0.03%)</title><rect x="509.9" y="261" width="0.3" height="15.0" fill="rgb(213,118,7)" rx="2" ry="2" />
<text  x="512.94" y="271.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock (11 samples, 0.01%)</title><rect x="882.2" y="613" width="0.1" height="15.0" fill="rgb(239,3,54)" rx="2" ry="2" />
<text  x="885.16" y="623.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (391 samples, 0.45%)</title><rect x="1113.6" y="437" width="5.2" height="15.0" fill="rgb(228,68,10)" rx="2" ry="2" />
<text  x="1116.56" y="447.5" ></text>
</g>
<g >
<title>CHash256::Write (164 samples, 0.19%)</title><rect x="180.9" y="197" width="2.2" height="15.0" fill="rgb(241,50,53)" rx="2" ry="2" />
<text  x="183.93" y="207.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (9 samples, 0.01%)</title><rect x="1065.2" y="677" width="0.1" height="15.0" fill="rgb(237,215,37)" rx="2" ry="2" />
<text  x="1068.21" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::rend (37 samples, 0.04%)</title><rect x="1052.3" y="613" width="0.5" height="15.0" fill="rgb(210,131,33)" rx="2" ry="2" />
<text  x="1055.31" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (14 samples, 0.02%)</title><rect x="659.0" y="501" width="0.2" height="15.0" fill="rgb(225,89,54)" rx="2" ry="2" />
<text  x="662.04" y="511.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (164 samples, 0.19%)</title><rect x="183.1" y="453" width="2.3" height="15.0" fill="rgb(235,182,28)" rx="2" ry="2" />
<text  x="186.14" y="463.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (203 samples, 0.23%)</title><rect x="169.7" y="517" width="2.7" height="15.0" fill="rgb(209,58,30)" rx="2" ry="2" />
<text  x="172.65" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_do_relocate (11 samples, 0.01%)</title><rect x="867.1" y="453" width="0.2" height="15.0" fill="rgb(232,152,54)" rx="2" ry="2" />
<text  x="870.11" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (77 samples, 0.09%)</title><rect x="1009.3" y="581" width="1.0" height="15.0" fill="rgb(205,61,42)" rx="2" ry="2" />
<text  x="1012.27" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (26 samples, 0.03%)</title><rect x="1088.5" y="485" width="0.3" height="15.0" fill="rgb(234,12,9)" rx="2" ry="2" />
<text  x="1091.48" y="495.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;void*, void*&gt; &gt;::operator (54 samples, 0.06%)</title><rect x="732.1" y="533" width="0.8" height="15.0" fill="rgb(249,22,29)" rx="2" ry="2" />
<text  x="735.13" y="543.5" ></text>
</g>
<g >
<title>__lock_put (25 samples, 0.03%)</title><rect x="148.1" y="485" width="0.4" height="15.0" fill="rgb(242,23,16)" rx="2" ry="2" />
<text  x="151.12" y="495.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (9 samples, 0.01%)</title><rect x="169.3" y="485" width="0.1" height="15.0" fill="rgb(221,136,13)" rx="2" ry="2" />
<text  x="172.29" y="495.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::swap (37 samples, 0.04%)</title><rect x="786.1" y="581" width="0.5" height="15.0" fill="rgb(234,177,21)" rx="2" ry="2" />
<text  x="789.12" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="861.5" y="325" width="0.1" height="15.0" fill="rgb(209,146,49)" rx="2" ry="2" />
<text  x="864.50" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_use_relocate (11 samples, 0.01%)</title><rect x="512.2" y="325" width="0.1" height="15.0" fill="rgb(234,20,4)" rx="2" ry="2" />
<text  x="515.18" y="335.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned char&gt;::allocator (8 samples, 0.01%)</title><rect x="669.3" y="597" width="0.2" height="15.0" fill="rgb(251,42,20)" rx="2" ry="2" />
<text  x="672.35" y="607.5" ></text>
</g>
<g >
<title>__dbc_iput (342 samples, 0.39%)</title><rect x="122.4" y="469" width="4.6" height="15.0" fill="rgb(216,184,46)" rx="2" ry="2" />
<text  x="125.35" y="479.5" ></text>
</g>
<g >
<title>all (87,562 samples, 100%)</title><rect x="10.0" y="789" width="1180.0" height="15.0" fill="rgb(229,169,41)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::base (12 samples, 0.01%)</title><rect x="811.4" y="421" width="0.2" height="15.0" fill="rgb(242,156,15)" rx="2" ry="2" />
<text  x="814.43" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,384 samples, 2.72%)</title><rect x="836.9" y="613" width="32.1" height="15.0" fill="rgb(241,179,4)" rx="2" ry="2" />
<text  x="839.90" y="623.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (165 samples, 0.19%)</title><rect x="1012.6" y="629" width="2.2" height="15.0" fill="rgb(229,1,52)" rx="2" ry="2" />
<text  x="1015.56" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_ptr (27 samples, 0.03%)</title><rect x="946.3" y="581" width="0.4" height="15.0" fill="rgb(251,214,7)" rx="2" ry="2" />
<text  x="949.34" y="591.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;CTransaction const, std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (7,651 samples, 8.74%)</title><rect x="464.1" y="581" width="103.1" height="15.0" fill="rgb(232,92,10)" rx="2" ry="2" />
<text  x="467.12" y="591.5" >std::allocat..</text>
</g>
<g >
<title>LockedPoolManager::Instance (18 samples, 0.02%)</title><rect x="618.1" y="549" width="0.2" height="15.0" fill="rgb(219,200,3)" rx="2" ry="2" />
<text  x="621.06" y="559.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (10 samples, 0.01%)</title><rect x="28.0" y="757" width="0.1" height="15.0" fill="rgb(243,83,53)" rx="2" ry="2" />
<text  x="30.96" y="767.5" ></text>
</g>
<g >
<title>__dbc_iget (685 samples, 0.78%)</title><rect x="138.3" y="533" width="9.3" height="15.0" fill="rgb(212,189,40)" rx="2" ry="2" />
<text  x="141.32" y="543.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::capacity (14 samples, 0.02%)</title><rect x="478.2" y="149" width="0.2" height="15.0" fill="rgb(230,18,17)" rx="2" ry="2" />
<text  x="481.23" y="159.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (10 samples, 0.01%)</title><rect x="1146.0" y="613" width="0.1" height="15.0" fill="rgb(254,111,47)" rx="2" ry="2" />
<text  x="1148.97" y="623.5" ></text>
</g>
<g >
<title>__memp_fput (13 samples, 0.01%)</title><rect x="126.8" y="437" width="0.2" height="15.0" fill="rgb(227,218,27)" rx="2" ry="2" />
<text  x="129.78" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, unsigned long&gt;, char*, unsigned long&amp;&gt; (20 samples, 0.02%)</title><rect x="662.7" y="485" width="0.3" height="15.0" fill="rgb(237,30,30)" rx="2" ry="2" />
<text  x="665.73" y="495.5" ></text>
</g>
<g >
<title>__subvdi3 (11 samples, 0.01%)</title><rect x="670.5" y="645" width="0.1" height="15.0" fill="rgb(232,132,21)" rx="2" ry="2" />
<text  x="673.49" y="655.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (15 samples, 0.02%)</title><rect x="122.0" y="405" width="0.2" height="15.0" fill="rgb(242,162,7)" rx="2" ry="2" />
<text  x="125.00" y="415.5" ></text>
</g>
<g >
<title>__dbc_iget (116 samples, 0.13%)</title><rect x="100.5" y="453" width="1.6" height="15.0" fill="rgb(206,180,32)" rx="2" ry="2" />
<text  x="103.51" y="463.5" ></text>
</g>
<g >
<title>__os_io (33 samples, 0.04%)</title><rect x="179.8" y="549" width="0.4" height="15.0" fill="rgb(241,35,28)" rx="2" ry="2" />
<text  x="182.79" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::max_size (16 samples, 0.02%)</title><rect x="503.4" y="245" width="0.2" height="15.0" fill="rgb(240,179,11)" rx="2" ry="2" />
<text  x="506.39" y="255.5" ></text>
</g>
<g >
<title>CTxIn::Serialize&lt;CHashWriter&gt; (519 samples, 0.59%)</title><rect x="526.4" y="277" width="7.0" height="15.0" fill="rgb(229,180,21)" rx="2" ry="2" />
<text  x="529.45" y="287.5" ></text>
</g>
<g >
<title>__bam_cmp (10 samples, 0.01%)</title><rect x="100.6" y="389" width="0.2" height="15.0" fill="rgb(244,204,3)" rx="2" ry="2" />
<text  x="103.63" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::max_size (39 samples, 0.04%)</title><rect x="493.6" y="325" width="0.6" height="15.0" fill="rgb(229,66,49)" rx="2" ry="2" />
<text  x="496.63" y="335.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (16 samples, 0.02%)</title><rect x="95.1" y="389" width="0.3" height="15.0" fill="rgb(245,6,43)" rx="2" ry="2" />
<text  x="98.14" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (1,161 samples, 1.33%)</title><rect x="428.7" y="517" width="15.7" height="15.0" fill="rgb(248,68,21)" rx="2" ry="2" />
<text  x="431.72" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="616.7" y="453" width="0.2" height="15.0" fill="rgb(227,158,8)" rx="2" ry="2" />
<text  x="619.72" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::new_allocator (14 samples, 0.02%)</title><rect x="1046.2" y="597" width="0.2" height="15.0" fill="rgb(254,152,43)" rx="2" ry="2" />
<text  x="1049.20" y="607.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.01%)</title><rect x="616.8" y="421" width="0.1" height="15.0" fill="rgb(248,8,17)" rx="2" ry="2" />
<text  x="619.80" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::vector (29 samples, 0.03%)</title><rect x="1065.6" y="677" width="0.4" height="15.0" fill="rgb(252,73,54)" rx="2" ry="2" />
<text  x="1068.61" y="687.5" ></text>
</g>
<g >
<title>CDataStream::read (1,100 samples, 1.26%)</title><rect x="636.3" y="629" width="14.9" height="15.0" fill="rgb(232,166,53)" rx="2" ry="2" />
<text  x="639.33" y="639.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CBlockHeader&gt; (42 samples, 0.05%)</title><rect x="46.7" y="613" width="0.5" height="15.0" fill="rgb(246,101,14)" rx="2" ry="2" />
<text  x="49.68" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::end (10 samples, 0.01%)</title><rect x="834.6" y="533" width="0.1" height="15.0" fill="rgb(220,46,40)" rx="2" ry="2" />
<text  x="837.59" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (54 samples, 0.06%)</title><rect x="31.5" y="597" width="0.7" height="15.0" fill="rgb(245,54,1)" rx="2" ry="2" />
<text  x="34.47" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;COutPoint&gt;::_M_valptr (8 samples, 0.01%)</title><rect x="1047.2" y="581" width="0.2" height="15.0" fill="rgb(231,83,13)" rx="2" ry="2" />
<text  x="1050.25" y="591.5" ></text>
</g>
<g >
<title>[unknown] (26 samples, 0.03%)</title><rect x="99.2" y="277" width="0.3" height="15.0" fill="rgb(235,57,21)" rx="2" ry="2" />
<text  x="102.19" y="287.5" ></text>
</g>
<g >
<title>CConnman::SocketHandler (9 samples, 0.01%)</title><rect x="1183.8" y="741" width="0.1" height="15.0" fill="rgb(230,165,28)" rx="2" ry="2" />
<text  x="1186.79" y="751.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.01%)</title><rect x="99.4" y="229" width="0.1" height="15.0" fill="rgb(209,141,48)" rx="2" ry="2" />
<text  x="102.41" y="239.5" ></text>
</g>
<g >
<title>__dbc_idup (27 samples, 0.03%)</title><rect x="88.3" y="469" width="0.4" height="15.0" fill="rgb(221,150,54)" rx="2" ry="2" />
<text  x="91.30" y="479.5" ></text>
</g>
<g >
<title>__dbc_cleanup (8 samples, 0.01%)</title><rect x="172.9" y="533" width="0.1" height="15.0" fill="rgb(237,2,12)" rx="2" ry="2" />
<text  x="175.86" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;uint256 const, CBlockIndex*&gt;&amp;&gt; (9 samples, 0.01%)</title><rect x="961.7" y="517" width="0.1" height="15.0" fill="rgb(228,115,44)" rx="2" ry="2" />
<text  x="964.73" y="527.5" ></text>
</g>
<g >
<title>CHashWriter::write (18 samples, 0.02%)</title><rect x="554.2" y="181" width="0.3" height="15.0" fill="rgb(212,137,21)" rx="2" ry="2" />
<text  x="557.22" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (64 samples, 0.07%)</title><rect x="564.0" y="437" width="0.8" height="15.0" fill="rgb(233,213,24)" rx="2" ry="2" />
<text  x="566.98" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (98 samples, 0.11%)</title><rect x="821.8" y="581" width="1.3" height="15.0" fill="rgb(253,135,11)" rx="2" ry="2" />
<text  x="824.78" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (28 samples, 0.03%)</title><rect x="124.1" y="357" width="0.3" height="15.0" fill="rgb(211,131,41)" rx="2" ry="2" />
<text  x="127.06" y="367.5" ></text>
</g>
<g >
<title>ShiftMessageC (24 samples, 0.03%)</title><rect x="1118.1" y="229" width="0.3" height="15.0" fill="rgb(237,61,29)" rx="2" ry="2" />
<text  x="1121.05" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (14 samples, 0.02%)</title><rect x="1081.4" y="533" width="0.2" height="15.0" fill="rgb(237,108,37)" rx="2" ry="2" />
<text  x="1084.40" y="543.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="83.0" y="389" width="0.2" height="15.0" fill="rgb(230,116,15)" rx="2" ry="2" />
<text  x="86.03" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char*&amp;&amp;, 0ul&gt; (10 samples, 0.01%)</title><rect x="680.5" y="453" width="0.1" height="15.0" fill="rgb(211,200,53)" rx="2" ry="2" />
<text  x="683.48" y="463.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (18 samples, 0.02%)</title><rect x="1091.1" y="581" width="0.2" height="15.0" fill="rgb(232,193,5)" rx="2" ry="2" />
<text  x="1094.08" y="591.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (386 samples, 0.44%)</title><rect x="1113.6" y="341" width="5.2" height="15.0" fill="rgb(211,212,20)" rx="2" ry="2" />
<text  x="1116.56" y="351.5" ></text>
</g>
<g >
<title>__memp_fget (38 samples, 0.04%)</title><rect x="91.9" y="389" width="0.6" height="15.0" fill="rgb(254,132,30)" rx="2" ry="2" />
<text  x="94.95" y="399.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (16 samples, 0.02%)</title><rect x="402.9" y="581" width="0.2" height="15.0" fill="rgb(218,149,4)" rx="2" ry="2" />
<text  x="405.92" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::max_size (47 samples, 0.05%)</title><rect x="483.6" y="325" width="0.7" height="15.0" fill="rgb(210,161,44)" rx="2" ry="2" />
<text  x="486.65" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.01%)</title><rect x="453.6" y="469" width="0.2" height="15.0" fill="rgb(232,224,6)" rx="2" ry="2" />
<text  x="456.62" y="479.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (9 samples, 0.01%)</title><rect x="1162.5" y="741" width="0.1" height="15.0" fill="rgb(229,33,41)" rx="2" ry="2" />
<text  x="1165.51" y="751.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (164 samples, 0.19%)</title><rect x="180.9" y="421" width="2.2" height="15.0" fill="rgb(250,91,4)" rx="2" ry="2" />
<text  x="183.93" y="431.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, uint256&amp;&gt; (27 samples, 0.03%)</title><rect x="574.9" y="613" width="0.4" height="15.0" fill="rgb(236,152,38)" rx="2" ry="2" />
<text  x="577.95" y="623.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.01%)</title><rect x="101.9" y="309" width="0.1" height="15.0" fill="rgb(208,173,22)" rx="2" ry="2" />
<text  x="104.89" y="319.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (18 samples, 0.02%)</title><rect x="553.3" y="101" width="0.2" height="15.0" fill="rgb(242,139,52)" rx="2" ry="2" />
<text  x="556.25" y="111.5" ></text>
</g>
<g >
<title>__bam_cmp (27 samples, 0.03%)</title><rect x="118.1" y="405" width="0.4" height="15.0" fill="rgb(244,172,28)" rx="2" ry="2" />
<text  x="121.12" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (51 samples, 0.06%)</title><rect x="1000.3" y="517" width="0.7" height="15.0" fill="rgb(243,43,30)" rx="2" ry="2" />
<text  x="1003.27" y="527.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (239 samples, 0.27%)</title><rect x="556.2" y="277" width="3.2" height="15.0" fill="rgb(241,162,8)" rx="2" ry="2" />
<text  x="559.19" y="287.5" ></text>
</g>
<g >
<title>Hash160&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (137 samples, 0.16%)</title><rect x="1125.6" y="645" width="1.8" height="15.0" fill="rgb(208,100,45)" rx="2" ry="2" />
<text  x="1128.58" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (9 samples, 0.01%)</title><rect x="655.5" y="517" width="0.1" height="15.0" fill="rgb(227,36,40)" rx="2" ry="2" />
<text  x="658.47" y="527.5" ></text>
</g>
<g >
<title>CHashWriter::write (15 samples, 0.02%)</title><rect x="549.4" y="181" width="0.2" height="15.0" fill="rgb(217,68,2)" rx="2" ry="2" />
<text  x="552.40" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (13 samples, 0.01%)</title><rect x="453.8" y="469" width="0.2" height="15.0" fill="rgb(241,221,52)" rx="2" ry="2" />
<text  x="456.82" y="479.5" ></text>
</g>
<g >
<title>KeyOriginInfo::KeyOriginInfo (14 samples, 0.02%)</title><rect x="892.4" y="533" width="0.2" height="15.0" fill="rgb(228,111,13)" rx="2" ry="2" />
<text  x="895.45" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::max_size (11 samples, 0.01%)</title><rect x="1179.4" y="757" width="0.2" height="15.0" fill="rgb(219,224,24)" rx="2" ry="2" />
<text  x="1182.42" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator++ (12 samples, 0.01%)</title><rect x="1037.5" y="661" width="0.2" height="15.0" fill="rgb(222,204,49)" rx="2" ry="2" />
<text  x="1040.54" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_insert_&lt;CBlockIndex* const&amp;, std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_Alloc_node&gt; (9 samples, 0.01%)</title><rect x="52.4" y="645" width="0.1" height="15.0" fill="rgb(210,194,54)" rx="2" ry="2" />
<text  x="55.41" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::pop_back (68 samples, 0.08%)</title><rect x="984.8" y="549" width="0.9" height="15.0" fill="rgb(212,195,32)" rx="2" ry="2" />
<text  x="987.76" y="559.5" ></text>
</g>
<g >
<title>CWalletTx::CWalletTx (26 samples, 0.03%)</title><rect x="19.4" y="757" width="0.4" height="15.0" fill="rgb(237,217,5)" rx="2" ry="2" />
<text  x="22.41" y="767.5" ></text>
</g>
<g >
<title>CSHA256::Write (8 samples, 0.01%)</title><rect x="553.4" y="37" width="0.1" height="15.0" fill="rgb(230,142,44)" rx="2" ry="2" />
<text  x="556.39" y="47.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTransaction&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="741" width="8.0" height="15.0" fill="rgb(217,25,22)" rx="2" ry="2" />
<text  x="1138.80" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (11 samples, 0.01%)</title><rect x="57.3" y="565" width="0.1" height="15.0" fill="rgb(221,171,8)" rx="2" ry="2" />
<text  x="60.29" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (54 samples, 0.06%)</title><rect x="31.5" y="613" width="0.7" height="15.0" fill="rgb(215,207,17)" rx="2" ry="2" />
<text  x="34.47" y="623.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (8 samples, 0.01%)</title><rect x="19.5" y="741" width="0.1" height="15.0" fill="rgb(227,132,4)" rx="2" ry="2" />
<text  x="22.50" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::operator= (168 samples, 0.19%)</title><rect x="741.6" y="613" width="2.3" height="15.0" fill="rgb(228,75,16)" rx="2" ry="2" />
<text  x="744.65" y="623.5" ></text>
</g>
<g >
<title>LookupBlockIndex (566 samples, 0.65%)</title><rect x="955.6" y="645" width="7.7" height="15.0" fill="rgb(216,171,50)" rx="2" ry="2" />
<text  x="958.64" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_drop_node (21 samples, 0.02%)</title><rect x="612.4" y="469" width="0.3" height="15.0" fill="rgb(238,135,6)" rx="2" ry="2" />
<text  x="615.38" y="479.5" ></text>
</g>
<g >
<title>ShiftMessageB (8 samples, 0.01%)</title><rect x="1125.3" y="565" width="0.1" height="15.0" fill="rgb(217,53,3)" rx="2" ry="2" />
<text  x="1128.31" y="575.5" ></text>
</g>
<g >
<title>__dbc_close (46 samples, 0.05%)</title><rect x="164.7" y="549" width="0.6" height="15.0" fill="rgb(218,65,14)" rx="2" ry="2" />
<text  x="167.69" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::begin (12 samples, 0.01%)</title><rect x="907.3" y="581" width="0.2" height="15.0" fill="rgb(221,41,10)" rx="2" ry="2" />
<text  x="910.34" y="591.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (18 samples, 0.02%)</title><rect x="454.5" y="453" width="0.3" height="15.0" fill="rgb(244,40,37)" rx="2" ry="2" />
<text  x="457.54" y="463.5" ></text>
</g>
<g >
<title>CKey::CKey (1,361 samples, 1.55%)</title><rect x="651.2" y="677" width="18.3" height="15.0" fill="rgb(226,185,41)" rx="2" ry="2" />
<text  x="654.16" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (29 samples, 0.03%)</title><rect x="860.5" y="293" width="0.3" height="15.0" fill="rgb(217,163,14)" rx="2" ry="2" />
<text  x="863.45" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::max_size (18 samples, 0.02%)</title><rect x="506.1" y="261" width="0.3" height="15.0" fill="rgb(220,28,37)" rx="2" ry="2" />
<text  x="509.13" y="271.5" ></text>
</g>
<g >
<title>__lock_get_internal (72 samples, 0.08%)</title><rect x="108.5" y="373" width="1.0" height="15.0" fill="rgb(211,2,14)" rx="2" ry="2" />
<text  x="111.50" y="383.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (164 samples, 0.19%)</title><rect x="180.9" y="501" width="2.2" height="15.0" fill="rgb(241,127,19)" rx="2" ry="2" />
<text  x="183.93" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_M_head (14 samples, 0.02%)</title><rect x="983.7" y="597" width="0.2" height="15.0" fill="rgb(232,167,5)" rx="2" ry="2" />
<text  x="986.72" y="607.5" ></text>
</g>
<g >
<title>push_lock (675 samples, 0.77%)</title><rect x="871.7" y="597" width="9.1" height="15.0" fill="rgb(207,172,13)" rx="2" ry="2" />
<text  x="874.75" y="607.5" ></text>
</g>
<g >
<title>_int_malloc (11 samples, 0.01%)</title><rect x="180.6" y="517" width="0.2" height="15.0" fill="rgb(243,3,33)" rx="2" ry="2" />
<text  x="183.61" y="527.5" ></text>
</g>
<g >
<title>WriteCompactSize (11 samples, 0.01%)</title><rect x="1030.4" y="341" width="0.1" height="15.0" fill="rgb(232,224,2)" rx="2" ry="2" />
<text  x="1033.37" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;CTransaction const,  (20 samples, 0.02%)</title><rect x="1061.7" y="677" width="0.2" height="15.0" fill="rgb(227,32,8)" rx="2" ry="2" />
<text  x="1064.68" y="687.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (2,275 samples, 2.60%)</title><rect x="413.8" y="597" width="30.7" height="15.0" fill="rgb(243,63,31)" rx="2" ry="2" />
<text  x="416.84" y="607.5" >se..</text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (47 samples, 0.05%)</title><rect x="103.3" y="437" width="0.6" height="15.0" fill="rgb(252,139,15)" rx="2" ry="2" />
<text  x="106.30" y="447.5" ></text>
</g>
<g >
<title>CheckTransaction (26 samples, 0.03%)</title><rect x="20.5" y="757" width="0.3" height="15.0" fill="rgb(206,149,8)" rx="2" ry="2" />
<text  x="23.50" y="767.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (11 samples, 0.01%)</title><rect x="45.4" y="453" width="0.2" height="15.0" fill="rgb(238,0,21)" rx="2" ry="2" />
<text  x="48.40" y="463.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CScript&gt; (125 samples, 0.14%)</title><rect x="1029.5" y="453" width="1.7" height="15.0" fill="rgb(231,149,33)" rx="2" ry="2" />
<text  x="1032.50" y="463.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="726.8" y="565" width="0.1" height="15.0" fill="rgb(223,129,10)" rx="2" ry="2" />
<text  x="729.77" y="575.5" ></text>
</g>
<g >
<title>CDataStream::read (19 samples, 0.02%)</title><rect x="610.6" y="597" width="0.2" height="15.0" fill="rgb(244,201,32)" rx="2" ry="2" />
<text  x="613.55" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::__uniq_ptr_impl (73 samples, 0.08%)</title><rect x="946.2" y="597" width="1.0" height="15.0" fill="rgb(247,218,29)" rx="2" ry="2" />
<text  x="949.22" y="607.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_unlock (19 samples, 0.02%)</title><rect x="986.1" y="533" width="0.2" height="15.0" fill="rgb(238,63,42)" rx="2" ry="2" />
<text  x="989.05" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, std::_Rb_tree_iterator&lt;COutPoint&gt; &gt;::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, std::_Rb_tree_iterator&lt;COutPoint&gt;, true&gt; (16 samples, 0.02%)</title><rect x="908.8" y="581" width="0.2" height="15.0" fill="rgb(211,17,46)" rx="2" ry="2" />
<text  x="911.82" y="591.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (13 samples, 0.01%)</title><rect x="742.5" y="565" width="0.1" height="15.0" fill="rgb(240,89,24)" rx="2" ry="2" />
<text  x="745.46" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (46 samples, 0.05%)</title><rect x="490.2" y="325" width="0.7" height="15.0" fill="rgb(221,73,20)" rx="2" ry="2" />
<text  x="493.24" y="335.5" ></text>
</g>
<g >
<title>CKeyID::CKeyID (8 samples, 0.01%)</title><rect x="684.6" y="661" width="0.1" height="15.0" fill="rgb(227,224,17)" rx="2" ry="2" />
<text  x="687.58" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::get (8 samples, 0.01%)</title><rect x="983.2" y="645" width="0.1" height="15.0" fill="rgb(222,201,54)" rx="2" ry="2" />
<text  x="986.19" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (252 samples, 0.29%)</title><rect x="735.8" y="597" width="3.4" height="15.0" fill="rgb(254,223,46)" rx="2" ry="2" />
<text  x="738.79" y="607.5" ></text>
</g>
<g >
<title>GetScriptForDestination (815 samples, 0.93%)</title><rect x="806.2" y="613" width="11.0" height="15.0" fill="rgb(252,212,21)" rx="2" ry="2" />
<text  x="809.24" y="623.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (127 samples, 0.15%)</title><rect x="1121.8" y="597" width="1.7" height="15.0" fill="rgb(209,40,48)" rx="2" ry="2" />
<text  x="1124.82" y="607.5" ></text>
</g>
<g >
<title>SaltedIDHasher::operator (124 samples, 0.14%)</title><rect x="823.2" y="565" width="1.7" height="15.0" fill="rgb(208,91,10)" rx="2" ry="2" />
<text  x="826.22" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::get (68 samples, 0.08%)</title><rect x="982.3" y="645" width="0.9" height="15.0" fill="rgb(229,31,39)" rx="2" ry="2" />
<text  x="985.28" y="655.5" ></text>
</g>
<g >
<title>BerkeleyEnvironment::Verify (39 samples, 0.04%)</title><rect x="1143.9" y="677" width="0.5" height="15.0" fill="rgb(242,41,7)" rx="2" ry="2" />
<text  x="1146.88" y="687.5" ></text>
</g>
<g >
<title>__libc_pread (50 samples, 0.06%)</title><rect x="146.4" y="421" width="0.6" height="15.0" fill="rgb(245,115,10)" rx="2" ry="2" />
<text  x="149.35" y="431.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (9 samples, 0.01%)</title><rect x="1090.9" y="533" width="0.1" height="15.0" fill="rgb(241,27,27)" rx="2" ry="2" />
<text  x="1093.92" y="543.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="169.1" y="517" width="0.1" height="15.0" fill="rgb(223,143,51)" rx="2" ry="2" />
<text  x="172.06" y="527.5" ></text>
</g>
<g >
<title>base_blob&lt;160u&gt;::Unserialize&lt;CDataStream&gt; (122 samples, 0.14%)</title><rect x="634.0" y="645" width="1.6" height="15.0" fill="rgb(223,32,7)" rx="2" ry="2" />
<text  x="637.00" y="655.5" ></text>
</g>
<g >
<title>__strlen_avx2 (18 samples, 0.02%)</title><rect x="871.1" y="549" width="0.2" height="15.0" fill="rgb(245,14,19)" rx="2" ry="2" />
<text  x="874.07" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (209 samples, 0.24%)</title><rect x="74.4" y="501" width="2.8" height="15.0" fill="rgb(224,118,3)" rx="2" ry="2" />
<text  x="77.42" y="511.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1,546 samples, 1.77%)</title><rect x="494.5" y="389" width="20.8" height="15.0" fill="rgb(253,206,52)" rx="2" ry="2" />
<text  x="497.51" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;char*&amp;&amp;&gt;::tuple (23 samples, 0.03%)</title><rect x="1085.7" y="485" width="0.3" height="15.0" fill="rgb(207,104,29)" rx="2" ry="2" />
<text  x="1088.67" y="495.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (104 samples, 0.12%)</title><rect x="520.7" y="373" width="1.4" height="15.0" fill="rgb(239,69,50)" rx="2" ry="2" />
<text  x="523.71" y="383.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (10 samples, 0.01%)</title><rect x="1183.6" y="741" width="0.1" height="15.0" fill="rgb(237,62,26)" rx="2" ry="2" />
<text  x="1186.56" y="751.5" ></text>
</g>
<g >
<title>CScriptWitness::CScriptWitness (45 samples, 0.05%)</title><rect x="469.4" y="357" width="0.6" height="15.0" fill="rgb(223,30,6)" rx="2" ry="2" />
<text  x="472.44" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::max_size (21 samples, 0.02%)</title><rect x="322.9" y="533" width="0.3" height="15.0" fill="rgb(249,119,45)" rx="2" ry="2" />
<text  x="325.90" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::size (13 samples, 0.01%)</title><rect x="909.0" y="597" width="0.2" height="15.0" fill="rgb(245,122,19)" rx="2" ry="2" />
<text  x="912.04" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (23 samples, 0.03%)</title><rect x="116.1" y="389" width="0.3" height="15.0" fill="rgb(250,221,14)" rx="2" ry="2" />
<text  x="119.10" y="399.5" ></text>
</g>
<g >
<title>CWalletTx::CWalletTx (364 samples, 0.42%)</title><rect x="998.4" y="549" width="4.9" height="15.0" fill="rgb(243,120,23)" rx="2" ry="2" />
<text  x="1001.42" y="559.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock (10 samples, 0.01%)</title><rect x="835.5" y="597" width="0.2" height="15.0" fill="rgb(243,47,26)" rx="2" ry="2" />
<text  x="838.52" y="607.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (164 samples, 0.19%)</title><rect x="180.9" y="325" width="2.2" height="15.0" fill="rgb(235,52,1)" rx="2" ry="2" />
<text  x="183.93" y="335.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, CScript&amp;&gt; (127 samples, 0.15%)</title><rect x="486.8" y="293" width="1.7" height="15.0" fill="rgb(240,226,24)" rx="2" ry="2" />
<text  x="489.76" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;char const*, char*, zero_after_free_allocator&lt;char&gt; &gt; (39 samples, 0.04%)</title><rect x="38.7" y="597" width="0.6" height="15.0" fill="rgb(251,85,38)" rx="2" ry="2" />
<text  x="41.74" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::deallocate (12 samples, 0.01%)</title><rect x="614.1" y="405" width="0.2" height="15.0" fill="rgb(247,159,26)" rx="2" ry="2" />
<text  x="617.12" y="415.5" ></text>
</g>
<g >
<title>CHash256::Write (9 samples, 0.01%)</title><rect x="533.6" y="245" width="0.1" height="15.0" fill="rgb(242,186,30)" rx="2" ry="2" />
<text  x="536.56" y="255.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;uint160&amp;&gt; (129 samples, 0.15%)</title><rect x="633.9" y="677" width="1.7" height="15.0" fill="rgb(239,152,50)" rx="2" ry="2" />
<text  x="636.91" y="687.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CTransaction&gt; (1,004 samples, 1.15%)</title><rect x="1023.6" y="629" width="13.5" height="15.0" fill="rgb(220,38,9)" rx="2" ry="2" />
<text  x="1026.60" y="639.5" ></text>
</g>
<g >
<title>std::__distance&lt;char const*&gt; (10 samples, 0.01%)</title><rect x="578.6" y="581" width="0.1" height="15.0" fill="rgb(207,55,8)" rx="2" ry="2" />
<text  x="581.60" y="591.5" ></text>
</g>
<g >
<title>__db_vrfy_putpageinfo (421 samples, 0.48%)</title><rect x="121.4" y="501" width="5.7" height="15.0" fill="rgb(236,38,30)" rx="2" ry="2" />
<text  x="124.39" y="511.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock (53 samples, 0.06%)</title><rect x="944.6" y="565" width="0.7" height="15.0" fill="rgb(246,204,1)" rx="2" ry="2" />
<text  x="947.60" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (8 samples, 0.01%)</title><rect x="1154.7" y="757" width="0.2" height="15.0" fill="rgb(221,98,19)" rx="2" ry="2" />
<text  x="1157.75" y="767.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::internal_apply_visitor_impl&lt;boost::detail::variant::invoke_visitor&lt;(anonymous namespace)::CScriptVisitor const, false&gt;, void const*&gt; (720 samples, 0.82%)</title><rect x="807.4" y="549" width="9.7" height="15.0" fill="rgb(206,179,36)" rx="2" ry="2" />
<text  x="810.43" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_addr (8 samples, 0.01%)</title><rect x="1147.6" y="741" width="0.1" height="15.0" fill="rgb(254,139,47)" rx="2" ry="2" />
<text  x="1150.58" y="751.5" ></text>
</g>
<g >
<title>__db_lput (19 samples, 0.02%)</title><rect x="157.7" y="517" width="0.2" height="15.0" fill="rgb(209,37,35)" rx="2" ry="2" />
<text  x="160.66" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (131 samples, 0.15%)</title><rect x="993.5" y="613" width="1.8" height="15.0" fill="rgb(228,179,51)" rx="2" ry="2" />
<text  x="996.52" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::begin (10 samples, 0.01%)</title><rect x="663.8" y="565" width="0.1" height="15.0" fill="rgb(249,44,54)" rx="2" ry="2" />
<text  x="666.76" y="575.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (42 samples, 0.05%)</title><rect x="1124.7" y="549" width="0.6" height="15.0" fill="rgb(231,127,8)" rx="2" ry="2" />
<text  x="1127.75" y="559.5" ></text>
</g>
<g >
<title>CWallet::Verify (9,138 samples, 10.44%)</title><rect x="57.8" y="693" width="123.1" height="15.0" fill="rgb(242,57,20)" rx="2" ry="2" />
<text  x="60.79" y="703.5" >CWallet::Verify</text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="373" width="3.8" height="15.0" fill="rgb(248,88,39)" rx="2" ry="2" />
<text  x="1142.99" y="383.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, CBlockIndex*&gt;*, std::vector&lt;std::pair&lt;int, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;int, CBlockIndex*&gt; &gt; &gt; &gt; &gt; (25 samples, 0.03%)</title><rect x="52.6" y="677" width="0.3" height="15.0" fill="rgb(238,187,21)" rx="2" ry="2" />
<text  x="55.56" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (328 samples, 0.37%)</title><rect x="180.9" y="677" width="4.5" height="15.0" fill="rgb(240,225,4)" rx="2" ry="2" />
<text  x="183.93" y="687.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (43 samples, 0.05%)</title><rect x="570.0" y="501" width="0.6" height="15.0" fill="rgb(219,123,46)" rx="2" ry="2" />
<text  x="573.03" y="511.5" ></text>
</g>
<g >
<title>CDiskBlockIndex::CDiskBlockIndex (9 samples, 0.01%)</title><rect x="45.8" y="661" width="0.1" height="15.0" fill="rgb(237,2,7)" rx="2" ry="2" />
<text  x="48.81" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (62 samples, 0.07%)</title><rect x="596.7" y="565" width="0.8" height="15.0" fill="rgb(251,81,47)" rx="2" ry="2" />
<text  x="599.70" y="575.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.01%)</title><rect x="132.7" y="421" width="0.2" height="15.0" fill="rgb(215,223,34)" rx="2" ry="2" />
<text  x="135.71" y="431.5" ></text>
</g>
<g >
<title>__db_vrfy_pgset_inc (118 samples, 0.13%)</title><rect x="103.2" y="485" width="1.6" height="15.0" fill="rgb(224,176,5)" rx="2" ry="2" />
<text  x="106.17" y="495.5" ></text>
</g>
<g >
<title>CSHA256::Write (10 samples, 0.01%)</title><rect x="562.5" y="261" width="0.2" height="15.0" fill="rgb(214,7,24)" rx="2" ry="2" />
<text  x="565.52" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_base (58 samples, 0.07%)</title><rect x="1018.6" y="645" width="0.7" height="15.0" fill="rgb(225,65,53)" rx="2" ry="2" />
<text  x="1021.56" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (11 samples, 0.01%)</title><rect x="924.3" y="565" width="0.2" height="15.0" fill="rgb(232,152,3)" rx="2" ry="2" />
<text  x="927.30" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*, secure_allocator&lt;unsigned char&gt; &gt; (841 samples, 0.96%)</title><rect x="1066.1" y="661" width="11.4" height="15.0" fill="rgb(229,139,1)" rx="2" ry="2" />
<text  x="1069.14" y="671.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (16 samples, 0.02%)</title><rect x="487.6" y="149" width="0.2" height="15.0" fill="rgb(217,87,46)" rx="2" ry="2" />
<text  x="490.61" y="159.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="113.1" y="437" width="0.2" height="15.0" fill="rgb(235,229,31)" rx="2" ry="2" />
<text  x="116.13" y="447.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (1,554 samples, 1.77%)</title><rect x="542.9" y="405" width="21.0" height="15.0" fill="rgb(226,182,22)" rx="2" ry="2" />
<text  x="545.93" y="415.5" ></text>
</g>
<g >
<title>ShiftMessageA (8 samples, 0.01%)</title><rect x="1113.0" y="357" width="0.1" height="15.0" fill="rgb(224,11,8)" rx="2" ry="2" />
<text  x="1115.98" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (22 samples, 0.03%)</title><rect x="811.3" y="437" width="0.3" height="15.0" fill="rgb(211,10,49)" rx="2" ry="2" />
<text  x="814.31" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;CChainState, std::default_delete&lt;CChainState&gt; &gt;::_M_ptr (57 samples, 0.07%)</title><rect x="954.2" y="597" width="0.7" height="15.0" fill="rgb(207,199,29)" rx="2" ry="2" />
<text  x="957.17" y="607.5" ></text>
</g>
<g >
<title>__db_vrfy_pgset_get (340 samples, 0.39%)</title><rect x="164.3" y="581" width="4.6" height="15.0" fill="rgb(249,216,16)" rx="2" ry="2" />
<text  x="167.28" y="591.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned char*&gt; (9 samples, 0.01%)</title><rect x="668.1" y="581" width="0.2" height="15.0" fill="rgb(235,41,9)" rx="2" ry="2" />
<text  x="671.14" y="591.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_destroy (8 samples, 0.01%)</title><rect x="134.5" y="421" width="0.1" height="15.0" fill="rgb(212,28,25)" rx="2" ry="2" />
<text  x="137.49" y="431.5" ></text>
</g>
<g >
<title>__dbc_close (33 samples, 0.04%)</title><rect x="87.8" y="453" width="0.5" height="15.0" fill="rgb(249,229,46)" rx="2" ry="2" />
<text  x="90.82" y="463.5" ></text>
</g>
<g >
<title>BlockManager::LoadBlockIndex (43 samples, 0.05%)</title><rect x="32.3" y="677" width="0.5" height="15.0" fill="rgb(223,99,42)" rx="2" ry="2" />
<text  x="35.26" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="1036.2" y="533" width="0.2" height="15.0" fill="rgb(217,85,14)" rx="2" ry="2" />
<text  x="1039.20" y="543.5" ></text>
</g>
<g >
<title>__bam_ca_delete (25 samples, 0.03%)</title><rect x="77.4" y="485" width="0.3" height="15.0" fill="rgb(254,122,35)" rx="2" ry="2" />
<text  x="80.38" y="495.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (159 samples, 0.18%)</title><rect x="410.1" y="613" width="2.1" height="15.0" fill="rgb(246,45,41)" rx="2" ry="2" />
<text  x="413.09" y="623.5" ></text>
</g>
<g >
<title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (69 samples, 0.08%)</title><rect x="31.3" y="693" width="0.9" height="15.0" fill="rgb(248,209,54)" rx="2" ry="2" />
<text  x="34.27" y="703.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (15 samples, 0.02%)</title><rect x="100.3" y="437" width="0.2" height="15.0" fill="rgb(213,129,30)" rx="2" ry="2" />
<text  x="103.28" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::~pair (15 samples, 0.02%)</title><rect x="942.5" y="533" width="0.2" height="15.0" fill="rgb(205,118,45)" rx="2" ry="2" />
<text  x="945.47" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, CChainState*, std::default_delete&lt;CChainState&gt; &gt; (37 samples, 0.04%)</title><rect x="954.4" y="581" width="0.5" height="15.0" fill="rgb(242,158,34)" rx="2" ry="2" />
<text  x="957.44" y="591.5" ></text>
</g>
<g >
<title>CSHA256::Write (10 samples, 0.01%)</title><rect x="548.4" y="37" width="0.1" height="15.0" fill="rgb(211,101,33)" rx="2" ry="2" />
<text  x="551.39" y="47.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 0.02%)</title><rect x="145.9" y="341" width="0.2" height="15.0" fill="rgb(219,57,18)" rx="2" ry="2" />
<text  x="148.85" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (10 samples, 0.01%)</title><rect x="1103.6" y="645" width="0.1" height="15.0" fill="rgb(229,168,18)" rx="2" ry="2" />
<text  x="1106.56" y="655.5" ></text>
</g>
<g >
<title>CSHA256::Write (13 samples, 0.01%)</title><rect x="533.1" y="149" width="0.2" height="15.0" fill="rgb(207,122,51)" rx="2" ry="2" />
<text  x="536.14" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, true&gt; &gt; &gt;::allocate (34 samples, 0.04%)</title><rect x="891.3" y="613" width="0.5" height="15.0" fill="rgb(231,209,21)" rx="2" ry="2" />
<text  x="894.30" y="623.5" ></text>
</g>
<g >
<title>CWallet::SyncMetaData (663 samples, 0.76%)</title><rect x="896.4" y="629" width="9.0" height="15.0" fill="rgb(242,2,54)" rx="2" ry="2" />
<text  x="899.44" y="639.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (11 samples, 0.01%)</title><rect x="24.0" y="757" width="0.1" height="15.0" fill="rgb(235,1,33)" rx="2" ry="2" />
<text  x="26.97" y="767.5" ></text>
</g>
<g >
<title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::set (54 samples, 0.06%)</title><rect x="1045.7" y="661" width="0.7" height="15.0" fill="rgb(252,201,4)" rx="2" ry="2" />
<text  x="1048.66" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (25 samples, 0.03%)</title><rect x="1181.9" y="757" width="0.4" height="15.0" fill="rgb(253,169,25)" rx="2" ry="2" />
<text  x="1184.94" y="767.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (27 samples, 0.03%)</title><rect x="409.4" y="629" width="0.4" height="15.0" fill="rgb(224,163,0)" rx="2" ry="2" />
<text  x="412.42" y="639.5" ></text>
</g>
<g >
<title>LockedPool::free (790 samples, 0.90%)</title><rect x="673.4" y="581" width="10.6" height="15.0" fill="rgb(248,215,7)" rx="2" ry="2" />
<text  x="676.35" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (9 samples, 0.01%)</title><rect x="945.7" y="597" width="0.1" height="15.0" fill="rgb(249,156,31)" rx="2" ry="2" />
<text  x="948.66" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (158 samples, 0.18%)</title><rect x="1010.3" y="597" width="2.2" height="15.0" fill="rgb(248,12,17)" rx="2" ry="2" />
<text  x="1013.32" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_node_allocator (10 samples, 0.01%)</title><rect x="661.9" y="485" width="0.1" height="15.0" fill="rgb(241,75,10)" rx="2" ry="2" />
<text  x="664.88" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, CKeyID&amp;&amp;&gt; (13 samples, 0.01%)</title><rect x="868.2" y="517" width="0.2" height="15.0" fill="rgb(215,183,7)" rx="2" ry="2" />
<text  x="871.18" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (41 samples, 0.05%)</title><rect x="518.3" y="437" width="0.5" height="15.0" fill="rgb(205,118,29)" rx="2" ry="2" />
<text  x="521.29" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (24 samples, 0.03%)</title><rect x="1041.2" y="565" width="0.3" height="15.0" fill="rgb(243,79,20)" rx="2" ry="2" />
<text  x="1044.22" y="575.5" ></text>
</g>
<g >
<title>__bam_get_root (29 samples, 0.03%)</title><rect x="123.4" y="405" width="0.4" height="15.0" fill="rgb(250,25,23)" rx="2" ry="2" />
<text  x="126.36" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.01%)</title><rect x="86.7" y="357" width="0.1" height="15.0" fill="rgb(213,80,53)" rx="2" ry="2" />
<text  x="89.69" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;, unsigned int*&gt; (44 samples, 0.05%)</title><rect x="883.9" y="565" width="0.6" height="15.0" fill="rgb(248,100,53)" rx="2" ry="2" />
<text  x="886.90" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_ptr (38 samples, 0.04%)</title><rect x="832.7" y="469" width="0.5" height="15.0" fill="rgb(223,85,8)" rx="2" ry="2" />
<text  x="835.72" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="1093.0" y="629" width="0.1" height="15.0" fill="rgb(243,141,3)" rx="2" ry="2" />
<text  x="1096.01" y="639.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;CKeyID&gt; (9 samples, 0.01%)</title><rect x="868.9" y="597" width="0.1" height="15.0" fill="rgb(213,215,47)" rx="2" ry="2" />
<text  x="871.90" y="607.5" ></text>
</g>
<g >
<title>__db_put (412 samples, 0.47%)</title><rect x="121.4" y="485" width="5.6" height="15.0" fill="rgb(237,65,29)" rx="2" ry="2" />
<text  x="124.45" y="495.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.03%)</title><rect x="891.4" y="581" width="0.4" height="15.0" fill="rgb(221,107,33)" rx="2" ry="2" />
<text  x="894.37" y="591.5" ></text>
</g>
<g >
<title>CHash256::Write (284 samples, 0.32%)</title><rect x="1140.0" y="213" width="3.8" height="15.0" fill="rgb(236,3,27)" rx="2" ry="2" />
<text  x="1142.99" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (54 samples, 0.06%)</title><rect x="56.5" y="517" width="0.7" height="15.0" fill="rgb(235,13,20)" rx="2" ry="2" />
<text  x="59.49" y="527.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (12 samples, 0.01%)</title><rect x="1030.6" y="341" width="0.2" height="15.0" fill="rgb(234,157,22)" rx="2" ry="2" />
<text  x="1033.64" y="351.5" ></text>
</g>
<g >
<title>CHashWriter::write (11 samples, 0.01%)</title><rect x="554.7" y="261" width="0.1" height="15.0" fill="rgb(207,94,19)" rx="2" ry="2" />
<text  x="557.69" y="271.5" ></text>
</g>
<g >
<title>boost::detail::variant::visitation_impl_invoke_impl&lt;boost::detail::variant::invoke_visitor&lt;(anonymous namespace)::CScriptVisitor const, false&gt;, void const*, WitnessV0KeyHash&gt; (699 samples, 0.80%)</title><rect x="807.7" y="501" width="9.4" height="15.0" fill="rgb(250,158,28)" rx="2" ry="2" />
<text  x="810.71" y="511.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (205 samples, 0.23%)</title><rect x="366.7" y="549" width="2.7" height="15.0" fill="rgb(207,83,35)" rx="2" ry="2" />
<text  x="369.69" y="559.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (36 samples, 0.04%)</title><rect x="804.7" y="565" width="0.4" height="15.0" fill="rgb(241,166,48)" rx="2" ry="2" />
<text  x="807.66" y="575.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (10 samples, 0.01%)</title><rect x="1122.7" y="565" width="0.1" height="15.0" fill="rgb(212,61,54)" rx="2" ry="2" />
<text  x="1125.70" y="575.5" ></text>
</g>
<g >
<title>__dbc_close (19 samples, 0.02%)</title><rect x="138.0" y="533" width="0.3" height="15.0" fill="rgb(246,167,26)" rx="2" ry="2" />
<text  x="141.01" y="543.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;unsigned char*&gt; (8 samples, 0.01%)</title><rect x="502.3" y="229" width="0.1" height="15.0" fill="rgb(249,172,10)" rx="2" ry="2" />
<text  x="505.28" y="239.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (341 samples, 0.39%)</title><rect x="1056.0" y="613" width="4.6" height="15.0" fill="rgb(239,29,42)" rx="2" ry="2" />
<text  x="1059.02" y="623.5" ></text>
</g>
<g >
<title>__bswap_32 (14 samples, 0.02%)</title><rect x="1054.3" y="613" width="0.2" height="15.0" fill="rgb(219,90,22)" rx="2" ry="2" />
<text  x="1057.31" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (112 samples, 0.13%)</title><rect x="500.9" y="293" width="1.5" height="15.0" fill="rgb(212,198,35)" rx="2" ry="2" />
<text  x="503.88" y="303.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (742 samples, 0.85%)</title><rect x="524.6" y="341" width="10.0" height="15.0" fill="rgb(235,115,25)" rx="2" ry="2" />
<text  x="527.59" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::push_back (28 samples, 0.03%)</title><rect x="835.1" y="565" width="0.4" height="15.0" fill="rgb(240,176,26)" rx="2" ry="2" />
<text  x="838.12" y="575.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (13 samples, 0.01%)</title><rect x="45.4" y="485" width="0.2" height="15.0" fill="rgb(212,161,27)" rx="2" ry="2" />
<text  x="48.39" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (22 samples, 0.03%)</title><rect x="360.5" y="613" width="0.3" height="15.0" fill="rgb(227,215,31)" rx="2" ry="2" />
<text  x="363.53" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;uint256&gt;::~allocator (11 samples, 0.01%)</title><rect x="605.0" y="581" width="0.1" height="15.0" fill="rgb(235,26,45)" rx="2" ry="2" />
<text  x="607.96" y="591.5" ></text>
</g>
<g >
<title>__db_vrfy_ovfl_structure (412 samples, 0.47%)</title><rect x="100.1" y="501" width="5.6" height="15.0" fill="rgb(246,24,34)" rx="2" ry="2" />
<text  x="103.14" y="511.5" ></text>
</g>
<g >
<title>CTxIn::Serialize&lt;CHashWriter&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="405" width="4.2" height="15.0" fill="rgb(252,146,4)" rx="2" ry="2" />
<text  x="1138.80" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, uint256 const, CBlockIndex*&gt; (10 samples, 0.01%)</title><rect x="961.8" y="517" width="0.2" height="15.0" fill="rgb(215,97,42)" rx="2" ry="2" />
<text  x="964.85" y="527.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (109 samples, 0.12%)</title><rect x="1137.9" y="149" width="1.5" height="15.0" fill="rgb(227,123,14)" rx="2" ry="2" />
<text  x="1140.93" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.01%)</title><rect x="1082.1" y="533" width="0.2" height="15.0" fill="rgb(239,181,4)" rx="2" ry="2" />
<text  x="1085.12" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::vector (176 samples, 0.20%)</title><rect x="1001.0" y="533" width="2.3" height="15.0" fill="rgb(214,143,16)" rx="2" ry="2" />
<text  x="1003.96" y="543.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (29 samples, 0.03%)</title><rect x="511.8" y="293" width="0.4" height="15.0" fill="rgb(233,51,14)" rx="2" ry="2" />
<text  x="514.79" y="303.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTransaction&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="661" width="13.8" height="15.0" fill="rgb(228,120,39)" rx="2" ry="2" />
<text  x="1107.95" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;CTxOut*&gt; (8 samples, 0.01%)</title><rect x="490.1" y="309" width="0.1" height="15.0" fill="rgb(205,107,27)" rx="2" ry="2" />
<text  x="493.13" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_lower_bound (72 samples, 0.08%)</title><rect x="852.7" y="357" width="1.0" height="15.0" fill="rgb(244,150,45)" rx="2" ry="2" />
<text  x="855.73" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_deallocate (224 samples, 0.26%)</title><rect x="387.6" y="645" width="3.0" height="15.0" fill="rgb(248,82,29)" rx="2" ry="2" />
<text  x="390.62" y="655.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Unserialize&lt;CDataStream&gt; (29 samples, 0.03%)</title><rect x="473.8" y="181" width="0.4" height="15.0" fill="rgb(212,107,33)" rx="2" ry="2" />
<text  x="476.81" y="191.5" ></text>
</g>
<g >
<title>BerkeleyEnvironment::Verify (20 samples, 0.02%)</title><rect x="1144.6" y="661" width="0.2" height="15.0" fill="rgb(246,27,20)" rx="2" ry="2" />
<text  x="1147.57" y="671.5" ></text>
</g>
<g >
<title>Dbc::get (4,197 samples, 4.79%)</title><rect x="326.7" y="677" width="56.6" height="15.0" fill="rgb(217,178,9)" rx="2" ry="2" />
<text  x="329.70" y="687.5" >Dbc::..</text>
</g>
<g >
<title>CHash160::Finalize (46 samples, 0.05%)</title><rect x="893.5" y="629" width="0.6" height="15.0" fill="rgb(244,57,34)" rx="2" ry="2" />
<text  x="896.47" y="639.5" ></text>
</g>
<g >
<title>uint160::uint160 (8 samples, 0.01%)</title><rect x="785.7" y="581" width="0.1" height="15.0" fill="rgb(224,133,2)" rx="2" ry="2" />
<text  x="788.66" y="591.5" ></text>
</g>
<g >
<title>operator new (319 samples, 0.36%)</title><rect x="275.7" y="549" width="4.3" height="15.0" fill="rgb(213,133,42)" rx="2" ry="2" />
<text  x="278.66" y="559.5" ></text>
</g>
<g >
<title>boost::detail::variant::invoke_visitor&lt;(anonymous namespace)::CScriptVisitor const, false&gt;::internal_visit&lt;WitnessV0KeyHash const&amp;&gt; (693 samples, 0.79%)</title><rect x="807.8" y="485" width="9.3" height="15.0" fill="rgb(225,123,15)" rx="2" ry="2" />
<text  x="810.79" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::~_Vector_impl (8 samples, 0.01%)</title><rect x="571.1" y="421" width="0.1" height="15.0" fill="rgb(251,4,42)" rx="2" ry="2" />
<text  x="574.11" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (12 samples, 0.01%)</title><rect x="815.5" y="389" width="0.1" height="15.0" fill="rgb(214,103,17)" rx="2" ry="2" />
<text  x="818.47" y="399.5" ></text>
</g>
<g >
<title>__lock_put (12 samples, 0.01%)</title><rect x="155.0" y="469" width="0.2" height="15.0" fill="rgb(247,201,1)" rx="2" ry="2" />
<text  x="158.02" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_use_relocate (9 samples, 0.01%)</title><rect x="668.3" y="629" width="0.1" height="15.0" fill="rgb(209,169,10)" rx="2" ry="2" />
<text  x="671.27" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (44 samples, 0.05%)</title><rect x="658.4" y="501" width="0.6" height="15.0" fill="rgb(254,197,29)" rx="2" ry="2" />
<text  x="661.45" y="511.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="87.3" y="309" width="0.2" height="15.0" fill="rgb(241,186,2)" rx="2" ry="2" />
<text  x="90.31" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (10 samples, 0.01%)</title><rect x="1025.6" y="517" width="0.1" height="15.0" fill="rgb(250,215,1)" rx="2" ry="2" />
<text  x="1028.55" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt;::_M_incr (9 samples, 0.01%)</title><rect x="897.4" y="597" width="0.1" height="15.0" fill="rgb(240,34,10)" rx="2" ry="2" />
<text  x="900.39" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (189 samples, 0.22%)</title><rect x="819.2" y="581" width="2.6" height="15.0" fill="rgb(250,113,31)" rx="2" ry="2" />
<text  x="822.23" y="591.5" ></text>
</g>
<g >
<title>__memp_fget (142 samples, 0.16%)</title><rect x="160.2" y="485" width="1.9" height="15.0" fill="rgb(220,14,21)" rx="2" ry="2" />
<text  x="163.23" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (10 samples, 0.01%)</title><rect x="957.3" y="565" width="0.2" height="15.0" fill="rgb(220,135,9)" rx="2" ry="2" />
<text  x="960.33" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (26 samples, 0.03%)</title><rect x="83.5" y="373" width="0.3" height="15.0" fill="rgb(213,129,8)" rx="2" ry="2" />
<text  x="86.47" y="383.5" ></text>
</g>
<g >
<title>__bam_search (675 samples, 0.77%)</title><rect x="90.8" y="421" width="9.1" height="15.0" fill="rgb(217,128,44)" rx="2" ry="2" />
<text  x="93.79" y="431.5" ></text>
</g>
<g >
<title>__lock_get (9 samples, 0.01%)</title><rect x="103.6" y="373" width="0.1" height="15.0" fill="rgb(254,171,39)" rx="2" ry="2" />
<text  x="106.57" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (12 samples, 0.01%)</title><rect x="911.1" y="533" width="0.1" height="15.0" fill="rgb(233,94,51)" rx="2" ry="2" />
<text  x="914.07" y="543.5" ></text>
</g>
<g >
<title>__bam_vrfy_structure (20 samples, 0.02%)</title><rect x="1144.6" y="597" width="0.2" height="15.0" fill="rgb(224,111,54)" rx="2" ry="2" />
<text  x="1147.57" y="607.5" ></text>
</g>
<g >
<title>QuadRound (114 samples, 0.13%)</title><rect x="1123.8" y="565" width="1.5" height="15.0" fill="rgb(231,224,2)" rx="2" ry="2" />
<text  x="1126.78" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (68 samples, 0.08%)</title><rect x="590.9" y="565" width="1.0" height="15.0" fill="rgb(232,57,15)" rx="2" ry="2" />
<text  x="593.94" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::equal_range (73 samples, 0.08%)</title><rect x="53.2" y="661" width="1.0" height="15.0" fill="rgb(226,139,8)" rx="2" ry="2" />
<text  x="56.20" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned char&gt;::allocator (9 samples, 0.01%)</title><rect x="814.9" y="405" width="0.2" height="15.0" fill="rgb(209,205,34)" rx="2" ry="2" />
<text  x="817.94" y="415.5" ></text>
</g>
<g >
<title>CPubKey::Unserialize&lt;CDataStream&gt; (423 samples, 0.48%)</title><rect x="404.1" y="645" width="5.7" height="15.0" fill="rgb(250,150,36)" rx="2" ry="2" />
<text  x="407.08" y="655.5" ></text>
</g>
<g >
<title>CHashWriter::write (11 samples, 0.01%)</title><rect x="540.3" y="293" width="0.2" height="15.0" fill="rgb(228,44,26)" rx="2" ry="2" />
<text  x="543.33" y="303.5" ></text>
</g>
<g >
<title>CScript::clear (51 samples, 0.06%)</title><rect x="808.0" y="469" width="0.7" height="15.0" fill="rgb(245,92,9)" rx="2" ry="2" />
<text  x="811.05" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (26 samples, 0.03%)</title><rect x="597.2" y="533" width="0.3" height="15.0" fill="rgb(250,181,11)" rx="2" ry="2" />
<text  x="600.18" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (9 samples, 0.01%)</title><rect x="1026.2" y="485" width="0.1" height="15.0" fill="rgb(207,156,34)" rx="2" ry="2" />
<text  x="1029.18" y="495.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt;*&gt;::pointer_to (15 samples, 0.02%)</title><rect x="657.9" y="453" width="0.2" height="15.0" fill="rgb(208,200,44)" rx="2" ry="2" />
<text  x="660.93" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="939.3" y="533" width="0.1" height="15.0" fill="rgb(238,128,28)" rx="2" ry="2" />
<text  x="942.26" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt;, true&gt;::_S_get (15 samples, 0.02%)</title><rect x="928.0" y="533" width="0.2" height="15.0" fill="rgb(242,65,15)" rx="2" ry="2" />
<text  x="930.97" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt;::construct&lt;std::pair&lt;CKeyID const, CKey&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,740 samples, 1.99%)</title><rect x="845.2" y="565" width="23.5" height="15.0" fill="rgb(215,106,53)" rx="2" ry="2" />
<text  x="848.24" y="575.5" >_..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, char*&gt;, unsigned long&amp;, char*&amp;&gt; (14 samples, 0.02%)</title><rect x="1079.5" y="485" width="0.1" height="15.0" fill="rgb(220,106,21)" rx="2" ry="2" />
<text  x="1082.46" y="495.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (17 samples, 0.02%)</title><rect x="1106.6" y="357" width="0.2" height="15.0" fill="rgb(221,94,33)" rx="2" ry="2" />
<text  x="1109.60" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (320 samples, 0.37%)</title><rect x="900.8" y="581" width="4.3" height="15.0" fill="rgb(222,77,46)" rx="2" ry="2" />
<text  x="903.79" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (21 samples, 0.02%)</title><rect x="1019.8" y="645" width="0.3" height="15.0" fill="rgb(236,95,52)" rx="2" ry="2" />
<text  x="1022.78" y="655.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="513.4" y="293" width="0.2" height="15.0" fill="rgb(228,194,52)" rx="2" ry="2" />
<text  x="516.44" y="303.5" ></text>
</g>
<g >
<title>__env_refresh (11 samples, 0.01%)</title><rect x="180.8" y="437" width="0.1" height="15.0" fill="rgb(254,111,53)" rx="2" ry="2" />
<text  x="183.78" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_max_size (57 samples, 0.07%)</title><rect x="512.8" y="309" width="0.8" height="15.0" fill="rgb(223,3,50)" rx="2" ry="2" />
<text  x="515.80" y="319.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (22 samples, 0.03%)</title><rect x="938.0" y="549" width="0.3" height="15.0" fill="rgb(227,33,12)" rx="2" ry="2" />
<text  x="940.97" y="559.5" ></text>
</g>
<g >
<title>__db_vrfy_inpitem (31 samples, 0.04%)</title><rect x="67.3" y="549" width="0.4" height="15.0" fill="rgb(224,178,8)" rx="2" ry="2" />
<text  x="70.29" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::max_size (17 samples, 0.02%)</title><rect x="633.5" y="597" width="0.3" height="15.0" fill="rgb(224,65,24)" rx="2" ry="2" />
<text  x="636.53" y="607.5" ></text>
</g>
<g >
<title>__db_refresh (129 samples, 0.15%)</title><rect x="57.8" y="581" width="1.7" height="15.0" fill="rgb(228,103,53)" rx="2" ry="2" />
<text  x="60.80" y="591.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (1,306 samples, 1.49%)</title><rect x="522.9" y="389" width="17.6" height="15.0" fill="rgb(230,130,24)" rx="2" ry="2" />
<text  x="525.89" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, secure_allocator&lt;unsigned char&gt; &gt; (194 samples, 0.22%)</title><rect x="664.8" y="629" width="2.7" height="15.0" fill="rgb(244,215,18)" rx="2" ry="2" />
<text  x="667.85" y="639.5" ></text>
</g>
<g >
<title>__bam_search (170 samples, 0.19%)</title><rect x="117.6" y="421" width="2.3" height="15.0" fill="rgb(210,15,12)" rx="2" ry="2" />
<text  x="120.62" y="431.5" ></text>
</g>
<g >
<title>CWallet::postInitProcess (206 samples, 0.24%)</title><rect x="55.0" y="693" width="2.8" height="15.0" fill="rgb(252,48,43)" rx="2" ry="2" />
<text  x="58.01" y="703.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, uint256&gt; (68 samples, 0.08%)</title><rect x="527.4" y="149" width="0.9" height="15.0" fill="rgb(243,34,4)" rx="2" ry="2" />
<text  x="530.38" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;CTxIn*, unsigned long, CTxIn&gt; (75 samples, 0.09%)</title><rect x="481.5" y="325" width="1.0" height="15.0" fill="rgb(228,223,14)" rx="2" ry="2" />
<text  x="484.45" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::max_size (9 samples, 0.01%)</title><rect x="866.9" y="453" width="0.1" height="15.0" fill="rgb(206,151,26)" rx="2" ry="2" />
<text  x="869.92" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (65 samples, 0.07%)</title><rect x="504.3" y="293" width="0.8" height="15.0" fill="rgb(215,9,31)" rx="2" ry="2" />
<text  x="507.25" y="303.5" ></text>
</g>
<g >
<title>uint256::uint256 (21 samples, 0.02%)</title><rect x="30.9" y="565" width="0.3" height="15.0" fill="rgb(237,202,3)" rx="2" ry="2" />
<text  x="33.94" y="575.5" ></text>
</g>
<g >
<title>__lock_get (77 samples, 0.09%)</title><rect x="83.2" y="405" width="1.1" height="15.0" fill="rgb(244,67,49)" rx="2" ry="2" />
<text  x="86.24" y="415.5" ></text>
</g>
<g >
<title>CDataStream::read (40 samples, 0.05%)</title><rect x="497.5" y="293" width="0.5" height="15.0" fill="rgb(251,114,44)" rx="2" ry="2" />
<text  x="500.46" y="303.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (12 samples, 0.01%)</title><rect x="110.4" y="389" width="0.1" height="15.0" fill="rgb(228,174,44)" rx="2" ry="2" />
<text  x="113.37" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (9 samples, 0.01%)</title><rect x="26.7" y="741" width="0.1" height="15.0" fill="rgb(217,69,22)" rx="2" ry="2" />
<text  x="29.72" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (16 samples, 0.02%)</title><rect x="558.6" y="245" width="0.2" height="15.0" fill="rgb(234,7,35)" rx="2" ry="2" />
<text  x="561.57" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="879.9" y="581" width="0.2" height="15.0" fill="rgb(229,48,36)" rx="2" ry="2" />
<text  x="882.91" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_root (8 samples, 0.01%)</title><rect x="999.4" y="501" width="0.1" height="15.0" fill="rgb(208,43,14)" rx="2" ry="2" />
<text  x="1002.38" y="511.5" ></text>
</g>
<g >
<title>std::_List_node&lt;LockedPool::LockedPageArena&gt;::_M_valptr (23 samples, 0.03%)</title><rect x="862.7" y="389" width="0.3" height="15.0" fill="rgb(230,52,17)" rx="2" ry="2" />
<text  x="865.72" y="399.5" ></text>
</g>
<g >
<title>CScriptWitness::CScriptWitness (27 samples, 0.03%)</title><rect x="544.4" y="293" width="0.4" height="15.0" fill="rgb(224,184,46)" rx="2" ry="2" />
<text  x="547.41" y="303.5" ></text>
</g>
<g >
<title>CHash256::Write (21 samples, 0.02%)</title><rect x="553.0" y="85" width="0.3" height="15.0" fill="rgb(223,227,22)" rx="2" ry="2" />
<text  x="555.97" y="95.5" ></text>
</g>
<g >
<title>__lock_get (21 samples, 0.02%)</title><rect x="119.0" y="389" width="0.3" height="15.0" fill="rgb(250,177,54)" rx="2" ry="2" />
<text  x="121.97" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*, unsigned char&gt; (76 samples, 0.09%)</title><rect x="1093.3" y="629" width="1.0" height="15.0" fill="rgb(225,109,11)" rx="2" ry="2" />
<text  x="1096.25" y="639.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (4,412 samples, 5.04%)</title><rect x="78.0" y="533" width="59.5" height="15.0" fill="rgb(251,202,41)" rx="2" ry="2" />
<text  x="81.03" y="543.5" >__bam_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (106 samples, 0.12%)</title><rect x="1084.7" y="533" width="1.4" height="15.0" fill="rgb(228,103,34)" rx="2" ry="2" />
<text  x="1087.68" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::_Vector_impl (10 samples, 0.01%)</title><rect x="563.3" y="309" width="0.2" height="15.0" fill="rgb(235,50,16)" rx="2" ry="2" />
<text  x="566.32" y="319.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.01%)</title><rect x="815.5" y="373" width="0.1" height="15.0" fill="rgb(218,116,47)" rx="2" ry="2" />
<text  x="818.48" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (9 samples, 0.01%)</title><rect x="932.3" y="629" width="0.1" height="15.0" fill="rgb(218,64,46)" rx="2" ry="2" />
<text  x="935.27" y="639.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="484.2" y="293" width="0.1" height="15.0" fill="rgb(251,181,35)" rx="2" ry="2" />
<text  x="487.17" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (12 samples, 0.01%)</title><rect x="949.4" y="565" width="0.2" height="15.0" fill="rgb(247,76,37)" rx="2" ry="2" />
<text  x="952.42" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="656.0" y="485" width="0.2" height="15.0" fill="rgb(234,195,23)" rx="2" ry="2" />
<text  x="659.05" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (295 samples, 0.34%)</title><rect x="567.8" y="581" width="3.9" height="15.0" fill="rgb(251,4,18)" rx="2" ry="2" />
<text  x="570.77" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;BerkeleyEnvironment&gt;::~shared_ptr (11 samples, 0.01%)</title><rect x="180.8" y="629" width="0.1" height="15.0" fill="rgb(254,142,16)" rx="2" ry="2" />
<text  x="183.78" y="639.5" ></text>
</g>
<g >
<title>ShiftMessageC (16 samples, 0.02%)</title><rect x="1108.7" y="357" width="0.2" height="15.0" fill="rgb(246,140,18)" rx="2" ry="2" />
<text  x="1111.71" y="367.5" ></text>
</g>
<g >
<title>CWalletTx::~CWalletTx (8 samples, 0.01%)</title><rect x="22.4" y="741" width="0.1" height="15.0" fill="rgb(208,150,5)" rx="2" ry="2" />
<text  x="25.44" y="751.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned char*&gt; (10 samples, 0.01%)</title><rect x="504.8" y="245" width="0.2" height="15.0" fill="rgb(240,127,48)" rx="2" ry="2" />
<text  x="507.82" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (48 samples, 0.05%)</title><rect x="30.6" y="629" width="0.7" height="15.0" fill="rgb(240,157,52)" rx="2" ry="2" />
<text  x="33.61" y="639.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_lock (24 samples, 0.03%)</title><rect x="945.0" y="533" width="0.3" height="15.0" fill="rgb(238,210,17)" rx="2" ry="2" />
<text  x="947.99" y="543.5" ></text>
</g>
<g >
<title>secp256k1_context_create (34 samples, 0.04%)</title><rect x="1149.4" y="661" width="0.4" height="15.0" fill="rgb(254,204,10)" rx="2" ry="2" />
<text  x="1152.36" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_bucket_index (102 samples, 0.12%)</title><rect x="919.2" y="533" width="1.3" height="15.0" fill="rgb(220,153,52)" rx="2" ry="2" />
<text  x="922.16" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (25 samples, 0.03%)</title><rect x="1101.2" y="661" width="0.3" height="15.0" fill="rgb(243,208,40)" rx="2" ry="2" />
<text  x="1104.17" y="671.5" ></text>
</g>
<g >
<title>uint256::uint256 (8 samples, 0.01%)</title><rect x="1015.7" y="645" width="0.1" height="15.0" fill="rgb(209,82,3)" rx="2" ry="2" />
<text  x="1018.74" y="655.5" ></text>
</g>
<g >
<title>CChainState::CheckBlockIndex (147 samples, 0.17%)</title><rect x="53.0" y="693" width="2.0" height="15.0" fill="rgb(210,227,35)" rx="2" ry="2" />
<text  x="56.00" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::erase[abi:cxx11] (89 samples, 0.10%)</title><rect x="653.5" y="533" width="1.2" height="15.0" fill="rgb(239,58,15)" rx="2" ry="2" />
<text  x="656.49" y="543.5" ></text>
</g>
<g >
<title>BerkeleyEnvironment::Close (11 samples, 0.01%)</title><rect x="180.8" y="501" width="0.1" height="15.0" fill="rgb(210,94,52)" rx="2" ry="2" />
<text  x="183.78" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.01%)</title><rect x="883.7" y="533" width="0.1" height="15.0" fill="rgb(210,94,34)" rx="2" ry="2" />
<text  x="886.67" y="543.5" ></text>
</g>
<g >
<title>CDataStream::read (19 samples, 0.02%)</title><rect x="495.5" y="325" width="0.2" height="15.0" fill="rgb(254,105,13)" rx="2" ry="2" />
<text  x="498.45" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="615.3" y="469" width="0.2" height="15.0" fill="rgb(216,4,20)" rx="2" ry="2" />
<text  x="618.35" y="479.5" ></text>
</g>
<g >
<title>CScript::CScript (11 samples, 0.01%)</title><rect x="806.6" y="597" width="0.1" height="15.0" fill="rgb(212,195,19)" rx="2" ry="2" />
<text  x="809.56" y="607.5" ></text>
</g>
<g >
<title>CBlockHeader::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (40 samples, 0.05%)</title><rect x="46.7" y="565" width="0.5" height="15.0" fill="rgb(248,147,2)" rx="2" ry="2" />
<text  x="49.71" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (13 samples, 0.01%)</title><rect x="80.0" y="469" width="0.2" height="15.0" fill="rgb(229,27,7)" rx="2" ry="2" />
<text  x="83.00" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (31 samples, 0.04%)</title><rect x="677.5" y="485" width="0.4" height="15.0" fill="rgb(210,23,19)" rx="2" ry="2" />
<text  x="680.51" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_check_len (23 samples, 0.03%)</title><rect x="633.1" y="597" width="0.3" height="15.0" fill="rgb(250,101,40)" rx="2" ry="2" />
<text  x="636.14" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (52 samples, 0.06%)</title><rect x="657.4" y="469" width="0.7" height="15.0" fill="rgb(208,165,26)" rx="2" ry="2" />
<text  x="660.44" y="479.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (20 samples, 0.02%)</title><rect x="548.3" y="85" width="0.2" height="15.0" fill="rgb(224,182,29)" rx="2" ry="2" />
<text  x="551.25" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::pair&lt;uint256, CBlockIndex*&gt; &gt; (36 samples, 0.04%)</title><rect x="49.0" y="581" width="0.4" height="15.0" fill="rgb(212,54,23)" rx="2" ry="2" />
<text  x="51.96" y="591.5" ></text>
</g>
<g >
<title>CTransaction::ComputeWitnessHash (164 samples, 0.19%)</title><rect x="183.1" y="549" width="2.3" height="15.0" fill="rgb(214,13,38)" rx="2" ry="2" />
<text  x="186.14" y="559.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (46 samples, 0.05%)</title><rect x="893.5" y="645" width="0.6" height="15.0" fill="rgb(253,129,37)" rx="2" ry="2" />
<text  x="896.47" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::end (14 samples, 0.02%)</title><rect x="653.2" y="533" width="0.2" height="15.0" fill="rgb(252,3,52)" rx="2" ry="2" />
<text  x="656.20" y="543.5" ></text>
</g>
<g >
<title>__memp_fput (13 samples, 0.01%)</title><rect x="119.7" y="405" width="0.2" height="15.0" fill="rgb(231,63,24)" rx="2" ry="2" />
<text  x="122.74" y="415.5" ></text>
</g>
<g >
<title>CHash256::Write (11 samples, 0.01%)</title><rect x="548.0" y="85" width="0.2" height="15.0" fill="rgb(209,117,5)" rx="2" ry="2" />
<text  x="551.05" y="95.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.01%)</title><rect x="177.3" y="501" width="0.2" height="15.0" fill="rgb(225,185,36)" rx="2" ry="2" />
<text  x="180.33" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (55 samples, 0.06%)</title><rect x="840.4" y="565" width="0.8" height="15.0" fill="rgb(249,116,13)" rx="2" ry="2" />
<text  x="843.43" y="575.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.02%)</title><rect x="87.3" y="341" width="0.2" height="15.0" fill="rgb(214,177,54)" rx="2" ry="2" />
<text  x="90.27" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (31 samples, 0.04%)</title><rect x="561.7" y="309" width="0.4" height="15.0" fill="rgb(252,164,41)" rx="2" ry="2" />
<text  x="564.66" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, uint256 const, CWalletTx&gt; (10 samples, 0.01%)</title><rect x="900.3" y="501" width="0.1" height="15.0" fill="rgb(212,52,14)" rx="2" ry="2" />
<text  x="903.30" y="511.5" ></text>
</g>
<g >
<title>__mulvsi3 (11 samples, 0.01%)</title><rect x="890.7" y="581" width="0.2" height="15.0" fill="rgb(218,31,16)" rx="2" ry="2" />
<text  x="893.73" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (9 samples, 0.01%)</title><rect x="600.6" y="597" width="0.1" height="15.0" fill="rgb(246,66,15)" rx="2" ry="2" />
<text  x="603.59" y="607.5" ></text>
</g>
<g >
<title>util::ThreadGetInternalName[abi:cxx11] (11 samples, 0.01%)</title><rect x="734.1" y="597" width="0.1" height="15.0" fill="rgb(218,17,38)" rx="2" ry="2" />
<text  x="737.06" y="607.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CKeyMetadata&amp;&gt; (652 samples, 0.74%)</title><rect x="394.9" y="677" width="8.8" height="15.0" fill="rgb(217,150,0)" rx="2" ry="2" />
<text  x="397.87" y="687.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (102 samples, 0.12%)</title><rect x="552.6" y="197" width="1.3" height="15.0" fill="rgb(238,58,22)" rx="2" ry="2" />
<text  x="555.56" y="207.5" ></text>
</g>
<g >
<title>__memp_alloc (86 samples, 0.10%)</title><rect x="110.9" y="389" width="1.1" height="15.0" fill="rgb(207,101,28)" rx="2" ry="2" />
<text  x="113.87" y="399.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CSizeComputer, 28u, unsigned char&gt; (45 samples, 0.05%)</title><rect x="1034.4" y="357" width="0.6" height="15.0" fill="rgb(226,92,29)" rx="2" ry="2" />
<text  x="1037.39" y="367.5" ></text>
</g>
<g >
<title>SipHashUint256Extra (140 samples, 0.16%)</title><rect x="924.7" y="533" width="1.9" height="15.0" fill="rgb(234,199,11)" rx="2" ry="2" />
<text  x="927.69" y="543.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="813.7" y="421" width="0.1" height="15.0" fill="rgb(205,4,7)" rx="2" ry="2" />
<text  x="816.65" y="431.5" ></text>
</g>
<g >
<title>CTransaction::ComputeWitnessHash (1,735 samples, 1.98%)</title><rect x="540.5" y="437" width="23.4" height="15.0" fill="rgb(247,126,31)" rx="2" ry="2" />
<text  x="543.49" y="447.5" >C..</text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10 samples, 0.01%)</title><rect x="822.1" y="549" width="0.1" height="15.0" fill="rgb(206,124,36)" rx="2" ry="2" />
<text  x="825.06" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_insert_bucket_begin (17 samples, 0.02%)</title><rect x="921.6" y="549" width="0.2" height="15.0" fill="rgb(225,209,54)" rx="2" ry="2" />
<text  x="924.60" y="559.5" ></text>
</g>
<g >
<title>std::make_shared&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="725" width="8.0" height="15.0" fill="rgb(224,109,44)" rx="2" ry="2" />
<text  x="1138.80" y="735.5" ></text>
</g>
<g >
<title>CHash160::CHash160 (8 samples, 0.01%)</title><rect x="787.3" y="581" width="0.1" height="15.0" fill="rgb(234,175,26)" rx="2" ry="2" />
<text  x="790.28" y="591.5" ></text>
</g>
<g >
<title>__os_io (22 samples, 0.03%)</title><rect x="112.0" y="373" width="0.3" height="15.0" fill="rgb(226,137,0)" rx="2" ry="2" />
<text  x="115.04" y="383.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="341" width="4.2" height="15.0" fill="rgb(232,149,2)" rx="2" ry="2" />
<text  x="1138.80" y="351.5" ></text>
</g>
<g >
<title>CDataStream::read (52 samples, 0.06%)</title><rect x="447.4" y="533" width="0.8" height="15.0" fill="rgb(228,27,51)" rx="2" ry="2" />
<text  x="450.45" y="543.5" ></text>
</g>
<g >
<title>CChainState::RewindBlockIndex (18 samples, 0.02%)</title><rect x="33.3" y="693" width="0.2" height="15.0" fill="rgb(235,119,18)" rx="2" ry="2" />
<text  x="36.26" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::max_size (40 samples, 0.05%)</title><rect x="668.4" y="629" width="0.5" height="15.0" fill="rgb(221,100,53)" rx="2" ry="2" />
<text  x="671.39" y="639.5" ></text>
</g>
<g >
<title>Db::verify (20 samples, 0.02%)</title><rect x="1144.6" y="645" width="0.2" height="15.0" fill="rgb(206,221,16)" rx="2" ry="2" />
<text  x="1147.57" y="655.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (19 samples, 0.02%)</title><rect x="581.0" y="565" width="0.3" height="15.0" fill="rgb(205,18,25)" rx="2" ry="2" />
<text  x="584.01" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::resize (1,314 samples, 1.50%)</title><rect x="651.3" y="661" width="17.7" height="15.0" fill="rgb(230,135,20)" rx="2" ry="2" />
<text  x="654.33" y="671.5" ></text>
</g>
<g >
<title>CHash256::Write (21 samples, 0.02%)</title><rect x="46.8" y="469" width="0.3" height="15.0" fill="rgb(215,36,18)" rx="2" ry="2" />
<text  x="49.82" y="479.5" ></text>
</g>
<g >
<title>__db_lget (679 samples, 0.78%)</title><rect x="335.3" y="597" width="9.2" height="15.0" fill="rgb(239,135,9)" rx="2" ry="2" />
<text  x="338.34" y="607.5" ></text>
</g>
<g >
<title>[unknown] (41 samples, 0.05%)</title><rect x="178.9" y="485" width="0.5" height="15.0" fill="rgb(242,129,48)" rx="2" ry="2" />
<text  x="181.90" y="495.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (20 samples, 0.02%)</title><rect x="515.8" y="389" width="0.2" height="15.0" fill="rgb(248,38,49)" rx="2" ry="2" />
<text  x="518.77" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::end (32 samples, 0.04%)</title><rect x="1036.5" y="533" width="0.4" height="15.0" fill="rgb(216,66,41)" rx="2" ry="2" />
<text  x="1039.48" y="543.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (8 samples, 0.01%)</title><rect x="1059.3" y="565" width="0.1" height="15.0" fill="rgb(249,1,6)" rx="2" ry="2" />
<text  x="1062.28" y="575.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (47 samples, 0.05%)</title><rect x="557.3" y="261" width="0.6" height="15.0" fill="rgb(219,19,39)" rx="2" ry="2" />
<text  x="560.25" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (10 samples, 0.01%)</title><rect x="1154.6" y="757" width="0.1" height="15.0" fill="rgb(205,72,3)" rx="2" ry="2" />
<text  x="1157.56" y="767.5" ></text>
</g>
<g >
<title>std::move&lt;std::__shared_ptr&lt;CTransaction const,  (10 samples, 0.01%)</title><rect x="571.6" y="565" width="0.1" height="15.0" fill="rgb(244,115,23)" rx="2" ry="2" />
<text  x="574.61" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_S_key (10 samples, 0.01%)</title><rect x="1044.2" y="613" width="0.2" height="15.0" fill="rgb(207,122,5)" rx="2" ry="2" />
<text  x="1047.23" y="623.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (12 samples, 0.01%)</title><rect x="728.1" y="581" width="0.2" height="15.0" fill="rgb(251,227,30)" rx="2" ry="2" />
<text  x="731.12" y="591.5" ></text>
</g>
<g >
<title>CDataStream::size (45 samples, 0.05%)</title><rect x="42.1" y="629" width="0.6" height="15.0" fill="rgb(223,2,1)" rx="2" ry="2" />
<text  x="45.06" y="639.5" ></text>
</g>
<g >
<title>__bam_cmp (34 samples, 0.04%)</title><rect x="122.9" y="405" width="0.5" height="15.0" fill="rgb(241,167,35)" rx="2" ry="2" />
<text  x="125.90" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (54 samples, 0.06%)</title><rect x="43.9" y="501" width="0.7" height="15.0" fill="rgb(228,7,16)" rx="2" ry="2" />
<text  x="46.88" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (17 samples, 0.02%)</title><rect x="829.0" y="565" width="0.3" height="15.0" fill="rgb(225,161,0)" rx="2" ry="2" />
<text  x="832.03" y="575.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="503.6" y="245" width="0.1" height="15.0" fill="rgb(224,75,22)" rx="2" ry="2" />
<text  x="506.60" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (23 samples, 0.03%)</title><rect x="79.6" y="437" width="0.3" height="15.0" fill="rgb(233,182,1)" rx="2" ry="2" />
<text  x="82.55" y="447.5" ></text>
</g>
<g >
<title>ShiftMessageC (17 samples, 0.02%)</title><rect x="1139.5" y="149" width="0.2" height="15.0" fill="rgb(231,57,37)" rx="2" ry="2" />
<text  x="1142.50" y="159.5" ></text>
</g>
<g >
<title>CWalletTx::isConflicted (36 samples, 0.04%)</title><rect x="950.6" y="661" width="0.5" height="15.0" fill="rgb(205,135,37)" rx="2" ry="2" />
<text  x="953.65" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (65 samples, 0.07%)</title><rect x="678.1" y="501" width="0.8" height="15.0" fill="rgb(222,163,45)" rx="2" ry="2" />
<text  x="681.05" y="511.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (9 samples, 0.01%)</title><rect x="1166.2" y="757" width="0.1" height="15.0" fill="rgb(223,184,14)" rx="2" ry="2" />
<text  x="1169.16" y="767.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (45 samples, 0.05%)</title><rect x="104.9" y="421" width="0.6" height="15.0" fill="rgb(228,216,16)" rx="2" ry="2" />
<text  x="107.93" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (24 samples, 0.03%)</title><rect x="147.2" y="453" width="0.3" height="15.0" fill="rgb(249,183,51)" rx="2" ry="2" />
<text  x="150.20" y="463.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::secure_allocator (14 samples, 0.02%)</title><rect x="669.3" y="613" width="0.2" height="15.0" fill="rgb(220,96,36)" rx="2" ry="2" />
<text  x="672.27" y="623.5" ></text>
</g>
<g >
<title>KeyOriginInfo::clear (10 samples, 0.01%)</title><rect x="892.2" y="517" width="0.2" height="15.0" fill="rgb(205,165,6)" rx="2" ry="2" />
<text  x="895.24" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (75 samples, 0.09%)</title><rect x="499.5" y="293" width="1.0" height="15.0" fill="rgb(237,160,17)" rx="2" ry="2" />
<text  x="502.52" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::get (26 samples, 0.03%)</title><rect x="949.2" y="597" width="0.4" height="15.0" fill="rgb(233,75,28)" rx="2" ry="2" />
<text  x="952.23" y="607.5" ></text>
</g>
<g >
<title>CHashWriter::write (24 samples, 0.03%)</title><rect x="533.0" y="181" width="0.3" height="15.0" fill="rgb(220,212,49)" rx="2" ry="2" />
<text  x="536.00" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator* (9 samples, 0.01%)</title><rect x="1037.4" y="661" width="0.1" height="15.0" fill="rgb(222,202,30)" rx="2" ry="2" />
<text  x="1040.42" y="671.5" ></text>
</g>
<g >
<title>WriteCompactSize (15 samples, 0.02%)</title><rect x="1031.6" y="533" width="0.2" height="15.0" fill="rgb(235,177,0)" rx="2" ry="2" />
<text  x="1034.56" y="543.5" ></text>
</g>
<g >
<title>__dbc_get_pp (4,167 samples, 4.76%)</title><rect x="327.1" y="661" width="56.2" height="15.0" fill="rgb(215,92,46)" rx="2" ry="2" />
<text  x="330.11" y="671.5" >__dbc..</text>
</g>
<g >
<title>CWalletTx::IsCoinBase (109 samples, 0.12%)</title><rect x="35.7" y="645" width="1.5" height="15.0" fill="rgb(226,110,35)" rx="2" ry="2" />
<text  x="38.73" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_S_max_size (9 samples, 0.01%)</title><rect x="397.5" y="405" width="0.2" height="15.0" fill="rgb(216,118,46)" rx="2" ry="2" />
<text  x="400.53" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (328 samples, 0.37%)</title><rect x="180.9" y="645" width="4.5" height="15.0" fill="rgb(246,8,48)" rx="2" ry="2" />
<text  x="183.93" y="655.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*&gt; (47 samples, 0.05%)</title><rect x="1093.5" y="565" width="0.7" height="15.0" fill="rgb(253,86,36)" rx="2" ry="2" />
<text  x="1096.54" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (19 samples, 0.02%)</title><rect x="115.2" y="373" width="0.3" height="15.0" fill="rgb(214,114,30)" rx="2" ry="2" />
<text  x="118.21" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (81 samples, 0.09%)</title><rect x="681.4" y="517" width="1.1" height="15.0" fill="rgb(249,132,21)" rx="2" ry="2" />
<text  x="684.40" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (16 samples, 0.02%)</title><rect x="451.4" y="517" width="0.2" height="15.0" fill="rgb(220,182,39)" rx="2" ry="2" />
<text  x="454.37" y="527.5" ></text>
</g>
<g >
<title>CHashWriter::write (61 samples, 0.07%)</title><rect x="556.4" y="261" width="0.9" height="15.0" fill="rgb(209,64,22)" rx="2" ry="2" />
<text  x="559.43" y="271.5" ></text>
</g>
<g >
<title>__memp_fget (29 samples, 0.03%)</title><rect x="118.6" y="389" width="0.3" height="15.0" fill="rgb(224,118,53)" rx="2" ry="2" />
<text  x="121.55" y="399.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (222 samples, 0.25%)</title><rect x="475.9" y="213" width="3.0" height="15.0" fill="rgb(225,218,32)" rx="2" ry="2" />
<text  x="478.90" y="223.5" ></text>
</g>
<g >
<title>Hash&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="21.4" y="757" width="0.1" height="15.0" fill="rgb(221,105,24)" rx="2" ry="2" />
<text  x="24.36" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_valptr (12 samples, 0.01%)</title><rect x="661.7" y="485" width="0.2" height="15.0" fill="rgb(246,187,14)" rx="2" ry="2" />
<text  x="664.72" y="495.5" ></text>
</g>
<g >
<title>std::__distance&lt;char const*&gt; (17 samples, 0.02%)</title><rect x="319.3" y="597" width="0.2" height="15.0" fill="rgb(233,198,5)" rx="2" ry="2" />
<text  x="322.26" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (78 samples, 0.09%)</title><rect x="989.7" y="565" width="1.1" height="15.0" fill="rgb(232,95,23)" rx="2" ry="2" />
<text  x="992.74" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (23 samples, 0.03%)</title><rect x="411.4" y="469" width="0.3" height="15.0" fill="rgb(241,76,42)" rx="2" ry="2" />
<text  x="414.39" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (17 samples, 0.02%)</title><rect x="879.1" y="533" width="0.2" height="15.0" fill="rgb(237,188,34)" rx="2" ry="2" />
<text  x="882.10" y="543.5" ></text>
</g>
<g >
<title>CSHA256::Write (16 samples, 0.02%)</title><rect x="804.7" y="549" width="0.2" height="15.0" fill="rgb(243,152,33)" rx="2" ry="2" />
<text  x="807.70" y="559.5" ></text>
</g>
<g >
<title>__uint32_identity (9 samples, 0.01%)</title><rect x="764.1" y="533" width="0.1" height="15.0" fill="rgb(248,184,0)" rx="2" ry="2" />
<text  x="767.10" y="543.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (229 samples, 0.26%)</title><rect x="529.6" y="213" width="3.0" height="15.0" fill="rgb(223,188,25)" rx="2" ry="2" />
<text  x="532.56" y="223.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, bool&amp;&gt; (263 samples, 0.30%)</title><rect x="398.9" y="613" width="3.5" height="15.0" fill="rgb(249,226,6)" rx="2" ry="2" />
<text  x="401.90" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (10 samples, 0.01%)</title><rect x="126.4" y="405" width="0.1" height="15.0" fill="rgb(221,187,28)" rx="2" ry="2" />
<text  x="129.39" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, void&gt; (80 samples, 0.09%)</title><rect x="946.1" y="613" width="1.1" height="15.0" fill="rgb(230,113,7)" rx="2" ry="2" />
<text  x="949.12" y="623.5" ></text>
</g>
<g >
<title>__memp_fput (9 samples, 0.01%)</title><rect x="168.7" y="517" width="0.2" height="15.0" fill="rgb(253,123,8)" rx="2" ry="2" />
<text  x="171.74" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (13 samples, 0.01%)</title><rect x="1005.1" y="597" width="0.2" height="15.0" fill="rgb(253,206,32)" rx="2" ry="2" />
<text  x="1008.12" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt;, false, true&gt;::_Node_const_iterator (11 samples, 0.01%)</title><rect x="956.1" y="629" width="0.2" height="15.0" fill="rgb(206,161,36)" rx="2" ry="2" />
<text  x="959.11" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_Rb_tree_iterator (12 samples, 0.01%)</title><rect x="653.2" y="517" width="0.2" height="15.0" fill="rgb(249,2,41)" rx="2" ry="2" />
<text  x="656.23" y="527.5" ></text>
</g>
<g >
<title>CHash160::Finalize (1,541 samples, 1.76%)</title><rect x="744.6" y="597" width="20.8" height="15.0" fill="rgb(215,226,16)" rx="2" ry="2" />
<text  x="747.60" y="607.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (18 samples, 0.02%)</title><rect x="871.1" y="565" width="0.2" height="15.0" fill="rgb(208,0,22)" rx="2" ry="2" />
<text  x="874.07" y="575.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (13 samples, 0.01%)</title><rect x="554.7" y="277" width="0.1" height="15.0" fill="rgb(212,134,8)" rx="2" ry="2" />
<text  x="557.67" y="287.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (35 samples, 0.04%)</title><rect x="528.5" y="133" width="0.5" height="15.0" fill="rgb(227,108,24)" rx="2" ry="2" />
<text  x="531.51" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_max_size (12 samples, 0.01%)</title><rect x="1182.5" y="757" width="0.2" height="15.0" fill="rgb(247,168,51)" rx="2" ry="2" />
<text  x="1185.49" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::max_size (11 samples, 0.01%)</title><rect x="1183.0" y="757" width="0.1" height="15.0" fill="rgb(212,166,29)" rx="2" ry="2" />
<text  x="1185.98" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="1055.2" y="661" width="0.2" height="15.0" fill="rgb(250,179,7)" rx="2" ry="2" />
<text  x="1058.22" y="671.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock (16 samples, 0.02%)</title><rect x="735.2" y="613" width="0.2" height="15.0" fill="rgb(210,43,47)" rx="2" ry="2" />
<text  x="738.19" y="623.5" ></text>
</g>
<g >
<title>__dbc_iput (43 samples, 0.05%)</title><rect x="163.7" y="533" width="0.6" height="15.0" fill="rgb(225,38,15)" rx="2" ry="2" />
<text  x="166.70" y="543.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;int&amp;&gt; (25 samples, 0.03%)</title><rect x="444.5" y="629" width="0.3" height="15.0" fill="rgb(233,105,53)" rx="2" ry="2" />
<text  x="447.50" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_v (14 samples, 0.02%)</title><rect x="899.9" y="517" width="0.2" height="15.0" fill="rgb(215,77,53)" rx="2" ry="2" />
<text  x="902.91" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (25 samples, 0.03%)</title><rect x="44.3" y="453" width="0.3" height="15.0" fill="rgb(235,100,23)" rx="2" ry="2" />
<text  x="47.27" y="463.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (19 samples, 0.02%)</title><rect x="587.4" y="581" width="0.3" height="15.0" fill="rgb(221,190,16)" rx="2" ry="2" />
<text  x="590.44" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::iterator::iterator (9 samples, 0.01%)</title><rect x="810.6" y="421" width="0.1" height="15.0" fill="rgb(247,99,46)" rx="2" ry="2" />
<text  x="813.61" y="431.5" ></text>
</g>
<g >
<title>FillableSigningProvider::AddKeyPubKey (9,478 samples, 10.82%)</title><rect x="741.4" y="645" width="127.7" height="15.0" fill="rgb(208,30,19)" rx="2" ry="2" />
<text  x="744.36" y="655.5" >FillableSigningP..</text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (15 samples, 0.02%)</title><rect x="937.3" y="517" width="0.2" height="15.0" fill="rgb(211,137,28)" rx="2" ry="2" />
<text  x="940.32" y="527.5" ></text>
</g>
<g >
<title>__db_cursor_int (31 samples, 0.04%)</title><rect x="105.8" y="453" width="0.4" height="15.0" fill="rgb(230,200,0)" rx="2" ry="2" />
<text  x="108.83" y="463.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="145.9" y="309" width="0.2" height="15.0" fill="rgb(217,175,3)" rx="2" ry="2" />
<text  x="148.91" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*&gt; (13 samples, 0.01%)</title><rect x="514.8" y="341" width="0.1" height="15.0" fill="rgb(209,200,50)" rx="2" ry="2" />
<text  x="517.76" y="351.5" ></text>
</g>
<g >
<title>CWalletTx::Init (33 samples, 0.04%)</title><rect x="576.2" y="629" width="0.4" height="15.0" fill="rgb(221,224,30)" rx="2" ry="2" />
<text  x="579.16" y="639.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (12 samples, 0.01%)</title><rect x="548.6" y="85" width="0.1" height="15.0" fill="rgb(224,36,7)" rx="2" ry="2" />
<text  x="551.56" y="95.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (90 samples, 0.10%)</title><rect x="1053.4" y="645" width="1.3" height="15.0" fill="rgb(212,125,1)" rx="2" ry="2" />
<text  x="1056.45" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.01%)</title><rect x="606.2" y="629" width="0.1" height="15.0" fill="rgb(208,166,40)" rx="2" ry="2" />
<text  x="609.16" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::construct&lt;char, char const&amp;&gt; (34 samples, 0.04%)</title><rect x="40.7" y="549" width="0.5" height="15.0" fill="rgb(239,195,26)" rx="2" ry="2" />
<text  x="43.74" y="559.5" ></text>
</g>
<g >
<title>AppInit (591 samples, 0.67%)</title><rect x="30.3" y="741" width="7.9" height="15.0" fill="rgb(243,222,47)" rx="2" ry="2" />
<text  x="33.27" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_Node_allocator (8 samples, 0.01%)</title><rect x="455.3" y="533" width="0.1" height="15.0" fill="rgb(220,27,31)" rx="2" ry="2" />
<text  x="458.27" y="543.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (124 samples, 0.14%)</title><rect x="1118.8" y="645" width="1.7" height="15.0" fill="rgb(220,125,19)" rx="2" ry="2" />
<text  x="1121.83" y="655.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (13 samples, 0.01%)</title><rect x="540.3" y="309" width="0.2" height="15.0" fill="rgb(208,134,14)" rx="2" ry="2" />
<text  x="543.31" y="319.5" ></text>
</g>
<g >
<title>__memp_fget (35 samples, 0.04%)</title><rect x="166.4" y="469" width="0.5" height="15.0" fill="rgb(226,77,33)" rx="2" ry="2" />
<text  x="169.40" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;CTxOut*, CTxOut*, std::allocator&lt;CTxOut&gt; &gt; (31 samples, 0.04%)</title><rect x="492.2" y="325" width="0.4" height="15.0" fill="rgb(229,122,19)" rx="2" ry="2" />
<text  x="495.22" y="335.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, unsigned long&gt;, false, false&gt;, bool&gt; (24 samples, 0.03%)</title><rect x="663.2" y="501" width="0.4" height="15.0" fill="rgb(246,102,49)" rx="2" ry="2" />
<text  x="666.24" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (23 samples, 0.03%)</title><rect x="570.3" y="485" width="0.3" height="15.0" fill="rgb(213,145,19)" rx="2" ry="2" />
<text  x="573.30" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator-- (10 samples, 0.01%)</title><rect x="1051.9" y="597" width="0.2" height="15.0" fill="rgb(222,5,11)" rx="2" ry="2" />
<text  x="1054.94" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (18 samples, 0.02%)</title><rect x="125.1" y="389" width="0.3" height="15.0" fill="rgb(225,204,18)" rx="2" ry="2" />
<text  x="128.11" y="399.5" ></text>
</g>
<g >
<title>CHash160::Finalize (9 samples, 0.01%)</title><rect x="1127.4" y="677" width="0.2" height="15.0" fill="rgb(243,214,40)" rx="2" ry="2" />
<text  x="1130.43" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (101 samples, 0.12%)</title><rect x="919.2" y="517" width="1.3" height="15.0" fill="rgb(232,35,30)" rx="2" ry="2" />
<text  x="922.17" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;COutPoint const&amp;&gt; (8 samples, 0.01%)</title><rect x="1043.0" y="565" width="0.1" height="15.0" fill="rgb(212,10,38)" rx="2" ry="2" />
<text  x="1045.96" y="575.5" ></text>
</g>
<g >
<title>std::multimap&lt;long, CWalletTx*, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::insert&lt;std::pair&lt;long, CWalletTx*&gt; &gt; (1,326 samples, 1.51%)</title><rect x="964.1" y="661" width="17.9" height="15.0" fill="rgb(223,37,13)" rx="2" ry="2" />
<text  x="967.09" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size (14 samples, 0.02%)</title><rect x="633.6" y="581" width="0.2" height="15.0" fill="rgb(220,213,11)" rx="2" ry="2" />
<text  x="636.57" y="591.5" ></text>
</g>
<g >
<title>Dbt::get_data (28 samples, 0.03%)</title><rect x="191.0" y="661" width="0.4" height="15.0" fill="rgb(206,166,33)" rx="2" ry="2" />
<text  x="194.03" y="671.5" ></text>
</g>
<g >
<title>__db_cursor (28 samples, 0.03%)</title><rect x="121.5" y="469" width="0.4" height="15.0" fill="rgb(225,117,0)" rx="2" ry="2" />
<text  x="124.47" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::construct&lt;char, char const&amp;&gt; (26 samples, 0.03%)</title><rect x="38.9" y="581" width="0.4" height="15.0" fill="rgb(228,160,0)" rx="2" ry="2" />
<text  x="41.92" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (30 samples, 0.03%)</title><rect x="859.3" y="341" width="0.4" height="15.0" fill="rgb(225,223,54)" rx="2" ry="2" />
<text  x="862.25" y="351.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;unsigned char*&gt; (16 samples, 0.02%)</title><rect x="1098.8" y="549" width="0.2" height="15.0" fill="rgb(208,166,41)" rx="2" ry="2" />
<text  x="1101.81" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (17 samples, 0.02%)</title><rect x="145.8" y="421" width="0.3" height="15.0" fill="rgb(251,89,41)" rx="2" ry="2" />
<text  x="148.83" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CBlockIndex*, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt; &gt;::insert&lt;std::pair&lt;uint256, CBlockIndex*&gt; &gt; (38 samples, 0.04%)</title><rect x="48.9" y="597" width="0.5" height="15.0" fill="rgb(248,132,38)" rx="2" ry="2" />
<text  x="51.93" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char* const&amp;&gt;, std::tuple&lt;&gt; &gt; (59 samples, 0.07%)</title><rect x="1083.8" y="517" width="0.8" height="15.0" fill="rgb(247,129,54)" rx="2" ry="2" />
<text  x="1086.77" y="527.5" ></text>
</g>
<g >
<title>CSHA256::Write (284 samples, 0.32%)</title><rect x="1140.0" y="197" width="3.8" height="15.0" fill="rgb(239,35,28)" rx="2" ry="2" />
<text  x="1142.99" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (8 samples, 0.01%)</title><rect x="957.4" y="549" width="0.1" height="15.0" fill="rgb(215,107,8)" rx="2" ry="2" />
<text  x="960.36" y="559.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (15 samples, 0.02%)</title><rect x="532.3" y="101" width="0.3" height="15.0" fill="rgb(241,160,25)" rx="2" ry="2" />
<text  x="535.35" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="1097.3" y="629" width="0.1" height="15.0" fill="rgb(247,176,38)" rx="2" ry="2" />
<text  x="1100.26" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (78 samples, 0.09%)</title><rect x="989.7" y="581" width="1.1" height="15.0" fill="rgb(249,189,31)" rx="2" ry="2" />
<text  x="992.74" y="591.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;char, std::move_iterator&lt;char*&gt; &gt; (10 samples, 0.01%)</title><rect x="1166.3" y="757" width="0.2" height="15.0" fill="rgb(249,48,28)" rx="2" ry="2" />
<text  x="1169.35" y="767.5" ></text>
</g>
<g >
<title>__dbc_iput (278 samples, 0.32%)</title><rect x="74.2" y="533" width="3.8" height="15.0" fill="rgb(217,194,53)" rx="2" ry="2" />
<text  x="77.24" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::end (15 samples, 0.02%)</title><rect x="555.2" y="293" width="0.2" height="15.0" fill="rgb(217,117,30)" rx="2" ry="2" />
<text  x="558.23" y="303.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (13 samples, 0.01%)</title><rect x="95.0" y="389" width="0.1" height="15.0" fill="rgb(212,42,23)" rx="2" ry="2" />
<text  x="97.97" y="399.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="357" width="3.8" height="15.0" fill="rgb(206,37,18)" rx="2" ry="2" />
<text  x="1142.99" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (11 samples, 0.01%)</title><rect x="483.4" y="309" width="0.1" height="15.0" fill="rgb(211,34,26)" rx="2" ry="2" />
<text  x="486.36" y="319.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut&gt; (252 samples, 0.29%)</title><rect x="535.6" y="293" width="3.4" height="15.0" fill="rgb(239,91,48)" rx="2" ry="2" />
<text  x="538.56" y="303.5" ></text>
</g>
<g >
<title>__memp_fput (8 samples, 0.01%)</title><rect x="172.9" y="517" width="0.1" height="15.0" fill="rgb(217,43,15)" rx="2" ry="2" />
<text  x="175.86" y="527.5" ></text>
</g>
<g >
<title>__memp_fget (195 samples, 0.22%)</title><rect x="109.7" y="405" width="2.6" height="15.0" fill="rgb(209,176,50)" rx="2" ry="2" />
<text  x="112.71" y="415.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (391 samples, 0.45%)</title><rect x="1113.6" y="421" width="5.2" height="15.0" fill="rgb(238,223,25)" rx="2" ry="2" />
<text  x="1116.56" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_emplace_equal&lt;unsigned long&amp;, char*&amp;&gt; (122 samples, 0.14%)</title><rect x="674.1" y="533" width="1.7" height="15.0" fill="rgb(221,61,4)" rx="2" ry="2" />
<text  x="677.13" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::end (14 samples, 0.02%)</title><rect x="1095.7" y="629" width="0.1" height="15.0" fill="rgb(210,198,44)" rx="2" ry="2" />
<text  x="1098.65" y="639.5" ></text>
</g>
<g >
<title>std::_Construct&lt;uint256&gt; (44 samples, 0.05%)</title><rect x="31.6" y="581" width="0.6" height="15.0" fill="rgb(229,166,7)" rx="2" ry="2" />
<text  x="34.56" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (24 samples, 0.03%)</title><rect x="1020.3" y="629" width="0.3" height="15.0" fill="rgb(210,148,9)" rx="2" ry="2" />
<text  x="1023.29" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (11 samples, 0.01%)</title><rect x="97.8" y="325" width="0.2" height="15.0" fill="rgb(237,81,18)" rx="2" ry="2" />
<text  x="100.82" y="335.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (46 samples, 0.05%)</title><rect x="104.1" y="437" width="0.7" height="15.0" fill="rgb(246,31,27)" rx="2" ry="2" />
<text  x="107.14" y="447.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (8 samples, 0.01%)</title><rect x="537.1" y="101" width="0.1" height="15.0" fill="rgb(220,145,35)" rx="2" ry="2" />
<text  x="540.08" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_addr (17 samples, 0.02%)</title><rect x="877.2" y="469" width="0.2" height="15.0" fill="rgb(234,110,1)" rx="2" ry="2" />
<text  x="880.19" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (14 samples, 0.02%)</title><rect x="1049.8" y="661" width="0.2" height="15.0" fill="rgb(228,45,32)" rx="2" ry="2" />
<text  x="1052.81" y="671.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (15 samples, 0.02%)</title><rect x="515.5" y="373" width="0.2" height="15.0" fill="rgb(246,129,19)" rx="2" ry="2" />
<text  x="518.53" y="383.5" ></text>
</g>
<g >
<title>FillableSigningProvider::AddKeyPubKey (416 samples, 0.48%)</title><rect x="1121.8" y="693" width="5.6" height="15.0" fill="rgb(232,228,22)" rx="2" ry="2" />
<text  x="1124.82" y="703.5" ></text>
</g>
<g >
<title>LoadBlockIndex (56 samples, 0.06%)</title><rect x="32.2" y="709" width="0.7" height="15.0" fill="rgb(218,91,30)" rx="2" ry="2" />
<text  x="35.20" y="719.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (10 samples, 0.01%)</title><rect x="1020.8" y="629" width="0.2" height="15.0" fill="rgb(248,117,7)" rx="2" ry="2" />
<text  x="1023.85" y="639.5" ></text>
</g>
<g >
<title>__lock_get (23 samples, 0.03%)</title><rect x="171.0" y="469" width="0.3" height="15.0" fill="rgb(253,45,48)" rx="2" ry="2" />
<text  x="173.99" y="479.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (164 samples, 0.19%)</title><rect x="180.9" y="437" width="2.2" height="15.0" fill="rgb(235,204,14)" rx="2" ry="2" />
<text  x="183.93" y="447.5" ></text>
</g>
<g >
<title>__memp_bhfree (14 samples, 0.02%)</title><rect x="86.8" y="389" width="0.2" height="15.0" fill="rgb(240,26,36)" rx="2" ry="2" />
<text  x="89.83" y="399.5" ></text>
</g>
<g >
<title>__subvdi3 (11 samples, 0.01%)</title><rect x="201.3" y="613" width="0.1" height="15.0" fill="rgb(228,67,21)" rx="2" ry="2" />
<text  x="204.29" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::operator++ (15 samples, 0.02%)</title><rect x="560.1" y="293" width="0.2" height="15.0" fill="rgb(223,160,0)" rx="2" ry="2" />
<text  x="563.08" y="303.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.03%)</title><rect x="136.5" y="405" width="0.3" height="15.0" fill="rgb(205,198,40)" rx="2" ry="2" />
<text  x="139.46" y="415.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (82 samples, 0.09%)</title><rect x="552.8" y="133" width="1.1" height="15.0" fill="rgb(234,55,31)" rx="2" ry="2" />
<text  x="555.75" y="143.5" ></text>
</g>
<g >
<title>main (39 samples, 0.04%)</title><rect x="1149.3" y="725" width="0.6" height="15.0" fill="rgb(224,141,44)" rx="2" ry="2" />
<text  x="1152.34" y="735.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (18 samples, 0.02%)</title><rect x="540.2" y="325" width="0.3" height="15.0" fill="rgb(222,183,20)" rx="2" ry="2" />
<text  x="543.25" y="335.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (284 samples, 0.32%)</title><rect x="1140.0" y="181" width="3.8" height="15.0" fill="rgb(221,151,25)" rx="2" ry="2" />
<text  x="1142.99" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (87 samples, 0.10%)</title><rect x="388.6" y="597" width="1.2" height="15.0" fill="rgb(241,89,14)" rx="2" ry="2" />
<text  x="391.60" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1,357 samples, 1.55%)</title><rect x="445.0" y="613" width="18.3" height="15.0" fill="rgb(209,66,33)" rx="2" ry="2" />
<text  x="447.97" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_range_initialize&lt;char const*&gt; (133 samples, 0.15%)</title><rect x="39.8" y="613" width="1.8" height="15.0" fill="rgb(218,220,51)" rx="2" ry="2" />
<text  x="42.85" y="623.5" ></text>
</g>
<g >
<title>__bam_defcmp (14 samples, 0.02%)</title><rect x="118.3" y="389" width="0.2" height="15.0" fill="rgb(205,1,8)" rx="2" ry="2" />
<text  x="121.29" y="399.5" ></text>
</g>
<g >
<title>__lock_get_internal (361 samples, 0.41%)</title><rect x="337.1" y="565" width="4.9" height="15.0" fill="rgb(240,74,27)" rx="2" ry="2" />
<text  x="340.13" y="575.5" ></text>
</g>
<g >
<title>CKeyID::CKeyID (9 samples, 0.01%)</title><rect x="892.0" y="533" width="0.2" height="15.0" fill="rgb(245,122,20)" rx="2" ry="2" />
<text  x="895.04" y="543.5" ></text>
</g>
<g >
<title>QuadRound (90 samples, 0.10%)</title><rect x="1122.1" y="581" width="1.2" height="15.0" fill="rgb(220,160,32)" rx="2" ry="2" />
<text  x="1125.09" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (22 samples, 0.03%)</title><rect x="570.3" y="469" width="0.3" height="15.0" fill="rgb(208,181,36)" rx="2" ry="2" />
<text  x="573.31" y="479.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, bool&amp;&gt; (260 samples, 0.30%)</title><rect x="398.9" y="597" width="3.5" height="15.0" fill="rgb(231,113,20)" rx="2" ry="2" />
<text  x="401.94" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_insert_node (29 samples, 0.03%)</title><rect x="850.0" y="357" width="0.4" height="15.0" fill="rgb(209,191,7)" rx="2" ry="2" />
<text  x="853.00" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_hint_unique_pos (13 samples, 0.01%)</title><rect x="1156.6" y="757" width="0.2" height="15.0" fill="rgb(216,29,25)" rx="2" ry="2" />
<text  x="1159.65" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_nothrow_relocate (9 samples, 0.01%)</title><rect x="505.2" y="277" width="0.2" height="15.0" fill="rgb(241,82,46)" rx="2" ry="2" />
<text  x="508.24" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt;::_Hash_node (10 samples, 0.01%)</title><rect x="855.0" y="325" width="0.1" height="15.0" fill="rgb(212,194,13)" rx="2" ry="2" />
<text  x="857.96" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_range_insert&lt;char const*&gt; (12 samples, 0.01%)</title><rect x="1178.7" y="757" width="0.2" height="15.0" fill="rgb(250,116,5)" rx="2" ry="2" />
<text  x="1181.71" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, char*&gt;, unsigned long const&amp;, char*&amp;&gt; (22 samples, 0.03%)</title><rect x="848.9" y="325" width="0.3" height="15.0" fill="rgb(221,201,7)" rx="2" ry="2" />
<text  x="851.90" y="335.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::GetUint64 (50 samples, 0.06%)</title><rect x="904.3" y="533" width="0.7" height="15.0" fill="rgb(233,155,52)" rx="2" ry="2" />
<text  x="907.29" y="543.5" ></text>
</g>
<g >
<title>Arena::free (728 samples, 0.83%)</title><rect x="673.5" y="565" width="9.9" height="15.0" fill="rgb(246,82,0)" rx="2" ry="2" />
<text  x="676.54" y="575.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, COutPoint&gt; (183 samples, 0.21%)</title><rect x="526.9" y="229" width="2.5" height="15.0" fill="rgb(206,79,6)" rx="2" ry="2" />
<text  x="529.89" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (12 samples, 0.01%)</title><rect x="651.0" y="613" width="0.2" height="15.0" fill="rgb(231,43,42)" rx="2" ry="2" />
<text  x="653.99" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (26 samples, 0.03%)</title><rect x="585.7" y="613" width="0.4" height="15.0" fill="rgb(254,182,22)" rx="2" ry="2" />
<text  x="588.74" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::operator= (134 samples, 0.15%)</title><rect x="883.1" y="629" width="1.8" height="15.0" fill="rgb(236,180,32)" rx="2" ry="2" />
<text  x="886.12" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="121.7" y="437" width="0.2" height="15.0" fill="rgb(232,199,16)" rx="2" ry="2" />
<text  x="124.73" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_M_get_insert_equal_pos (22 samples, 0.03%)</title><rect x="54.3" y="645" width="0.3" height="15.0" fill="rgb(243,10,40)" rx="2" ry="2" />
<text  x="57.31" y="655.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned int const*, unsigned int*&gt; (12 samples, 0.01%)</title><rect x="884.0" y="517" width="0.2" height="15.0" fill="rgb(223,143,24)" rx="2" ry="2" />
<text  x="887.00" y="527.5" ></text>
</g>
<g >
<title>ChainActive (10 samples, 0.01%)</title><rect x="34.3" y="597" width="0.2" height="15.0" fill="rgb(215,143,23)" rx="2" ry="2" />
<text  x="37.32" y="607.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::erase[abi:cxx11] (48 samples, 0.05%)</title><rect x="612.3" y="517" width="0.6" height="15.0" fill="rgb(208,182,31)" rx="2" ry="2" />
<text  x="615.29" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_M_head (10 samples, 0.01%)</title><rect x="986.6" y="581" width="0.2" height="15.0" fill="rgb(252,223,19)" rx="2" ry="2" />
<text  x="989.63" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (17 samples, 0.02%)</title><rect x="808.3" y="421" width="0.3" height="15.0" fill="rgb(224,79,20)" rx="2" ry="2" />
<text  x="811.33" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (14 samples, 0.02%)</title><rect x="858.5" y="293" width="0.2" height="15.0" fill="rgb(233,19,19)" rx="2" ry="2" />
<text  x="861.49" y="303.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (21 samples, 0.02%)</title><rect x="320.6" y="597" width="0.2" height="15.0" fill="rgb(244,158,15)" rx="2" ry="2" />
<text  x="323.56" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (22 samples, 0.03%)</title><rect x="161.2" y="469" width="0.3" height="15.0" fill="rgb(231,169,48)" rx="2" ry="2" />
<text  x="164.19" y="479.5" ></text>
</g>
<g >
<title>__os_calloc (55 samples, 0.06%)</title><rect x="79.1" y="469" width="0.8" height="15.0" fill="rgb(251,149,30)" rx="2" ry="2" />
<text  x="82.12" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::_S_construct&lt;unsigned char&gt; (676 samples, 0.77%)</title><rect x="624.0" y="565" width="9.1" height="15.0" fill="rgb(219,177,54)" rx="2" ry="2" />
<text  x="627.03" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::max_size (9 samples, 0.01%)</title><rect x="493.9" y="293" width="0.1" height="15.0" fill="rgb(235,70,25)" rx="2" ry="2" />
<text  x="496.86" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocator (8 samples, 0.01%)</title><rect x="1001.4" y="485" width="0.1" height="15.0" fill="rgb(251,184,35)" rx="2" ry="2" />
<text  x="1004.37" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (8 samples, 0.01%)</title><rect x="857.7" y="293" width="0.1" height="15.0" fill="rgb(234,186,49)" rx="2" ry="2" />
<text  x="860.66" y="303.5" ></text>
</g>
<g >
<title>__lock_open (27 samples, 0.03%)</title><rect x="180.4" y="581" width="0.4" height="15.0" fill="rgb(208,112,37)" rx="2" ry="2" />
<text  x="183.42" y="591.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, 28u, unsigned char&gt; (101 samples, 0.12%)</title><rect x="487.1" y="181" width="1.3" height="15.0" fill="rgb(222,180,18)" rx="2" ry="2" />
<text  x="490.08" y="191.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (70 samples, 0.08%)</title><rect x="368.5" y="533" width="0.9" height="15.0" fill="rgb(214,13,43)" rx="2" ry="2" />
<text  x="371.51" y="543.5" ></text>
</g>
<g >
<title>__bam_search (206 samples, 0.24%)</title><rect x="113.6" y="421" width="2.8" height="15.0" fill="rgb(227,127,27)" rx="2" ry="2" />
<text  x="116.63" y="431.5" ></text>
</g>
<g >
<title>__memp_bhwrite (8 samples, 0.01%)</title><rect x="156.1" y="437" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="159.11" y="447.5" ></text>
</g>
<g >
<title>__db_cursor_int (158 samples, 0.18%)</title><rect x="78.7" y="501" width="2.1" height="15.0" fill="rgb(220,33,12)" rx="2" ry="2" />
<text  x="81.71" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, char*&amp;&amp;&gt;::_Tuple_impl (18 samples, 0.02%)</title><rect x="1085.7" y="469" width="0.3" height="15.0" fill="rgb(250,217,34)" rx="2" ry="2" />
<text  x="1088.73" y="479.5" ></text>
</g>
<g >
<title>CWallet::postInitProcess (350 samples, 0.40%)</title><rect x="33.5" y="677" width="4.7" height="15.0" fill="rgb(253,222,5)" rx="2" ry="2" />
<text  x="36.52" y="687.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, KeyOriginInfo&amp;&gt; (250 samples, 0.29%)</title><rect x="395.5" y="581" width="3.4" height="15.0" fill="rgb(226,1,15)" rx="2" ry="2" />
<text  x="398.49" y="591.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (69 samples, 0.08%)</title><rect x="405.7" y="565" width="1.0" height="15.0" fill="rgb(254,147,51)" rx="2" ry="2" />
<text  x="408.74" y="575.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="25.6" y="757" width="0.1" height="15.0" fill="rgb(240,156,28)" rx="2" ry="2" />
<text  x="28.63" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator* (14 samples, 0.02%)</title><rect x="1051.7" y="597" width="0.2" height="15.0" fill="rgb(219,218,44)" rx="2" ry="2" />
<text  x="1054.75" y="607.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (13 samples, 0.01%)</title><rect x="31.0" y="549" width="0.2" height="15.0" fill="rgb(252,205,42)" rx="2" ry="2" />
<text  x="34.05" y="559.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (15 samples, 0.02%)</title><rect x="863.4" y="405" width="0.2" height="15.0" fill="rgb(209,64,43)" rx="2" ry="2" />
<text  x="866.41" y="415.5" ></text>
</g>
<g >
<title>ShiftMessageB (10 samples, 0.01%)</title><rect x="1123.3" y="581" width="0.1" height="15.0" fill="rgb(247,111,29)" rx="2" ry="2" />
<text  x="1126.31" y="591.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;unsigned int&amp;&gt; (63 samples, 0.07%)</title><rect x="575.3" y="629" width="0.9" height="15.0" fill="rgb(238,124,4)" rx="2" ry="2" />
<text  x="578.31" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (103 samples, 0.12%)</title><rect x="381.4" y="597" width="1.4" height="15.0" fill="rgb(221,214,52)" rx="2" ry="2" />
<text  x="384.44" y="607.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (29 samples, 0.03%)</title><rect x="396.2" y="453" width="0.4" height="15.0" fill="rgb(232,150,37)" rx="2" ry="2" />
<text  x="399.16" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (9 samples, 0.01%)</title><rect x="575.9" y="565" width="0.1" height="15.0" fill="rgb(213,73,41)" rx="2" ry="2" />
<text  x="578.92" y="575.5" ></text>
</g>
<g >
<title>__bam_get_root (37 samples, 0.04%)</title><rect x="139.4" y="469" width="0.5" height="15.0" fill="rgb(232,66,11)" rx="2" ry="2" />
<text  x="142.37" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="633.8" y="613" width="0.1" height="15.0" fill="rgb(235,65,6)" rx="2" ry="2" />
<text  x="636.80" y="623.5" ></text>
</g>
<g >
<title>__lock_put (19 samples, 0.02%)</title><rect x="157.7" y="501" width="0.2" height="15.0" fill="rgb(222,39,32)" rx="2" ry="2" />
<text  x="160.66" y="511.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CKeyMetadata&amp;&gt; (647 samples, 0.74%)</title><rect x="394.9" y="661" width="8.8" height="15.0" fill="rgb(245,67,43)" rx="2" ry="2" />
<text  x="397.93" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_check_len (384 samples, 0.44%)</title><rect x="319.7" y="613" width="5.1" height="15.0" fill="rgb(249,187,8)" rx="2" ry="2" />
<text  x="322.67" y="623.5" ></text>
</g>
<g >
<title>CTxIn::~CTxIn (52 samples, 0.06%)</title><rect x="1025.7" y="549" width="0.7" height="15.0" fill="rgb(223,36,40)" rx="2" ry="2" />
<text  x="1028.69" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (15 samples, 0.02%)</title><rect x="446.8" y="549" width="0.2" height="15.0" fill="rgb(218,30,23)" rx="2" ry="2" />
<text  x="449.80" y="559.5" ></text>
</g>
<g >
<title>CWallet::LoadCScript (2,635 samples, 3.01%)</title><rect x="705.4" y="677" width="35.5" height="15.0" fill="rgb(226,90,52)" rx="2" ry="2" />
<text  x="708.36" y="687.5" >CWa..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;::base (13 samples, 0.01%)</title><rect x="742.8" y="549" width="0.2" height="15.0" fill="rgb(248,92,30)" rx="2" ry="2" />
<text  x="745.85" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_data_ptr&lt;unsigned char&gt; (8 samples, 0.01%)</title><rect x="670.8" y="645" width="0.1" height="15.0" fill="rgb(246,162,48)" rx="2" ry="2" />
<text  x="673.83" y="655.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (23 samples, 0.03%)</title><rect x="479.1" y="277" width="0.3" height="15.0" fill="rgb(252,51,48)" rx="2" ry="2" />
<text  x="482.06" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (106 samples, 0.12%)</title><rect x="634.1" y="613" width="1.5" height="15.0" fill="rgb(241,77,11)" rx="2" ry="2" />
<text  x="637.15" y="623.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction (21 samples, 0.02%)</title><rect x="17.5" y="757" width="0.3" height="15.0" fill="rgb(242,62,28)" rx="2" ry="2" />
<text  x="20.53" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_insert_dispatch&lt;char const*&gt; (8 samples, 0.01%)</title><rect x="1179.2" y="741" width="0.1" height="15.0" fill="rgb(247,188,38)" rx="2" ry="2" />
<text  x="1182.23" y="751.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (50 samples, 0.06%)</title><rect x="1098.3" y="581" width="0.7" height="15.0" fill="rgb(216,68,24)" rx="2" ry="2" />
<text  x="1101.35" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (10 samples, 0.01%)</title><rect x="655.5" y="533" width="0.1" height="15.0" fill="rgb(211,167,6)" rx="2" ry="2" />
<text  x="658.47" y="543.5" ></text>
</g>
<g >
<title>__mulvsi3 (15 samples, 0.02%)</title><rect x="843.3" y="549" width="0.2" height="15.0" fill="rgb(225,142,9)" rx="2" ry="2" />
<text  x="846.26" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;::__normal_iterator (9 samples, 0.01%)</title><rect x="955.4" y="597" width="0.1" height="15.0" fill="rgb(246,26,40)" rx="2" ry="2" />
<text  x="958.42" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTransaction&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="629" width="8.0" height="15.0" fill="rgb(252,114,5)" rx="2" ry="2" />
<text  x="1138.80" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (12 samples, 0.01%)</title><rect x="732.9" y="549" width="0.1" height="15.0" fill="rgb(210,36,44)" rx="2" ry="2" />
<text  x="735.86" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_free (17 samples, 0.02%)</title><rect x="389.0" y="581" width="0.3" height="15.0" fill="rgb(221,164,50)" rx="2" ry="2" />
<text  x="392.03" y="591.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (723 samples, 0.83%)</title><rect x="484.6" y="389" width="9.7" height="15.0" fill="rgb(230,55,39)" rx="2" ry="2" />
<text  x="487.58" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::~vector (13 samples, 0.01%)</title><rect x="1179.7" y="757" width="0.2" height="15.0" fill="rgb(210,106,29)" rx="2" ry="2" />
<text  x="1182.68" y="767.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (246 samples, 0.28%)</title><rect x="148.9" y="501" width="3.3" height="15.0" fill="rgb(236,60,30)" rx="2" ry="2" />
<text  x="151.87" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (121 samples, 0.14%)</title><rect x="899.2" y="581" width="1.6" height="15.0" fill="rgb(247,126,15)" rx="2" ry="2" />
<text  x="902.16" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (248 samples, 0.28%)</title><rect x="1096.9" y="645" width="3.3" height="15.0" fill="rgb(236,200,49)" rx="2" ry="2" />
<text  x="1099.89" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (11 samples, 0.01%)</title><rect x="1157.3" y="757" width="0.1" height="15.0" fill="rgb(244,35,31)" rx="2" ry="2" />
<text  x="1160.29" y="767.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction&lt;CDataStream&gt; (328 samples, 0.37%)</title><rect x="180.9" y="581" width="4.5" height="15.0" fill="rgb(206,182,28)" rx="2" ry="2" />
<text  x="183.93" y="591.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut&gt; (164 samples, 0.19%)</title><rect x="183.1" y="405" width="2.3" height="15.0" fill="rgb(248,67,36)" rx="2" ry="2" />
<text  x="186.14" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (49 samples, 0.06%)</title><rect x="1017.1" y="629" width="0.7" height="15.0" fill="rgb(245,143,44)" rx="2" ry="2" />
<text  x="1020.14" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::construct&lt;COutPoint, COutPoint const&amp;&gt; (16 samples, 0.02%)</title><rect x="1042.7" y="565" width="0.3" height="15.0" fill="rgb(241,99,44)" rx="2" ry="2" />
<text  x="1045.75" y="575.5" ></text>
</g>
<g >
<title>__db_get (273 samples, 0.31%)</title><rect x="112.7" y="485" width="3.7" height="15.0" fill="rgb(232,172,31)" rx="2" ry="2" />
<text  x="115.73" y="495.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="358.0" y="597" width="0.1" height="15.0" fill="rgb(225,165,17)" rx="2" ry="2" />
<text  x="360.98" y="607.5" ></text>
</g>
<g >
<title>CSizeComputer::operator&lt;&lt; &lt;int&gt; (43 samples, 0.05%)</title><rect x="1024.3" y="581" width="0.5" height="15.0" fill="rgb(207,105,42)" rx="2" ry="2" />
<text  x="1027.26" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char* const&amp;&gt; (9 samples, 0.01%)</title><rect x="1084.1" y="453" width="0.1" height="15.0" fill="rgb(217,45,7)" rx="2" ry="2" />
<text  x="1087.09" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID const&amp;&gt;, std::tuple&lt;&gt; &gt; (91 samples, 0.10%)</title><rect x="891.8" y="613" width="1.2" height="15.0" fill="rgb(206,125,52)" rx="2" ry="2" />
<text  x="894.76" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (15 samples, 0.02%)</title><rect x="682.1" y="469" width="0.2" height="15.0" fill="rgb(227,88,39)" rx="2" ry="2" />
<text  x="685.12" y="479.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (27 samples, 0.03%)</title><rect x="549.3" y="213" width="0.3" height="15.0" fill="rgb(213,17,18)" rx="2" ry="2" />
<text  x="552.26" y="223.5" ></text>
</g>
<g >
<title>__bam_search (313 samples, 0.36%)</title><rect x="158.3" y="501" width="4.2" height="15.0" fill="rgb(209,201,37)" rx="2" ry="2" />
<text  x="161.29" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (20 samples, 0.02%)</title><rect x="539.4" y="293" width="0.3" height="15.0" fill="rgb(254,23,50)" rx="2" ry="2" />
<text  x="542.44" y="303.5" ></text>
</g>
<g >
<title>__os_io (53 samples, 0.06%)</title><rect x="98.8" y="373" width="0.7" height="15.0" fill="rgb(207,100,12)" rx="2" ry="2" />
<text  x="101.82" y="383.5" ></text>
</g>
<g >
<title>ReadLE32 (39 samples, 0.04%)</title><rect x="724.1" y="565" width="0.6" height="15.0" fill="rgb(216,164,48)" rx="2" ry="2" />
<text  x="727.14" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (1,766 samples, 2.02%)</title><rect x="334.0" y="613" width="23.8" height="15.0" fill="rgb(244,175,42)" rx="2" ry="2" />
<text  x="336.95" y="623.5" >[..</text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (646 samples, 0.74%)</title><rect x="485.6" y="373" width="8.7" height="15.0" fill="rgb(241,44,22)" rx="2" ry="2" />
<text  x="488.61" y="383.5" ></text>
</g>
<g >
<title>CDataStream::read (15 samples, 0.02%)</title><rect x="487.6" y="133" width="0.2" height="15.0" fill="rgb(221,150,26)" rx="2" ry="2" />
<text  x="490.62" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (48 samples, 0.05%)</title><rect x="513.9" y="373" width="0.6" height="15.0" fill="rgb(205,48,9)" rx="2" ry="2" />
<text  x="516.86" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::allocate (52 samples, 0.06%)</title><rect x="662.0" y="485" width="0.7" height="15.0" fill="rgb(248,70,3)" rx="2" ry="2" />
<text  x="665.03" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::allocate (11 samples, 0.01%)</title><rect x="674.7" y="485" width="0.1" height="15.0" fill="rgb(220,177,21)" rx="2" ry="2" />
<text  x="677.66" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="728.0" y="581" width="0.1" height="15.0" fill="rgb(221,20,12)" rx="2" ry="2" />
<text  x="730.98" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::begin (89 samples, 0.10%)</title><rect x="324.8" y="645" width="1.2" height="15.0" fill="rgb(246,61,4)" rx="2" ry="2" />
<text  x="327.84" y="655.5" ></text>
</g>
<g >
<title>__os_id (46 samples, 0.05%)</title><rect x="380.8" y="581" width="0.6" height="15.0" fill="rgb(214,94,24)" rx="2" ry="2" />
<text  x="383.82" y="591.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (9 samples, 0.01%)</title><rect x="182.0" y="133" width="0.1" height="15.0" fill="rgb(220,14,22)" rx="2" ry="2" />
<text  x="184.97" y="143.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::operator= (315 samples, 0.36%)</title><rect x="567.6" y="597" width="4.2" height="15.0" fill="rgb(209,144,4)" rx="2" ry="2" />
<text  x="570.56" y="607.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="437" width="3.8" height="15.0" fill="rgb(233,210,35)" rx="2" ry="2" />
<text  x="1142.99" y="447.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (241 samples, 0.28%)</title><rect x="165.4" y="517" width="3.3" height="15.0" fill="rgb(231,1,32)" rx="2" ry="2" />
<text  x="168.42" y="527.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="147.9" y="501" width="0.1" height="15.0" fill="rgb(229,210,6)" rx="2" ry="2" />
<text  x="150.87" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_allocate (524 samples, 0.60%)</title><rect x="611.2" y="597" width="7.1" height="15.0" fill="rgb(210,117,7)" rx="2" ry="2" />
<text  x="614.24" y="607.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (14 samples, 0.02%)</title><rect x="1129.0" y="629" width="0.1" height="15.0" fill="rgb(241,64,10)" rx="2" ry="2" />
<text  x="1131.95" y="639.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (9 samples, 0.01%)</title><rect x="412.1" y="549" width="0.1" height="15.0" fill="rgb(236,97,34)" rx="2" ry="2" />
<text  x="415.06" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_insert_dispatch&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (243 samples, 0.28%)</title><rect x="1092.6" y="661" width="3.2" height="15.0" fill="rgb(235,57,31)" rx="2" ry="2" />
<text  x="1095.57" y="671.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (10 samples, 0.01%)</title><rect x="535.0" y="261" width="0.1" height="15.0" fill="rgb(209,193,6)" rx="2" ry="2" />
<text  x="538.00" y="271.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (63 samples, 0.07%)</title><rect x="497.1" y="325" width="0.9" height="15.0" fill="rgb(220,156,1)" rx="2" ry="2" />
<text  x="500.15" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (1,030 samples, 1.18%)</title><rect x="1105.0" y="597" width="13.8" height="15.0" fill="rgb(218,213,8)" rx="2" ry="2" />
<text  x="1107.95" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::max_size (9 samples, 0.01%)</title><rect x="966.7" y="565" width="0.1" height="15.0" fill="rgb(206,121,53)" rx="2" ry="2" />
<text  x="969.73" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*&gt; (9 samples, 0.01%)</title><rect x="1153.0" y="757" width="0.2" height="15.0" fill="rgb(225,81,31)" rx="2" ry="2" />
<text  x="1156.05" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (53 samples, 0.06%)</title><rect x="461.7" y="565" width="0.8" height="15.0" fill="rgb(220,197,24)" rx="2" ry="2" />
<text  x="464.75" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::emplace&lt;char*, unsigned long&amp;&gt; (323 samples, 0.37%)</title><rect x="659.3" y="549" width="4.3" height="15.0" fill="rgb(220,32,0)" rx="2" ry="2" />
<text  x="662.28" y="559.5" ></text>
</g>
<g >
<title>__db_lget (14 samples, 0.02%)</title><rect x="153.8" y="469" width="0.1" height="15.0" fill="rgb(223,177,37)" rx="2" ry="2" />
<text  x="156.75" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_M_head (33 samples, 0.04%)</title><rect x="982.8" y="581" width="0.4" height="15.0" fill="rgb(211,38,40)" rx="2" ry="2" />
<text  x="985.75" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_max_size (17 samples, 0.02%)</title><rect x="511.2" y="293" width="0.2" height="15.0" fill="rgb(211,100,5)" rx="2" ry="2" />
<text  x="514.15" y="303.5" ></text>
</g>
<g >
<title>CWalletTx::BindWallet (63 samples, 0.07%)</title><rect x="949.6" y="661" width="0.8" height="15.0" fill="rgb(218,78,22)" rx="2" ry="2" />
<text  x="952.59" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_head (14 samples, 0.02%)</title><rect x="949.0" y="549" width="0.2" height="15.0" fill="rgb(254,168,0)" rx="2" ry="2" />
<text  x="951.98" y="559.5" ></text>
</g>
<g >
<title>Dbt::set_flags (25 samples, 0.03%)</title><rect x="188.2" y="661" width="0.3" height="15.0" fill="rgb(213,93,40)" rx="2" ry="2" />
<text  x="191.21" y="671.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (11 samples, 0.01%)</title><rect x="735.0" y="533" width="0.1" height="15.0" fill="rgb(247,198,0)" rx="2" ry="2" />
<text  x="737.99" y="543.5" ></text>
</g>
<g >
<title>__dbc_iget (38 samples, 0.04%)</title><rect x="80.9" y="485" width="0.5" height="15.0" fill="rgb(207,13,53)" rx="2" ry="2" />
<text  x="83.86" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::allocate (11 samples, 0.01%)</title><rect x="849.4" y="309" width="0.1" height="15.0" fill="rgb(207,225,7)" rx="2" ry="2" />
<text  x="852.36" y="319.5" ></text>
</g>
<g >
<title>std::__addressof&lt;unsigned char&gt; (16 samples, 0.02%)</title><rect x="665.3" y="613" width="0.2" height="15.0" fill="rgb(209,9,23)" rx="2" ry="2" />
<text  x="668.25" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="178.5" y="517" width="0.1" height="15.0" fill="rgb(243,201,6)" rx="2" ry="2" />
<text  x="181.48" y="527.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (103 samples, 0.12%)</title><rect x="706.5" y="597" width="1.4" height="15.0" fill="rgb(254,136,8)" rx="2" ry="2" />
<text  x="709.52" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CScript&amp;&gt; (256 samples, 0.29%)</title><rect x="475.4" y="277" width="3.5" height="15.0" fill="rgb(240,143,47)" rx="2" ry="2" />
<text  x="478.44" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_begin (9 samples, 0.01%)</title><rect x="968.5" y="613" width="0.1" height="15.0" fill="rgb(254,70,1)" rx="2" ry="2" />
<text  x="971.52" y="623.5" ></text>
</g>
<g >
<title>BlockManager::LoadBlockIndex (122 samples, 0.14%)</title><rect x="47.8" y="629" width="1.6" height="15.0" fill="rgb(226,83,53)" rx="2" ry="2" />
<text  x="50.80" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (16 samples, 0.02%)</title><rect x="86.4" y="389" width="0.3" height="15.0" fill="rgb(218,59,34)" rx="2" ry="2" />
<text  x="89.44" y="399.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (8 samples, 0.01%)</title><rect x="810.8" y="437" width="0.1" height="15.0" fill="rgb(247,193,23)" rx="2" ry="2" />
<text  x="813.79" y="447.5" ></text>
</g>
<g >
<title>std::recursive_mutex::unlock (21 samples, 0.02%)</title><rect x="836.5" y="581" width="0.3" height="15.0" fill="rgb(205,63,39)" rx="2" ry="2" />
<text  x="839.55" y="591.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::GetUint64 (36 samples, 0.04%)</title><rect x="1014.2" y="581" width="0.5" height="15.0" fill="rgb(234,211,2)" rx="2" ry="2" />
<text  x="1017.23" y="591.5" ></text>
</g>
<g >
<title>__bam_get_root (28 samples, 0.03%)</title><rect x="75.2" y="469" width="0.4" height="15.0" fill="rgb(233,2,25)" rx="2" ry="2" />
<text  x="78.24" y="479.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.02%)</title><rect x="136.6" y="373" width="0.2" height="15.0" fill="rgb(235,146,53)" rx="2" ry="2" />
<text  x="139.57" y="383.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (1,450 samples, 1.66%)</title><rect x="744.8" y="565" width="19.5" height="15.0" fill="rgb(210,166,21)" rx="2" ry="2" />
<text  x="747.80" y="575.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.01%)</title><rect x="945.6" y="613" width="0.2" height="15.0" fill="rgb(205,136,3)" rx="2" ry="2" />
<text  x="948.62" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::end (9 samples, 0.01%)</title><rect x="1065.5" y="677" width="0.1" height="15.0" fill="rgb(229,80,16)" rx="2" ry="2" />
<text  x="1068.48" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (70 samples, 0.08%)</title><rect x="613.6" y="469" width="0.9" height="15.0" fill="rgb(226,180,40)" rx="2" ry="2" />
<text  x="616.57" y="479.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (43 samples, 0.05%)</title><rect x="467.9" y="389" width="0.5" height="15.0" fill="rgb(213,179,14)" rx="2" ry="2" />
<text  x="470.87" y="399.5" ></text>
</g>
<g >
<title>operator!= (16 samples, 0.02%)</title><rect x="1061.2" y="677" width="0.2" height="15.0" fill="rgb(240,45,15)" rx="2" ry="2" />
<text  x="1064.17" y="687.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (25 samples, 0.03%)</title><rect x="116.9" y="405" width="0.3" height="15.0" fill="rgb(237,128,34)" rx="2" ry="2" />
<text  x="119.85" y="415.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::UniqueLock (626 samples, 0.71%)</title><rect x="726.1" y="645" width="8.5" height="15.0" fill="rgb(230,100,30)" rx="2" ry="2" />
<text  x="729.12" y="655.5" ></text>
</g>
<g >
<title>arith_uint256::SetCompact (12 samples, 0.01%)</title><rect x="47.5" y="645" width="0.2" height="15.0" fill="rgb(226,221,0)" rx="2" ry="2" />
<text  x="50.54" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (21 samples, 0.02%)</title><rect x="462.6" y="597" width="0.3" height="15.0" fill="rgb(253,205,20)" rx="2" ry="2" />
<text  x="465.62" y="607.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ios (8 samples, 0.01%)</title><rect x="1145.9" y="629" width="0.1" height="15.0" fill="rgb(235,215,28)" rx="2" ry="2" />
<text  x="1148.85" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;CTransaction const*&amp;&gt; (8 samples, 0.01%)</title><rect x="571.5" y="533" width="0.1" height="15.0" fill="rgb(225,196,14)" rx="2" ry="2" />
<text  x="574.50" y="543.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (13 samples, 0.01%)</title><rect x="1141.5" y="149" width="0.2" height="15.0" fill="rgb(239,171,50)" rx="2" ry="2" />
<text  x="1144.53" y="159.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;, unsigned int*&gt; (46 samples, 0.05%)</title><rect x="883.9" y="581" width="0.6" height="15.0" fill="rgb(251,94,25)" rx="2" ry="2" />
<text  x="886.88" y="591.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::allocate (517 samples, 0.59%)</title><rect x="611.3" y="565" width="7.0" height="15.0" fill="rgb(237,90,2)" rx="2" ry="2" />
<text  x="614.33" y="575.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.03%)</title><rect x="997.5" y="565" width="0.3" height="15.0" fill="rgb(213,105,31)" rx="2" ry="2" />
<text  x="1000.45" y="575.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.01%)</title><rect x="1079.8" y="469" width="0.2" height="15.0" fill="rgb(248,8,28)" rx="2" ry="2" />
<text  x="1082.83" y="479.5" ></text>
</g>
<g >
<title>Dbt::get_size (13 samples, 0.01%)</title><rect x="189.9" y="661" width="0.1" height="15.0" fill="rgb(247,218,6)" rx="2" ry="2" />
<text  x="192.85" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char*&amp;&amp;, 0ul&gt; (16 samples, 0.02%)</title><rect x="1085.5" y="469" width="0.2" height="15.0" fill="rgb(225,45,44)" rx="2" ry="2" />
<text  x="1088.45" y="479.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (9 samples, 0.01%)</title><rect x="1127.4" y="693" width="0.2" height="15.0" fill="rgb(221,171,54)" rx="2" ry="2" />
<text  x="1130.43" y="703.5" ></text>
</g>
<g >
<title>__memp_fget (17 samples, 0.02%)</title><rect x="153.9" y="469" width="0.3" height="15.0" fill="rgb(242,33,45)" rx="2" ry="2" />
<text  x="156.94" y="479.5" ></text>
</g>
<g >
<title>__uint32_identity (9 samples, 0.01%)</title><rect x="576.0" y="581" width="0.2" height="15.0" fill="rgb(244,146,30)" rx="2" ry="2" />
<text  x="579.04" y="591.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="633.6" y="565" width="0.2" height="15.0" fill="rgb(235,8,48)" rx="2" ry="2" />
<text  x="636.65" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (96 samples, 0.11%)</title><rect x="455.0" y="549" width="1.3" height="15.0" fill="rgb(246,9,28)" rx="2" ry="2" />
<text  x="458.04" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (16 samples, 0.02%)</title><rect x="681.8" y="469" width="0.2" height="15.0" fill="rgb(238,108,17)" rx="2" ry="2" />
<text  x="684.77" y="479.5" ></text>
</g>
<g >
<title>CScriptWitness::IsNull (21 samples, 0.02%)</title><rect x="540.8" y="405" width="0.3" height="15.0" fill="rgb(211,99,50)" rx="2" ry="2" />
<text  x="543.84" y="415.5" ></text>
</g>
<g >
<title>CDataStream::read (25 samples, 0.03%)</title><rect x="468.0" y="357" width="0.3" height="15.0" fill="rgb(237,202,26)" rx="2" ry="2" />
<text  x="471.00" y="367.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (39 samples, 0.04%)</title><rect x="575.6" y="597" width="0.6" height="15.0" fill="rgb(222,205,19)" rx="2" ry="2" />
<text  x="578.64" y="607.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (176 samples, 0.20%)</title><rect x="70.6" y="501" width="2.4" height="15.0" fill="rgb(217,210,13)" rx="2" ry="2" />
<text  x="73.63" y="511.5" ></text>
</g>
<g >
<title>CPubKey::GetID (127 samples, 0.15%)</title><rect x="1121.8" y="677" width="1.7" height="15.0" fill="rgb(242,222,39)" rx="2" ry="2" />
<text  x="1124.82" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;CTransaction&gt;&gt; (352 samples, 0.40%)</title><rect x="1055.9" y="629" width="4.7" height="15.0" fill="rgb(231,79,10)" rx="2" ry="2" />
<text  x="1058.87" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (11 samples, 0.01%)</title><rect x="656.9" y="453" width="0.1" height="15.0" fill="rgb(251,199,49)" rx="2" ry="2" />
<text  x="659.88" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (236 samples, 0.27%)</title><rect x="1092.7" y="645" width="3.1" height="15.0" fill="rgb(221,178,44)" rx="2" ry="2" />
<text  x="1095.66" y="655.5" ></text>
</g>
<g >
<title>__db_vrfy_putpageinfo (352 samples, 0.40%)</title><rect x="73.3" y="565" width="4.7" height="15.0" fill="rgb(229,64,34)" rx="2" ry="2" />
<text  x="76.27" y="575.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;, unsigned int*&gt; (32 samples, 0.04%)</title><rect x="884.0" y="533" width="0.4" height="15.0" fill="rgb(223,112,22)" rx="2" ry="2" />
<text  x="886.97" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (11 samples, 0.01%)</title><rect x="867.9" y="469" width="0.2" height="15.0" fill="rgb(248,89,1)" rx="2" ry="2" />
<text  x="870.95" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_valptr (69 samples, 0.08%)</title><rect x="876.5" y="501" width="0.9" height="15.0" fill="rgb(207,207,23)" rx="2" ry="2" />
<text  x="879.49" y="511.5" ></text>
</g>
<g >
<title>QuadRound (31 samples, 0.04%)</title><rect x="46.1" y="533" width="0.4" height="15.0" fill="rgb(250,58,12)" rx="2" ry="2" />
<text  x="49.10" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_value (79 samples, 0.09%)</title><rect x="876.4" y="517" width="1.0" height="15.0" fill="rgb(237,211,34)" rx="2" ry="2" />
<text  x="879.36" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;CTxOut*, CTxOut&gt; (16 samples, 0.02%)</title><rect x="490.0" y="325" width="0.2" height="15.0" fill="rgb(230,215,31)" rx="2" ry="2" />
<text  x="493.02" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;CChainState, std::default_delete&lt;CChainState&gt; &gt;::operator bool (79 samples, 0.09%)</title><rect x="953.9" y="629" width="1.0" height="15.0" fill="rgb(226,24,19)" rx="2" ry="2" />
<text  x="956.87" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (51 samples, 0.06%)</title><rect x="1081.1" y="549" width="0.7" height="15.0" fill="rgb(235,137,27)" rx="2" ry="2" />
<text  x="1084.09" y="559.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (78 samples, 0.09%)</title><rect x="1034.0" y="421" width="1.0" height="15.0" fill="rgb(221,48,49)" rx="2" ry="2" />
<text  x="1036.97" y="431.5" ></text>
</g>
<g >
<title>__db_lget (19 samples, 0.02%)</title><rect x="100.9" y="389" width="0.2" height="15.0" fill="rgb(231,191,2)" rx="2" ry="2" />
<text  x="103.86" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::end (24 samples, 0.03%)</title><rect x="539.8" y="293" width="0.3" height="15.0" fill="rgb(246,182,9)" rx="2" ry="2" />
<text  x="542.82" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTransaction&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (328 samples, 0.37%)</title><rect x="180.9" y="613" width="4.5" height="15.0" fill="rgb(208,37,25)" rx="2" ry="2" />
<text  x="183.93" y="623.5" ></text>
</g>
<g >
<title>CHash160::Write (8 samples, 0.01%)</title><rect x="725.4" y="613" width="0.1" height="15.0" fill="rgb(240,17,7)" rx="2" ry="2" />
<text  x="728.38" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="1002.4" y="469" width="0.2" height="15.0" fill="rgb(232,175,14)" rx="2" ry="2" />
<text  x="1005.40" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_destroy_node (23 samples, 0.03%)</title><rect x="851.5" y="325" width="0.4" height="15.0" fill="rgb(205,161,0)" rx="2" ry="2" />
<text  x="854.55" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, true&gt; &gt;::construct&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID const&amp;&gt;, std::tuple&lt;&gt; &gt; (86 samples, 0.10%)</title><rect x="891.8" y="597" width="1.1" height="15.0" fill="rgb(241,167,9)" rx="2" ry="2" />
<text  x="894.79" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (63 samples, 0.07%)</title><rect x="1043.2" y="565" width="0.9" height="15.0" fill="rgb(252,115,30)" rx="2" ry="2" />
<text  x="1046.23" y="575.5" ></text>
</g>
<g >
<title>operator== (8 samples, 0.01%)</title><rect x="1150.6" y="757" width="0.1" height="15.0" fill="rgb(214,90,48)" rx="2" ry="2" />
<text  x="1153.58" y="767.5" ></text>
</g>
<g >
<title>std::_Base_bitset&lt;1ul&gt;::_Base_bitset (11 samples, 0.01%)</title><rect x="1016.7" y="629" width="0.1" height="15.0" fill="rgb(214,35,15)" rx="2" ry="2" />
<text  x="1019.68" y="639.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (106 samples, 0.12%)</title><rect x="547.7" y="165" width="1.5" height="15.0" fill="rgb(247,93,8)" rx="2" ry="2" />
<text  x="550.73" y="175.5" ></text>
</g>
<g >
<title>__os_calloc (90 samples, 0.10%)</title><rect x="67.7" y="549" width="1.2" height="15.0" fill="rgb(243,197,23)" rx="2" ry="2" />
<text  x="70.72" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="611.0" y="629" width="0.1" height="15.0" fill="rgb(240,152,20)" rx="2" ry="2" />
<text  x="613.96" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (8 samples, 0.01%)</title><rect x="1060.5" y="565" width="0.1" height="15.0" fill="rgb(231,182,14)" rx="2" ry="2" />
<text  x="1063.48" y="575.5" ></text>
</g>
<g >
<title>__libc_pread (31 samples, 0.04%)</title><rect x="136.4" y="453" width="0.4" height="15.0" fill="rgb(220,191,32)" rx="2" ry="2" />
<text  x="139.41" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Next (45 samples, 0.05%)</title><rect x="45.1" y="613" width="0.6" height="15.0" fill="rgb(236,192,20)" rx="2" ry="2" />
<text  x="48.06" y="623.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (24 samples, 0.03%)</title><rect x="836.5" y="613" width="0.3" height="15.0" fill="rgb(232,104,3)" rx="2" ry="2" />
<text  x="839.51" y="623.5" ></text>
</g>
<g >
<title>ShiftMessageC (22 samples, 0.03%)</title><rect x="1143.2" y="149" width="0.3" height="15.0" fill="rgb(234,110,9)" rx="2" ry="2" />
<text  x="1146.18" y="159.5" ></text>
</g>
<g >
<title>CTxIn::CTxIn (36 samples, 0.04%)</title><rect x="524.9" y="309" width="0.5" height="15.0" fill="rgb(207,119,29)" rx="2" ry="2" />
<text  x="527.92" y="319.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (1,490 samples, 1.70%)</title><rect x="744.7" y="581" width="20.1" height="15.0" fill="rgb(220,214,53)" rx="2" ry="2" />
<text  x="747.69" y="591.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (13 samples, 0.01%)</title><rect x="494.0" y="293" width="0.2" height="15.0" fill="rgb(207,45,50)" rx="2" ry="2" />
<text  x="496.98" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_use_relocate (17 samples, 0.02%)</title><rect x="505.1" y="293" width="0.3" height="15.0" fill="rgb(211,28,11)" rx="2" ry="2" />
<text  x="508.13" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (8 samples, 0.01%)</title><rect x="598.1" y="581" width="0.1" height="15.0" fill="rgb(244,23,52)" rx="2" ry="2" />
<text  x="601.06" y="591.5" ></text>
</g>
<g >
<title>operator&lt; (36 samples, 0.04%)</title><rect x="1041.1" y="597" width="0.4" height="15.0" fill="rgb(253,139,21)" rx="2" ry="2" />
<text  x="1044.06" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (16 samples, 0.02%)</title><rect x="708.0" y="613" width="0.2" height="15.0" fill="rgb(247,16,39)" rx="2" ry="2" />
<text  x="711.01" y="623.5" ></text>
</g>
<g >
<title>__dbc_cleanup (908 samples, 1.04%)</title><rect x="362.1" y="629" width="12.3" height="15.0" fill="rgb(227,92,31)" rx="2" ry="2" />
<text  x="365.12" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_allocate (961 samples, 1.10%)</title><rect x="651.7" y="629" width="13.0" height="15.0" fill="rgb(243,124,20)" rx="2" ry="2" />
<text  x="654.73" y="639.5" ></text>
</g>
<g >
<title>__memp_pgread (43 samples, 0.05%)</title><rect x="356.9" y="581" width="0.6" height="15.0" fill="rgb(234,145,4)" rx="2" ry="2" />
<text  x="359.93" y="591.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (20 samples, 0.02%)</title><rect x="881.5" y="549" width="0.3" height="15.0" fill="rgb(240,146,30)" rx="2" ry="2" />
<text  x="884.50" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (8 samples, 0.01%)</title><rect x="944.0" y="437" width="0.1" height="15.0" fill="rgb(223,186,40)" rx="2" ry="2" />
<text  x="947.02" y="447.5" ></text>
</g>
<g >
<title>WalletBatch::WalletBatch (20 samples, 0.02%)</title><rect x="1104.7" y="709" width="0.3" height="15.0" fill="rgb(232,166,19)" rx="2" ry="2" />
<text  x="1107.68" y="719.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getBlockHeight (11 samples, 0.01%)</title><rect x="1150.2" y="757" width="0.2" height="15.0" fill="rgb(252,141,35)" rx="2" ry="2" />
<text  x="1153.25" y="767.5" ></text>
</g>
<g >
<title>__os_io (17 samples, 0.02%)</title><rect x="145.8" y="405" width="0.3" height="15.0" fill="rgb(210,58,29)" rx="2" ry="2" />
<text  x="148.83" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (37 samples, 0.04%)</title><rect x="660.4" y="469" width="0.5" height="15.0" fill="rgb(211,91,28)" rx="2" ry="2" />
<text  x="663.37" y="479.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, CScript&gt; (101 samples, 0.12%)</title><rect x="1033.8" y="469" width="1.3" height="15.0" fill="rgb(229,132,25)" rx="2" ry="2" />
<text  x="1036.78" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (79 samples, 0.09%)</title><rect x="1009.2" y="597" width="1.1" height="15.0" fill="rgb(235,142,41)" rx="2" ry="2" />
<text  x="1012.24" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, CScript&gt; (141 samples, 0.16%)</title><rect x="1029.4" y="469" width="1.9" height="15.0" fill="rgb(249,61,45)" rx="2" ry="2" />
<text  x="1032.38" y="479.5" ></text>
</g>
<g >
<title>CTxOut::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (200 samples, 0.23%)</title><rect x="486.6" y="325" width="2.7" height="15.0" fill="rgb(211,20,37)" rx="2" ry="2" />
<text  x="489.57" y="335.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.02%)</title><rect x="145.8" y="373" width="0.3" height="15.0" fill="rgb(214,146,17)" rx="2" ry="2" />
<text  x="148.84" y="383.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (18 samples, 0.02%)</title><rect x="664.1" y="565" width="0.3" height="15.0" fill="rgb(238,225,31)" rx="2" ry="2" />
<text  x="667.12" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::construct&lt;char, char const&amp;&gt; (12 samples, 0.01%)</title><rect x="39.1" y="549" width="0.1" height="15.0" fill="rgb(221,131,6)" rx="2" ry="2" />
<text  x="42.07" y="559.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::UniqueLock (10 samples, 0.01%)</title><rect x="26.0" y="757" width="0.1" height="15.0" fill="rgb(238,31,36)" rx="2" ry="2" />
<text  x="29.00" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (16 samples, 0.02%)</title><rect x="457.7" y="533" width="0.2" height="15.0" fill="rgb(244,77,2)" rx="2" ry="2" />
<text  x="460.65" y="543.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (943 samples, 1.08%)</title><rect x="449.9" y="597" width="12.7" height="15.0" fill="rgb(226,220,37)" rx="2" ry="2" />
<text  x="452.92" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (35 samples, 0.04%)</title><rect x="844.6" y="533" width="0.5" height="15.0" fill="rgb(241,177,9)" rx="2" ry="2" />
<text  x="847.59" y="543.5" ></text>
</g>
<g >
<title>__gthread_once (11 samples, 0.01%)</title><rect x="618.1" y="517" width="0.2" height="15.0" fill="rgb(231,141,50)" rx="2" ry="2" />
<text  x="621.13" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (32 samples, 0.04%)</title><rect x="1082.5" y="533" width="0.4" height="15.0" fill="rgb(220,97,21)" rx="2" ry="2" />
<text  x="1085.46" y="543.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.01%)</title><rect x="883.6" y="549" width="0.2" height="15.0" fill="rgb(216,166,20)" rx="2" ry="2" />
<text  x="886.65" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_put_node (15 samples, 0.02%)</title><rect x="654.1" y="485" width="0.2" height="15.0" fill="rgb(216,26,12)" rx="2" ry="2" />
<text  x="657.08" y="495.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut&gt; (196 samples, 0.22%)</title><rect x="552.0" y="293" width="2.6" height="15.0" fill="rgb(215,20,21)" rx="2" ry="2" />
<text  x="555.00" y="303.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::iterator::iterator (18 samples, 0.02%)</title><rect x="809.3" y="437" width="0.2" height="15.0" fill="rgb(211,158,16)" rx="2" ry="2" />
<text  x="812.30" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (18 samples, 0.02%)</title><rect x="1165.9" y="757" width="0.2" height="15.0" fill="rgb(249,158,47)" rx="2" ry="2" />
<text  x="1168.86" y="767.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="119.6" y="389" width="0.1" height="15.0" fill="rgb(241,151,29)" rx="2" ry="2" />
<text  x="122.57" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, secure_allocator&lt;unsigned char&gt; &gt; (1,097 samples, 1.25%)</title><rect x="618.4" y="597" width="14.7" height="15.0" fill="rgb(244,32,36)" rx="2" ry="2" />
<text  x="621.35" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (14 samples, 0.02%)</title><rect x="1048.8" y="661" width="0.2" height="15.0" fill="rgb(225,147,54)" rx="2" ry="2" />
<text  x="1051.81" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="555.0" y="293" width="0.2" height="15.0" fill="rgb(246,131,40)" rx="2" ry="2" />
<text  x="557.99" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::max_size (27 samples, 0.03%)</title><rect x="867.3" y="469" width="0.4" height="15.0" fill="rgb(226,16,5)" rx="2" ry="2" />
<text  x="870.34" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="476.7" y="149" width="0.1" height="15.0" fill="rgb(220,79,5)" rx="2" ry="2" />
<text  x="479.69" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (16 samples, 0.02%)</title><rect x="675.3" y="501" width="0.2" height="15.0" fill="rgb(237,102,48)" rx="2" ry="2" />
<text  x="678.28" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (17 samples, 0.02%)</title><rect x="203.3" y="533" width="0.3" height="15.0" fill="rgb(236,22,4)" rx="2" ry="2" />
<text  x="206.34" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (12 samples, 0.01%)</title><rect x="458.1" y="517" width="0.2" height="15.0" fill="rgb(225,161,0)" rx="2" ry="2" />
<text  x="461.15" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (8 samples, 0.01%)</title><rect x="1012.5" y="629" width="0.1" height="15.0" fill="rgb(225,1,35)" rx="2" ry="2" />
<text  x="1015.45" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*&gt; (71 samples, 0.08%)</title><rect x="1093.3" y="597" width="1.0" height="15.0" fill="rgb(235,100,14)" rx="2" ry="2" />
<text  x="1096.32" y="607.5" ></text>
</g>
<g >
<title>CHashWriter::write (14 samples, 0.02%)</title><rect x="548.0" y="101" width="0.2" height="15.0" fill="rgb(254,225,37)" rx="2" ry="2" />
<text  x="551.01" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (90 samples, 0.10%)</title><rect x="681.3" y="533" width="1.3" height="15.0" fill="rgb(228,43,39)" rx="2" ry="2" />
<text  x="684.34" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::resize (133 samples, 0.15%)</title><rect x="396.7" y="469" width="1.8" height="15.0" fill="rgb(242,126,7)" rx="2" ry="2" />
<text  x="399.70" y="479.5" ></text>
</g>
<g >
<title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (152 samples, 0.17%)</title><rect x="527.0" y="181" width="2.1" height="15.0" fill="rgb(244,184,34)" rx="2" ry="2" />
<text  x="530.04" y="191.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (33 samples, 0.04%)</title><rect x="476.8" y="165" width="0.4" height="15.0" fill="rgb(216,46,40)" rx="2" ry="2" />
<text  x="479.80" y="175.5" ></text>
</g>
<g >
<title>GetRandBytes (398 samples, 0.45%)</title><rect x="1184.2" y="677" width="5.4" height="15.0" fill="rgb(222,192,50)" rx="2" ry="2" />
<text  x="1187.21" y="687.5" ></text>
</g>
<g >
<title>__db_lget (24 samples, 0.03%)</title><rect x="114.8" y="405" width="0.4" height="15.0" fill="rgb(209,110,50)" rx="2" ry="2" />
<text  x="117.83" y="415.5" ></text>
</g>
<g >
<title>CSHA256::Write (9 samples, 0.01%)</title><rect x="704.0" y="629" width="0.1" height="15.0" fill="rgb(251,117,33)" rx="2" ry="2" />
<text  x="706.97" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (87 samples, 0.10%)</title><rect x="991.9" y="581" width="1.2" height="15.0" fill="rgb(207,117,24)" rx="2" ry="2" />
<text  x="994.94" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (17 samples, 0.02%)</title><rect x="44.4" y="437" width="0.2" height="15.0" fill="rgb(246,125,29)" rx="2" ry="2" />
<text  x="47.38" y="447.5" ></text>
</g>
<g >
<title>std::_Construct&lt;CTxIn&gt; (45 samples, 0.05%)</title><rect x="481.8" y="277" width="0.6" height="15.0" fill="rgb(212,114,2)" rx="2" ry="2" />
<text  x="484.81" y="287.5" ></text>
</g>
<g >
<title>local_Rb_tree_increment (8 samples, 0.01%)</title><rect x="593.8" y="533" width="0.1" height="15.0" fill="rgb(244,48,40)" rx="2" ry="2" />
<text  x="596.83" y="543.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, uint256&amp;&gt; (24 samples, 0.03%)</title><rect x="39.4" y="613" width="0.3" height="15.0" fill="rgb(252,222,3)" rx="2" ry="2" />
<text  x="42.35" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (19 samples, 0.02%)</title><rect x="566.7" y="517" width="0.2" height="15.0" fill="rgb(246,161,7)" rx="2" ry="2" />
<text  x="569.67" y="527.5" ></text>
</g>
<g >
<title>WriteBE32 (39 samples, 0.04%)</title><rect x="1054.0" y="629" width="0.5" height="15.0" fill="rgb(205,2,10)" rx="2" ry="2" />
<text  x="1056.97" y="639.5" ></text>
</g>
<g >
<title>ShiftMessageC (14 samples, 0.02%)</title><rect x="1135.5" y="645" width="0.2" height="15.0" fill="rgb(214,42,19)" rx="2" ry="2" />
<text  x="1138.48" y="655.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::operator (16 samples, 0.02%)</title><rect x="969.9" y="597" width="0.2" height="15.0" fill="rgb(226,15,40)" rx="2" ry="2" />
<text  x="972.88" y="607.5" ></text>
</g>
<g >
<title>CDataStream::read (17 samples, 0.02%)</title><rect x="477.0" y="133" width="0.2" height="15.0" fill="rgb(234,153,16)" rx="2" ry="2" />
<text  x="480.02" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (17 samples, 0.02%)</title><rect x="850.1" y="341" width="0.2" height="15.0" fill="rgb(246,91,18)" rx="2" ry="2" />
<text  x="853.05" y="351.5" ></text>
</g>
<g >
<title>CTxOut::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (170 samples, 0.19%)</title><rect x="1033.6" y="501" width="2.3" height="15.0" fill="rgb(223,183,0)" rx="2" ry="2" />
<text  x="1036.61" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::empty (20 samples, 0.02%)</title><rect x="1050.1" y="661" width="0.3" height="15.0" fill="rgb(233,2,54)" rx="2" ry="2" />
<text  x="1053.09" y="671.5" ></text>
</g>
<g >
<title>__mutex_free_int (37 samples, 0.04%)</title><rect x="134.3" y="453" width="0.5" height="15.0" fill="rgb(251,5,1)" rx="2" ry="2" />
<text  x="137.30" y="463.5" ></text>
</g>
<g >
<title>CSHA512::Write (382 samples, 0.44%)</title><rect x="1184.2" y="581" width="5.2" height="15.0" fill="rgb(247,117,24)" rx="2" ry="2" />
<text  x="1187.25" y="591.5" ></text>
</g>
<g >
<title>__db_verify (8,968 samples, 10.24%)</title><rect x="59.5" y="597" width="120.9" height="15.0" fill="rgb(250,136,38)" rx="2" ry="2" />
<text  x="62.54" y="607.5" >__db_verify</text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (8 samples, 0.01%)</title><rect x="583.7" y="549" width="0.1" height="15.0" fill="rgb(225,158,11)" rx="2" ry="2" />
<text  x="586.68" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (12 samples, 0.01%)</title><rect x="857.0" y="293" width="0.2" height="15.0" fill="rgb(215,173,52)" rx="2" ry="2" />
<text  x="860.03" y="303.5" ></text>
</g>
<g >
<title>__dbc_close (57 samples, 0.07%)</title><rect x="89.7" y="469" width="0.8" height="15.0" fill="rgb(208,224,1)" rx="2" ry="2" />
<text  x="92.71" y="479.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (491 samples, 0.56%)</title><rect x="555.5" y="341" width="6.6" height="15.0" fill="rgb(239,15,11)" rx="2" ry="2" />
<text  x="558.46" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;char*&gt;::operator (8 samples, 0.01%)</title><rect x="1090.2" y="469" width="0.1" height="15.0" fill="rgb(231,145,18)" rx="2" ry="2" />
<text  x="1093.17" y="479.5" ></text>
</g>
<g >
<title>__bam_iitem (12 samples, 0.01%)</title><rect x="105.5" y="421" width="0.2" height="15.0" fill="rgb(246,142,50)" rx="2" ry="2" />
<text  x="108.53" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (36 samples, 0.04%)</title><rect x="339.7" y="533" width="0.5" height="15.0" fill="rgb(214,47,0)" rx="2" ry="2" />
<text  x="342.73" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt; &gt;::_M_node_allocator (8 samples, 0.01%)</title><rect x="825.6" y="565" width="0.1" height="15.0" fill="rgb(231,38,32)" rx="2" ry="2" />
<text  x="828.62" y="575.5" ></text>
</g>
<g >
<title>atoi64 (50 samples, 0.06%)</title><rect x="576.9" y="613" width="0.7" height="15.0" fill="rgb(228,195,35)" rx="2" ry="2" />
<text  x="579.93" y="623.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (9 samples, 0.01%)</title><rect x="1127.4" y="661" width="0.2" height="15.0" fill="rgb(209,66,51)" rx="2" ry="2" />
<text  x="1130.43" y="671.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.04%)</title><rect x="866.4" y="405" width="0.4" height="15.0" fill="rgb(243,68,50)" rx="2" ry="2" />
<text  x="869.37" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl::_Vector_impl (25 samples, 0.03%)</title><rect x="565.0" y="405" width="0.4" height="15.0" fill="rgb(240,31,7)" rx="2" ry="2" />
<text  x="568.03" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (67 samples, 0.08%)</title><rect x="37.2" y="613" width="0.9" height="15.0" fill="rgb(221,229,26)" rx="2" ry="2" />
<text  x="40.21" y="623.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, unsigned int&amp;&gt; (44 samples, 0.05%)</title><rect x="474.6" y="213" width="0.6" height="15.0" fill="rgb(229,106,35)" rx="2" ry="2" />
<text  x="477.59" y="223.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned char const*, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (57 samples, 0.07%)</title><rect x="1099.3" y="629" width="0.8" height="15.0" fill="rgb(240,38,15)" rx="2" ry="2" />
<text  x="1102.33" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::pop_back (24 samples, 0.03%)</title><rect x="734.8" y="597" width="0.3" height="15.0" fill="rgb(241,190,19)" rx="2" ry="2" />
<text  x="737.82" y="607.5" ></text>
</g>
<g >
<title>CHash160::Finalize (124 samples, 0.14%)</title><rect x="1118.8" y="693" width="1.7" height="15.0" fill="rgb(234,52,40)" rx="2" ry="2" />
<text  x="1121.83" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_deallocate (22 samples, 0.03%)</title><rect x="203.6" y="613" width="0.3" height="15.0" fill="rgb(253,126,9)" rx="2" ry="2" />
<text  x="206.57" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (50 samples, 0.06%)</title><rect x="448.2" y="565" width="0.6" height="15.0" fill="rgb(238,223,22)" rx="2" ry="2" />
<text  x="451.15" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (148 samples, 0.17%)</title><rect x="1042.2" y="597" width="1.9" height="15.0" fill="rgb(210,110,8)" rx="2" ry="2" />
<text  x="1045.15" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (19 samples, 0.02%)</title><rect x="515.5" y="389" width="0.2" height="15.0" fill="rgb(247,81,7)" rx="2" ry="2" />
<text  x="518.48" y="399.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (324 samples, 0.37%)</title><rect x="1109.2" y="421" width="4.4" height="15.0" fill="rgb(224,90,3)" rx="2" ry="2" />
<text  x="1112.20" y="431.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::CompareTo (53 samples, 0.06%)</title><rect x="51.4" y="597" width="0.7" height="15.0" fill="rgb(236,94,18)" rx="2" ry="2" />
<text  x="54.41" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (11 samples, 0.01%)</title><rect x="587.8" y="597" width="0.1" height="15.0" fill="rgb(253,147,41)" rx="2" ry="2" />
<text  x="590.78" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;BerkeleyEnvironment, std::allocator&lt;BerkeleyEnvironment&gt;,  (11 samples, 0.01%)</title><rect x="180.8" y="565" width="0.1" height="15.0" fill="rgb(252,73,23)" rx="2" ry="2" />
<text  x="183.78" y="575.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, long&gt; (56 samples, 0.06%)</title><rect x="1035.1" y="485" width="0.8" height="15.0" fill="rgb(237,178,15)" rx="2" ry="2" />
<text  x="1038.15" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (22 samples, 0.03%)</title><rect x="1002.3" y="485" width="0.3" height="15.0" fill="rgb(231,102,27)" rx="2" ry="2" />
<text  x="1005.29" y="495.5" ></text>
</g>
<g >
<title>__bam_get_root (22 samples, 0.03%)</title><rect x="159.3" y="485" width="0.3" height="15.0" fill="rgb(212,215,35)" rx="2" ry="2" />
<text  x="162.29" y="495.5" ></text>
</g>
<g >
<title>CHash256::Write (14 samples, 0.02%)</title><rect x="538.5" y="165" width="0.2" height="15.0" fill="rgb(210,57,6)" rx="2" ry="2" />
<text  x="541.54" y="175.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (95 samples, 0.11%)</title><rect x="606.9" y="629" width="1.3" height="15.0" fill="rgb(214,147,1)" rx="2" ry="2" />
<text  x="609.90" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_ptr (9 samples, 0.01%)</title><rect x="860.1" y="245" width="0.1" height="15.0" fill="rgb(248,118,50)" rx="2" ry="2" />
<text  x="863.06" y="255.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (14 samples, 0.02%)</title><rect x="940.1" y="485" width="0.1" height="15.0" fill="rgb(252,67,43)" rx="2" ry="2" />
<text  x="943.06" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (32 samples, 0.04%)</title><rect x="1026.0" y="517" width="0.4" height="15.0" fill="rgb(243,4,29)" rx="2" ry="2" />
<text  x="1028.95" y="527.5" ></text>
</g>
<g >
<title>std::map&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;, CAddressBookData, std::less&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; &gt;, std::allocator&lt;std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt; &gt; &gt;::lower_bound (14 samples, 0.02%)</title><rect x="1062.0" y="661" width="0.2" height="15.0" fill="rgb(254,175,9)" rx="2" ry="2" />
<text  x="1065.02" y="671.5" ></text>
</g>
<g >
<title>Dbt::get_size (8 samples, 0.01%)</title><rect x="13.6" y="741" width="0.1" height="15.0" fill="rgb(245,69,43)" rx="2" ry="2" />
<text  x="16.57" y="751.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (8 samples, 0.01%)</title><rect x="728.4" y="549" width="0.1" height="15.0" fill="rgb(228,155,36)" rx="2" ry="2" />
<text  x="731.43" y="559.5" ></text>
</g>
<g >
<title>__dbc_close (48 samples, 0.05%)</title><rect x="57.8" y="565" width="0.6" height="15.0" fill="rgb(215,122,15)" rx="2" ry="2" />
<text  x="60.80" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (9 samples, 0.01%)</title><rect x="409.7" y="581" width="0.1" height="15.0" fill="rgb(207,219,27)" rx="2" ry="2" />
<text  x="412.66" y="591.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, interfaces::Chain::Lock*, false&gt;::_M_head (18 samples, 0.02%)</title><rect x="983.0" y="565" width="0.2" height="15.0" fill="rgb(240,209,33)" rx="2" ry="2" />
<text  x="985.95" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (24 samples, 0.03%)</title><rect x="45.3" y="581" width="0.4" height="15.0" fill="rgb(214,14,41)" rx="2" ry="2" />
<text  x="48.35" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (10 samples, 0.01%)</title><rect x="1150.8" y="757" width="0.2" height="15.0" fill="rgb(248,181,53)" rx="2" ry="2" />
<text  x="1153.84" y="767.5" ></text>
</g>
<g >
<title>CSHA256::Write (9 samples, 0.01%)</title><rect x="1127.4" y="645" width="0.2" height="15.0" fill="rgb(231,112,4)" rx="2" ry="2" />
<text  x="1130.43" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (10 samples, 0.01%)</title><rect x="460.8" y="517" width="0.1" height="15.0" fill="rgb(217,21,26)" rx="2" ry="2" />
<text  x="463.75" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;CBlockIndex*&gt;::_M_valptr (8 samples, 0.01%)</title><rect x="52.2" y="597" width="0.1" height="15.0" fill="rgb(222,156,12)" rx="2" ry="2" />
<text  x="55.22" y="607.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, COutPoint&amp;&gt; (174 samples, 0.20%)</title><rect x="472.9" y="309" width="2.3" height="15.0" fill="rgb(234,227,18)" rx="2" ry="2" />
<text  x="475.89" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (16 samples, 0.02%)</title><rect x="36.9" y="613" width="0.3" height="15.0" fill="rgb(211,99,3)" rx="2" ry="2" />
<text  x="39.94" y="623.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (1,345 samples, 1.54%)</title><rect x="686.1" y="661" width="18.1" height="15.0" fill="rgb(242,106,34)" rx="2" ry="2" />
<text  x="689.07" y="671.5" ></text>
</g>
<g >
<title>BlockManager::InsertBlockIndex (121 samples, 0.14%)</title><rect x="47.8" y="613" width="1.6" height="15.0" fill="rgb(242,210,7)" rx="2" ry="2" />
<text  x="50.81" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (9 samples, 0.01%)</title><rect x="934.9" y="645" width="0.1" height="15.0" fill="rgb(223,140,41)" rx="2" ry="2" />
<text  x="937.87" y="655.5" ></text>
</g>
<g >
<title>bitcoin-init (87,095 samples, 99.47%)</title><rect x="10.0" y="773" width="1173.7" height="15.0" fill="rgb(219,20,49)" rx="2" ry="2" />
<text  x="13.04" y="783.5" >bitcoin-init</text>
</g>
<g >
<title>CPubKey::IsValid (14 samples, 0.02%)</title><rect x="704.2" y="677" width="0.2" height="15.0" fill="rgb(253,159,6)" rx="2" ry="2" />
<text  x="707.20" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::lower_bound (105 samples, 0.12%)</title><rect x="852.3" y="373" width="1.4" height="15.0" fill="rgb(251,115,39)" rx="2" ry="2" />
<text  x="855.29" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;::_M_ptr (11 samples, 0.01%)</title><rect x="53.9" y="597" width="0.1" height="15.0" fill="rgb(215,63,30)" rx="2" ry="2" />
<text  x="56.85" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CBlockIndex*, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt; &gt;::find (59 samples, 0.07%)</title><rect x="48.1" y="597" width="0.8" height="15.0" fill="rgb(236,148,23)" rx="2" ry="2" />
<text  x="51.14" y="607.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (39 samples, 0.04%)</title><rect x="1143.9" y="597" width="0.5" height="15.0" fill="rgb(249,154,43)" rx="2" ry="2" />
<text  x="1146.88" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size&lt;secure_allocator&lt;unsigned char&gt; const&gt; (10 samples, 0.01%)</title><rect x="668.7" y="581" width="0.1" height="15.0" fill="rgb(230,173,3)" rx="2" ry="2" />
<text  x="671.70" y="591.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (15 samples, 0.02%)</title><rect x="572.3" y="565" width="0.2" height="15.0" fill="rgb(209,91,2)" rx="2" ry="2" />
<text  x="575.35" y="575.5" ></text>
</g>
<g >
<title>__lock_put (10 samples, 0.01%)</title><rect x="169.3" y="501" width="0.1" height="15.0" fill="rgb(213,11,3)" rx="2" ry="2" />
<text  x="172.27" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_M_ptr (10 samples, 0.01%)</title><rect x="652.7" y="517" width="0.1" height="15.0" fill="rgb(236,82,0)" rx="2" ry="2" />
<text  x="655.69" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (35 samples, 0.04%)</title><rect x="1171.9" y="757" width="0.5" height="15.0" fill="rgb(226,32,27)" rx="2" ry="2" />
<text  x="1174.90" y="767.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator[] (27 samples, 0.03%)</title><rect x="477.7" y="165" width="0.4" height="15.0" fill="rgb(226,167,29)" rx="2" ry="2" />
<text  x="480.69" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_drop_node (28 samples, 0.03%)</title><rect x="592.5" y="549" width="0.3" height="15.0" fill="rgb(226,77,47)" rx="2" ry="2" />
<text  x="595.45" y="559.5" ></text>
</g>
<g >
<title>Hash&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (185 samples, 0.21%)</title><rect x="1052.9" y="677" width="2.5" height="15.0" fill="rgb(229,149,11)" rx="2" ry="2" />
<text  x="1055.93" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (13 samples, 0.01%)</title><rect x="57.0" y="453" width="0.2" height="15.0" fill="rgb(223,9,39)" rx="2" ry="2" />
<text  x="60.05" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (108 samples, 0.12%)</title><rect x="55.8" y="549" width="1.5" height="15.0" fill="rgb(206,22,35)" rx="2" ry="2" />
<text  x="58.83" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (20 samples, 0.02%)</title><rect x="1018.1" y="645" width="0.3" height="15.0" fill="rgb(228,202,18)" rx="2" ry="2" />
<text  x="1021.12" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_base (31 samples, 0.04%)</title><rect x="669.1" y="645" width="0.4" height="15.0" fill="rgb(220,112,31)" rx="2" ry="2" />
<text  x="672.08" y="655.5" ></text>
</g>
<g >
<title>ToByteVector&lt;WitnessV0KeyHash&gt; (185 samples, 0.21%)</title><rect x="814.2" y="469" width="2.5" height="15.0" fill="rgb(226,29,39)" rx="2" ry="2" />
<text  x="817.22" y="479.5" ></text>
</g>
<g >
<title>std::mutex::lock (14 samples, 0.02%)</title><rect x="1090.9" y="565" width="0.2" height="15.0" fill="rgb(245,108,9)" rx="2" ry="2" />
<text  x="1093.90" y="575.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getBlockHeight (181 samples, 0.21%)</title><rect x="55.0" y="629" width="2.4" height="15.0" fill="rgb(208,97,27)" rx="2" ry="2" />
<text  x="58.01" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;CTxIn*, unsigned long&gt; (62 samples, 0.07%)</title><rect x="481.6" y="293" width="0.9" height="15.0" fill="rgb(215,52,32)" rx="2" ry="2" />
<text  x="484.63" y="303.5" ></text>
</g>
<g >
<title>StartWallets (206 samples, 0.24%)</title><rect x="55.0" y="709" width="2.8" height="15.0" fill="rgb(235,135,1)" rx="2" ry="2" />
<text  x="58.01" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (14 samples, 0.02%)</title><rect x="1090.0" y="469" width="0.2" height="15.0" fill="rgb(246,13,1)" rx="2" ry="2" />
<text  x="1092.98" y="479.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (9 samples, 0.01%)</title><rect x="1030.5" y="341" width="0.1" height="15.0" fill="rgb(241,173,13)" rx="2" ry="2" />
<text  x="1033.52" y="351.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (21 samples, 0.02%)</title><rect x="157.6" y="533" width="0.3" height="15.0" fill="rgb(211,185,28)" rx="2" ry="2" />
<text  x="160.63" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;COutPoint&gt;::_Rb_tree_const_iterator (8 samples, 0.01%)</title><rect x="908.0" y="581" width="0.1" height="15.0" fill="rgb(238,80,43)" rx="2" ry="2" />
<text  x="910.97" y="591.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (164 samples, 0.19%)</title><rect x="183.1" y="501" width="2.3" height="15.0" fill="rgb(250,8,37)" rx="2" ry="2" />
<text  x="186.14" y="511.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (8 samples, 0.01%)</title><rect x="874.6" y="501" width="0.1" height="15.0" fill="rgb(246,68,15)" rx="2" ry="2" />
<text  x="877.59" y="511.5" ></text>
</g>
<g >
<title>__bam_search (43 samples, 0.05%)</title><rect x="162.9" y="485" width="0.5" height="15.0" fill="rgb(246,185,27)" rx="2" ry="2" />
<text  x="165.86" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (13 samples, 0.01%)</title><rect x="39.5" y="517" width="0.2" height="15.0" fill="rgb(242,161,37)" rx="2" ry="2" />
<text  x="42.50" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;CChainState, std::default_delete&lt;CChainState&gt; &gt;::get (65 samples, 0.07%)</title><rect x="954.1" y="613" width="0.8" height="15.0" fill="rgb(230,178,52)" rx="2" ry="2" />
<text  x="957.06" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (13 samples, 0.01%)</title><rect x="48.7" y="517" width="0.1" height="15.0" fill="rgb(214,165,35)" rx="2" ry="2" />
<text  x="51.66" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_assign (32 samples, 0.04%)</title><rect x="448.4" y="549" width="0.4" height="15.0" fill="rgb(246,184,12)" rx="2" ry="2" />
<text  x="451.35" y="559.5" ></text>
</g>
<g >
<title>SaltedOutpointHasher::operator (142 samples, 0.16%)</title><rect x="911.9" y="581" width="1.9" height="15.0" fill="rgb(252,113,35)" rx="2" ry="2" />
<text  x="914.87" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_valptr (11 samples, 0.01%)</title><rect x="897.5" y="597" width="0.2" height="15.0" fill="rgb(216,109,32)" rx="2" ry="2" />
<text  x="900.51" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::erase (143 samples, 0.16%)</title><rect x="613.3" y="517" width="1.9" height="15.0" fill="rgb(236,108,54)" rx="2" ry="2" />
<text  x="616.29" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_valptr (17 samples, 0.02%)</title><rect x="834.3" y="501" width="0.2" height="15.0" fill="rgb(217,35,35)" rx="2" ry="2" />
<text  x="837.31" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_allocate (145 samples, 0.17%)</title><rect x="201.6" y="613" width="2.0" height="15.0" fill="rgb(245,137,42)" rx="2" ry="2" />
<text  x="204.62" y="623.5" ></text>
</g>
<g >
<title>[unknown] (82,834 samples, 94.60%)</title><rect x="28.6" y="757" width="1116.2" height="15.0" fill="rgb(216,83,35)" rx="2" ry="2" />
<text  x="31.56" y="767.5" >[unknown]</text>
</g>
<g >
<title>__db_tas_mutex_lock (27 samples, 0.03%)</title><rect x="368.1" y="533" width="0.4" height="15.0" fill="rgb(228,208,19)" rx="2" ry="2" />
<text  x="371.14" y="543.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (81 samples, 0.09%)</title><rect x="1142.0" y="149" width="1.1" height="15.0" fill="rgb(231,127,25)" rx="2" ry="2" />
<text  x="1145.02" y="159.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (14 samples, 0.02%)</title><rect x="151.4" y="453" width="0.2" height="15.0" fill="rgb(224,133,45)" rx="2" ry="2" />
<text  x="154.38" y="463.5" ></text>
</g>
<g >
<title>CScript::CScript (11 samples, 0.01%)</title><rect x="491.7" y="245" width="0.1" height="15.0" fill="rgb(229,175,19)" rx="2" ry="2" />
<text  x="494.68" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (154 samples, 0.18%)</title><rect x="911.8" y="597" width="2.1" height="15.0" fill="rgb(219,181,16)" rx="2" ry="2" />
<text  x="914.80" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (45 samples, 0.05%)</title><rect x="613.8" y="453" width="0.6" height="15.0" fill="rgb(207,30,45)" rx="2" ry="2" />
<text  x="616.84" y="463.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (19 samples, 0.02%)</title><rect x="566.2" y="517" width="0.3" height="15.0" fill="rgb(250,144,13)" rx="2" ry="2" />
<text  x="569.24" y="527.5" ></text>
</g>
<g >
<title>__db_vrfy_childcursor (38 samples, 0.04%)</title><rect x="88.7" y="501" width="0.5" height="15.0" fill="rgb(232,159,26)" rx="2" ry="2" />
<text  x="91.66" y="511.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, unsigned int&gt; (50 samples, 0.06%)</title><rect x="528.4" y="149" width="0.7" height="15.0" fill="rgb(217,26,24)" rx="2" ry="2" />
<text  x="531.41" y="159.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.04%)</title><rect x="99.1" y="293" width="0.4" height="15.0" fill="rgb(238,130,9)" rx="2" ry="2" />
<text  x="102.05" y="303.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, CBlockIndex*&gt;*, std::vector&lt;std::pair&lt;int, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;int, CBlockIndex*&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (25 samples, 0.03%)</title><rect x="52.6" y="661" width="0.3" height="15.0" fill="rgb(246,158,19)" rx="2" ry="2" />
<text  x="55.56" y="671.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;unsigned char&gt; (23 samples, 0.03%)</title><rect x="562.1" y="341" width="0.3" height="15.0" fill="rgb(239,200,35)" rx="2" ry="2" />
<text  x="565.08" y="351.5" ></text>
</g>
<g >
<title>CDataStream::read (24 samples, 0.03%)</title><rect x="473.9" y="165" width="0.3" height="15.0" fill="rgb(220,221,46)" rx="2" ry="2" />
<text  x="476.88" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (148 samples, 0.17%)</title><rect x="823.1" y="581" width="2.0" height="15.0" fill="rgb(227,69,22)" rx="2" ry="2" />
<text  x="826.10" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (17 samples, 0.02%)</title><rect x="490.6" y="261" width="0.3" height="15.0" fill="rgb(246,173,4)" rx="2" ry="2" />
<text  x="493.63" y="271.5" ></text>
</g>
<g >
<title>CHash256::Write (16 samples, 0.02%)</title><rect x="528.7" y="85" width="0.2" height="15.0" fill="rgb(219,30,1)" rx="2" ry="2" />
<text  x="531.71" y="95.5" ></text>
</g>
<g >
<title>__memp_fget (9 samples, 0.01%)</title><rect x="137.4" y="517" width="0.1" height="15.0" fill="rgb(249,113,33)" rx="2" ry="2" />
<text  x="140.36" y="527.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (21 samples, 0.02%)</title><rect x="140.5" y="421" width="0.3" height="15.0" fill="rgb(229,210,31)" rx="2" ry="2" />
<text  x="143.52" y="431.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::Enter (548 samples, 0.63%)</title><rect x="828.3" y="613" width="7.4" height="15.0" fill="rgb(233,159,51)" rx="2" ry="2" />
<text  x="831.30" y="623.5" ></text>
</g>
<g >
<title>CSizeComputer::write (8 samples, 0.01%)</title><rect x="1030.3" y="341" width="0.1" height="15.0" fill="rgb(235,170,32)" rx="2" ry="2" />
<text  x="1033.27" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (13 samples, 0.01%)</title><rect x="460.7" y="533" width="0.2" height="15.0" fill="rgb(212,22,39)" rx="2" ry="2" />
<text  x="463.71" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_create_node&lt;unsigned long const&amp;, char*&amp;&gt; (59 samples, 0.07%)</title><rect x="848.7" y="357" width="0.8" height="15.0" fill="rgb(240,123,22)" rx="2" ry="2" />
<text  x="851.73" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (11 samples, 0.01%)</title><rect x="1043.9" y="501" width="0.2" height="15.0" fill="rgb(247,104,5)" rx="2" ry="2" />
<text  x="1046.93" y="511.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.01%)</title><rect x="1183.8" y="757" width="0.1" height="15.0" fill="rgb(241,110,18)" rx="2" ry="2" />
<text  x="1186.79" y="767.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (8 samples, 0.01%)</title><rect x="73.5" y="501" width="0.1" height="15.0" fill="rgb(242,187,31)" rx="2" ry="2" />
<text  x="76.50" y="511.5" ></text>
</g>
<g >
<title>CHash256::Write (12 samples, 0.01%)</title><rect x="562.5" y="277" width="0.2" height="15.0" fill="rgb(252,18,26)" rx="2" ry="2" />
<text  x="565.50" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::~_Vector_base (1,075 samples, 1.23%)</title><rect x="1077.5" y="661" width="14.5" height="15.0" fill="rgb(246,147,17)" rx="2" ry="2" />
<text  x="1080.47" y="671.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="127.3" y="485" width="0.1" height="15.0" fill="rgb(231,208,7)" rx="2" ry="2" />
<text  x="130.27" y="495.5" ></text>
</g>
<g >
<title>__db_cursor_int (16 samples, 0.02%)</title><rect x="69.8" y="517" width="0.2" height="15.0" fill="rgb(243,40,15)" rx="2" ry="2" />
<text  x="72.79" y="527.5" ></text>
</g>
<g >
<title>CScript::~CScript (19 samples, 0.02%)</title><rect x="786.6" y="613" width="0.3" height="15.0" fill="rgb(235,68,21)" rx="2" ry="2" />
<text  x="789.62" y="623.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (13 samples, 0.01%)</title><rect x="617.7" y="533" width="0.2" height="15.0" fill="rgb(248,109,20)" rx="2" ry="2" />
<text  x="620.69" y="543.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="151.6" y="453" width="0.1" height="15.0" fill="rgb(229,142,2)" rx="2" ry="2" />
<text  x="154.57" y="463.5" ></text>
</g>
<g >
<title>operator== (14 samples, 0.02%)</title><rect x="57.0" y="485" width="0.2" height="15.0" fill="rgb(254,189,20)" rx="2" ry="2" />
<text  x="60.03" y="495.5" ></text>
</g>
<g >
<title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (69 samples, 0.08%)</title><rect x="31.3" y="677" width="0.9" height="15.0" fill="rgb(230,183,40)" rx="2" ry="2" />
<text  x="34.27" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::~_Vector_base (9 samples, 0.01%)</title><rect x="1177.2" y="741" width="0.1" height="15.0" fill="rgb(227,84,13)" rx="2" ry="2" />
<text  x="1180.18" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (11 samples, 0.01%)</title><rect x="911.5" y="549" width="0.2" height="15.0" fill="rgb(232,48,15)" rx="2" ry="2" />
<text  x="914.54" y="559.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (23 samples, 0.03%)</title><rect x="536.8" y="85" width="0.3" height="15.0" fill="rgb(249,2,6)" rx="2" ry="2" />
<text  x="539.77" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator* (20 samples, 0.02%)</title><rect x="812.4" y="421" width="0.2" height="15.0" fill="rgb(229,175,53)" rx="2" ry="2" />
<text  x="815.37" y="431.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::IsNull (8 samples, 0.01%)</title><rect x="1061.0" y="677" width="0.2" height="15.0" fill="rgb(217,148,19)" rx="2" ry="2" />
<text  x="1064.05" y="687.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;void*, void*&gt; &gt;::operator (11 samples, 0.01%)</title><rect x="834.7" y="533" width="0.2" height="15.0" fill="rgb(251,215,29)" rx="2" ry="2" />
<text  x="837.73" y="543.5" ></text>
</g>
<g >
<title>CHashWriter::write (9 samples, 0.01%)</title><rect x="562.3" y="293" width="0.1" height="15.0" fill="rgb(240,114,26)" rx="2" ry="2" />
<text  x="565.27" y="303.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::iterator::operator* (8 samples, 0.01%)</title><rect x="811.7" y="421" width="0.1" height="15.0" fill="rgb(212,205,19)" rx="2" ry="2" />
<text  x="814.67" y="431.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (21 samples, 0.02%)</title><rect x="46.8" y="437" width="0.3" height="15.0" fill="rgb(218,192,1)" rx="2" ry="2" />
<text  x="49.82" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::__normal_iterator (11 samples, 0.01%)</title><rect x="534.3" y="277" width="0.2" height="15.0" fill="rgb(243,134,12)" rx="2" ry="2" />
<text  x="537.33" y="287.5" ></text>
</g>
<g >
<title>__db_cursor_int (34 samples, 0.04%)</title><rect x="112.8" y="453" width="0.5" height="15.0" fill="rgb(220,33,52)" rx="2" ry="2" />
<text  x="115.84" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_S_relocate (19 samples, 0.02%)</title><rect x="397.8" y="437" width="0.3" height="15.0" fill="rgb(213,206,38)" rx="2" ry="2" />
<text  x="400.82" y="447.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getBlockDepth (205 samples, 0.23%)</title><rect x="55.0" y="645" width="2.8" height="15.0" fill="rgb(220,104,27)" rx="2" ry="2" />
<text  x="58.01" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, void&gt; (14 samples, 0.02%)</title><rect x="1176.3" y="757" width="0.2" height="15.0" fill="rgb(229,115,10)" rx="2" ry="2" />
<text  x="1179.35" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, CKeyID&amp;&amp;&gt;::_Tuple_impl (20 samples, 0.02%)</title><rect x="868.4" y="533" width="0.3" height="15.0" fill="rgb(240,229,53)" rx="2" ry="2" />
<text  x="871.42" y="543.5" ></text>
</g>
<g >
<title>secp256k1_gej_add_ge_var (23 samples, 0.03%)</title><rect x="1149.5" y="613" width="0.3" height="15.0" fill="rgb(205,86,14)" rx="2" ry="2" />
<text  x="1152.50" y="623.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;&gt; (61 samples, 0.07%)</title><rect x="572.9" y="629" width="0.8" height="15.0" fill="rgb(217,1,3)" rx="2" ry="2" />
<text  x="575.90" y="639.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (17 samples, 0.02%)</title><rect x="444.6" y="613" width="0.2" height="15.0" fill="rgb(243,126,9)" rx="2" ry="2" />
<text  x="447.61" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::construct&lt;unsigned char&gt; (84 samples, 0.10%)</title><rect x="666.3" y="581" width="1.2" height="15.0" fill="rgb(228,92,42)" rx="2" ry="2" />
<text  x="669.33" y="591.5" ></text>
</g>
<g >
<title>VerifyWallets (39 samples, 0.04%)</title><rect x="1143.9" y="741" width="0.5" height="15.0" fill="rgb(229,166,28)" rx="2" ry="2" />
<text  x="1146.88" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (31 samples, 0.04%)</title><rect x="992.1" y="565" width="0.5" height="15.0" fill="rgb(205,7,3)" rx="2" ry="2" />
<text  x="995.14" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;::_Node_iterator (8 samples, 0.01%)</title><rect x="679.0" y="501" width="0.1" height="15.0" fill="rgb(245,79,23)" rx="2" ry="2" />
<text  x="681.97" y="511.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction (328 samples, 0.37%)</title><rect x="180.9" y="565" width="4.5" height="15.0" fill="rgb(206,186,43)" rx="2" ry="2" />
<text  x="183.93" y="575.5" ></text>
</g>
<g >
<title>secp256k1_fe_mul_inner (14 samples, 0.02%)</title><rect x="1149.5" y="581" width="0.2" height="15.0" fill="rgb(230,43,15)" rx="2" ry="2" />
<text  x="1152.52" y="591.5" ></text>
</g>
<g >
<title>std::recursive_mutex::unlock (13 samples, 0.01%)</title><rect x="735.2" y="597" width="0.2" height="15.0" fill="rgb(225,214,39)" rx="2" ry="2" />
<text  x="738.23" y="607.5" ></text>
</g>
<g >
<title>WriteBE32 (52 samples, 0.06%)</title><rect x="541.9" y="357" width="0.7" height="15.0" fill="rgb(229,101,12)" rx="2" ry="2" />
<text  x="544.85" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20 samples, 0.02%)</title><rect x="569.5" y="485" width="0.3" height="15.0" fill="rgb(251,125,31)" rx="2" ry="2" />
<text  x="572.53" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (14 samples, 0.02%)</title><rect x="517.6" y="437" width="0.2" height="15.0" fill="rgb(226,41,20)" rx="2" ry="2" />
<text  x="520.65" y="447.5" ></text>
</g>
<g >
<title>ReadLE32 (43 samples, 0.05%)</title><rect x="803.8" y="533" width="0.6" height="15.0" fill="rgb(212,210,15)" rx="2" ry="2" />
<text  x="806.79" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="859.1" y="341" width="0.2" height="15.0" fill="rgb(252,53,7)" rx="2" ry="2" />
<text  x="862.11" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (12 samples, 0.01%)</title><rect x="500.5" y="293" width="0.2" height="15.0" fill="rgb(232,92,4)" rx="2" ry="2" />
<text  x="503.53" y="303.5" ></text>
</g>
<g >
<title>__memp_fput (26 samples, 0.03%)</title><rect x="87.5" y="421" width="0.3" height="15.0" fill="rgb(222,173,10)" rx="2" ry="2" />
<text  x="90.46" y="431.5" ></text>
</g>
<g >
<title>CDataStream::read (11 samples, 0.01%)</title><rect x="574.3" y="549" width="0.2" height="15.0" fill="rgb(226,88,18)" rx="2" ry="2" />
<text  x="577.31" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10 samples, 0.01%)</title><rect x="658.8" y="453" width="0.1" height="15.0" fill="rgb(234,6,30)" rx="2" ry="2" />
<text  x="661.76" y="463.5" ></text>
</g>
<g >
<title>std::operator!=&lt;char*&gt; (97 samples, 0.11%)</title><rect x="317.8" y="581" width="1.3" height="15.0" fill="rgb(250,73,52)" rx="2" ry="2" />
<text  x="320.80" y="591.5" ></text>
</g>
<g >
<title>CPubKey::IsCompressed (8 samples, 0.01%)</title><rect x="785.8" y="613" width="0.1" height="15.0" fill="rgb(238,145,46)" rx="2" ry="2" />
<text  x="788.77" y="623.5" ></text>
</g>
<g >
<title>__lock_put (18 samples, 0.02%)</title><rect x="122.0" y="421" width="0.2" height="15.0" fill="rgb(231,13,37)" rx="2" ry="2" />
<text  x="124.96" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;COutPoint&gt;::_M_ptr (10 samples, 0.01%)</title><rect x="1042.6" y="549" width="0.1" height="15.0" fill="rgb(234,111,32)" rx="2" ry="2" />
<text  x="1045.61" y="559.5" ></text>
</g>
<g >
<title>__lock_ohash (23 samples, 0.03%)</title><rect x="341.7" y="549" width="0.3" height="15.0" fill="rgb(222,28,5)" rx="2" ry="2" />
<text  x="344.69" y="559.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (11 samples, 0.01%)</title><rect x="683.8" y="565" width="0.2" height="15.0" fill="rgb(227,228,47)" rx="2" ry="2" />
<text  x="686.81" y="575.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, uint256&gt; (39 samples, 0.04%)</title><rect x="545.9" y="149" width="0.6" height="15.0" fill="rgb(249,109,46)" rx="2" ry="2" />
<text  x="548.95" y="159.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (22 samples, 0.03%)</title><rect x="140.8" y="421" width="0.3" height="15.0" fill="rgb(251,125,29)" rx="2" ry="2" />
<text  x="143.84" y="431.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="28.1" y="757" width="0.1" height="15.0" fill="rgb(251,125,15)" rx="2" ry="2" />
<text  x="31.10" y="767.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.02%)</title><rect x="112.1" y="341" width="0.2" height="15.0" fill="rgb(250,179,37)" rx="2" ry="2" />
<text  x="115.06" y="351.5" ></text>
</g>
<g >
<title>__memp_fput (20 samples, 0.02%)</title><rect x="168.4" y="485" width="0.3" height="15.0" fill="rgb(231,105,44)" rx="2" ry="2" />
<text  x="171.40" y="495.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::ChainImpl::lock (1,052 samples, 1.20%)</title><rect x="935.4" y="645" width="14.2" height="15.0" fill="rgb(219,82,20)" rx="2" ry="2" />
<text  x="938.41" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;char*, unsigned long&amp;&gt; (300 samples, 0.34%)</title><rect x="659.5" y="517" width="4.1" height="15.0" fill="rgb(225,121,21)" rx="2" ry="2" />
<text  x="662.52" y="527.5" ></text>
</g>
<g >
<title>CSHA256::Write (44 samples, 0.05%)</title><rect x="556.7" y="229" width="0.6" height="15.0" fill="rgb(237,152,47)" rx="2" ry="2" />
<text  x="559.66" y="239.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (16 samples, 0.02%)</title><rect x="164.9" y="485" width="0.2" height="15.0" fill="rgb(227,66,49)" rx="2" ry="2" />
<text  x="167.87" y="495.5" ></text>
</g>
<g >
<title>BerkeleyBatch::BerkeleyBatch (20 samples, 0.02%)</title><rect x="1104.7" y="693" width="0.3" height="15.0" fill="rgb(232,151,25)" rx="2" ry="2" />
<text  x="1107.68" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::__normal_iterator (8 samples, 0.01%)</title><rect x="1049.6" y="629" width="0.1" height="15.0" fill="rgb(235,144,45)" rx="2" ry="2" />
<text  x="1052.61" y="639.5" ></text>
</g>
<g >
<title>__db_get (399 samples, 0.46%)</title><rect x="157.3" y="565" width="5.4" height="15.0" fill="rgb(215,148,5)" rx="2" ry="2" />
<text  x="160.33" y="575.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.01%)</title><rect x="1061.3" y="645" width="0.1" height="15.0" fill="rgb(210,24,30)" rx="2" ry="2" />
<text  x="1064.28" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::allocate (1,337 samples, 1.53%)</title><rect x="846.1" y="453" width="18.0" height="15.0" fill="rgb(208,176,21)" rx="2" ry="2" />
<text  x="849.07" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;::operator++ (26 samples, 0.03%)</title><rect x="897.2" y="613" width="0.3" height="15.0" fill="rgb(240,88,10)" rx="2" ry="2" />
<text  x="900.16" y="623.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (257 samples, 0.29%)</title><rect x="399.0" y="565" width="3.4" height="15.0" fill="rgb(212,207,5)" rx="2" ry="2" />
<text  x="401.96" y="575.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (23 samples, 0.03%)</title><rect x="597.5" y="565" width="0.3" height="15.0" fill="rgb(206,33,2)" rx="2" ry="2" />
<text  x="600.53" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::max_size (20 samples, 0.02%)</title><rect x="667.6" y="613" width="0.3" height="15.0" fill="rgb(224,60,3)" rx="2" ry="2" />
<text  x="670.61" y="623.5" ></text>
</g>
<g >
<title>__memp_fget (422 samples, 0.48%)</title><rect x="93.8" y="405" width="5.7" height="15.0" fill="rgb(212,169,43)" rx="2" ry="2" />
<text  x="96.85" y="415.5" ></text>
</g>
<g >
<title>__db_put (370 samples, 0.42%)</title><rect x="116.4" y="485" width="5.0" height="15.0" fill="rgb(221,123,27)" rx="2" ry="2" />
<text  x="119.41" y="495.5" ></text>
</g>
<g >
<title>CScript::CScript (11 samples, 0.01%)</title><rect x="1025.4" y="533" width="0.1" height="15.0" fill="rgb(231,229,53)" rx="2" ry="2" />
<text  x="1028.39" y="543.5" ></text>
</g>
<g >
<title>__lock_get_internal (38 samples, 0.04%)</title><rect x="150.3" y="437" width="0.6" height="15.0" fill="rgb(250,193,27)" rx="2" ry="2" />
<text  x="153.34" y="447.5" ></text>
</g>
<g >
<title>COutPoint::COutPoint (14 samples, 0.02%)</title><rect x="481.9" y="245" width="0.2" height="15.0" fill="rgb(220,190,11)" rx="2" ry="2" />
<text  x="484.89" y="255.5" ></text>
</g>
<g >
<title>__bam_get_root (39 samples, 0.04%)</title><rect x="166.4" y="485" width="0.5" height="15.0" fill="rgb(215,90,47)" rx="2" ry="2" />
<text  x="169.35" y="495.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (58 samples, 0.07%)</title><rect x="1034.2" y="389" width="0.8" height="15.0" fill="rgb(254,168,52)" rx="2" ry="2" />
<text  x="1037.24" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_addr (14 samples, 0.02%)</title><rect x="731.3" y="469" width="0.2" height="15.0" fill="rgb(218,87,27)" rx="2" ry="2" />
<text  x="734.30" y="479.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned int&gt; (16 samples, 0.02%)</title><rect x="786.4" y="565" width="0.2" height="15.0" fill="rgb(221,79,2)" rx="2" ry="2" />
<text  x="789.40" y="575.5" ></text>
</g>
<g >
<title>__libc_pread (8 samples, 0.01%)</title><rect x="101.9" y="341" width="0.1" height="15.0" fill="rgb(208,51,38)" rx="2" ry="2" />
<text  x="104.89" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt;::construct&lt;std::pair&lt;CScriptID const, CScript&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CScriptID const&amp;&gt;, std::tuple&lt;&gt; &gt; (83 samples, 0.09%)</title><rect x="826.7" y="549" width="1.2" height="15.0" fill="rgb(211,112,7)" rx="2" ry="2" />
<text  x="829.75" y="559.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;uint256 const, CWalletTx&gt; (10 samples, 0.01%)</title><rect x="1003.7" y="581" width="0.1" height="15.0" fill="rgb(220,16,25)" rx="2" ry="2" />
<text  x="1006.68" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::operator bool (88 samples, 0.10%)</title><rect x="982.0" y="661" width="1.2" height="15.0" fill="rgb(245,208,19)" rx="2" ry="2" />
<text  x="985.01" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::end (14 samples, 0.02%)</title><rect x="743.6" y="597" width="0.2" height="15.0" fill="rgb(209,25,40)" rx="2" ry="2" />
<text  x="746.56" y="607.5" ></text>
</g>
<g >
<title>__strlen_avx2 (26 samples, 0.03%)</title><rect x="585.7" y="597" width="0.4" height="15.0" fill="rgb(211,27,8)" rx="2" ry="2" />
<text  x="588.74" y="607.5" ></text>
</g>
<g >
<title>CDataStream::read (11 samples, 0.01%)</title><rect x="444.7" y="581" width="0.1" height="15.0" fill="rgb(242,176,13)" rx="2" ry="2" />
<text  x="447.66" y="591.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (52 samples, 0.06%)</title><rect x="1011.6" y="533" width="0.7" height="15.0" fill="rgb(233,112,23)" rx="2" ry="2" />
<text  x="1014.64" y="543.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (131 samples, 0.15%)</title><rect x="552.2" y="245" width="1.8" height="15.0" fill="rgb(208,69,26)" rx="2" ry="2" />
<text  x="555.24" y="255.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;unsigned int&gt; (22 samples, 0.03%)</title><rect x="540.2" y="341" width="0.3" height="15.0" fill="rgb(254,119,37)" rx="2" ry="2" />
<text  x="543.19" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*, unsigned char&gt; (14 samples, 0.02%)</title><rect x="1094.3" y="613" width="0.2" height="15.0" fill="rgb(221,133,11)" rx="2" ry="2" />
<text  x="1097.32" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~_Vector_base (14 samples, 0.02%)</title><rect x="563.7" y="325" width="0.2" height="15.0" fill="rgb(252,109,30)" rx="2" ry="2" />
<text  x="566.68" y="335.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (20 samples, 0.02%)</title><rect x="872.9" y="581" width="0.2" height="15.0" fill="rgb(229,111,19)" rx="2" ry="2" />
<text  x="875.87" y="591.5" ></text>
</g>
<g >
<title>WriteBE32 (17 samples, 0.02%)</title><rect x="765.1" y="565" width="0.3" height="15.0" fill="rgb(237,118,54)" rx="2" ry="2" />
<text  x="768.12" y="575.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (48 samples, 0.05%)</title><rect x="1097.5" y="613" width="0.6" height="15.0" fill="rgb(234,37,1)" rx="2" ry="2" />
<text  x="1100.50" y="623.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (15 samples, 0.02%)</title><rect x="548.5" y="101" width="0.2" height="15.0" fill="rgb(209,27,32)" rx="2" ry="2" />
<text  x="551.52" y="111.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (9 samples, 0.01%)</title><rect x="115.7" y="389" width="0.1" height="15.0" fill="rgb(216,83,19)" rx="2" ry="2" />
<text  x="118.72" y="399.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (391 samples, 0.45%)</title><rect x="1113.6" y="405" width="5.2" height="15.0" fill="rgb(242,217,17)" rx="2" ry="2" />
<text  x="1116.56" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CBlockIndex*, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt; &gt;::find (134 samples, 0.15%)</title><rect x="55.6" y="597" width="1.8" height="15.0" fill="rgb(246,9,34)" rx="2" ry="2" />
<text  x="58.64" y="607.5" ></text>
</g>
<g >
<title>__uint32_identity (16 samples, 0.02%)</title><rect x="1024.6" y="533" width="0.2" height="15.0" fill="rgb(211,31,31)" rx="2" ry="2" />
<text  x="1027.62" y="543.5" ></text>
</g>
<g >
<title>BerkeleyBatch::SafeDbt::get_size (8 samples, 0.01%)</title><rect x="13.6" y="757" width="0.1" height="15.0" fill="rgb(238,213,10)" rx="2" ry="2" />
<text  x="16.57" y="767.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::lower_bound (24 samples, 0.03%)</title><rect x="612.9" y="517" width="0.4" height="15.0" fill="rgb(219,134,24)" rx="2" ry="2" />
<text  x="615.94" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::max_size (38 samples, 0.04%)</title><rect x="510.9" y="309" width="0.5" height="15.0" fill="rgb(241,89,28)" rx="2" ry="2" />
<text  x="513.87" y="319.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (11 samples, 0.01%)</title><rect x="45.4" y="469" width="0.2" height="15.0" fill="rgb(247,62,52)" rx="2" ry="2" />
<text  x="48.40" y="479.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (89 samples, 0.10%)</title><rect x="598.2" y="581" width="1.2" height="15.0" fill="rgb(216,185,32)" rx="2" ry="2" />
<text  x="601.17" y="591.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (126 samples, 0.14%)</title><rect x="536.0" y="229" width="1.7" height="15.0" fill="rgb(238,142,50)" rx="2" ry="2" />
<text  x="539.04" y="239.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (105 samples, 0.12%)</title><rect x="1111.6" y="357" width="1.4" height="15.0" fill="rgb(251,136,4)" rx="2" ry="2" />
<text  x="1114.57" y="367.5" ></text>
</g>
<g >
<title>CHash160::Finalize (1,313 samples, 1.50%)</title><rect x="686.3" y="645" width="17.7" height="15.0" fill="rgb(244,30,36)" rx="2" ry="2" />
<text  x="689.27" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::_Vector_impl::~_Vector_impl (21 samples, 0.02%)</title><rect x="602.9" y="597" width="0.3" height="15.0" fill="rgb(212,205,49)" rx="2" ry="2" />
<text  x="605.91" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_key (59 samples, 0.07%)</title><rect x="981.1" y="629" width="0.8" height="15.0" fill="rgb(211,42,49)" rx="2" ry="2" />
<text  x="984.09" y="639.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (79 samples, 0.09%)</title><rect x="1030.1" y="389" width="1.0" height="15.0" fill="rgb(250,166,13)" rx="2" ry="2" />
<text  x="1033.08" y="399.5" ></text>
</g>
<g >
<title>CHash256::Write (164 samples, 0.19%)</title><rect x="183.1" y="197" width="2.3" height="15.0" fill="rgb(222,137,17)" rx="2" ry="2" />
<text  x="186.14" y="207.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (75 samples, 0.09%)</title><rect x="552.8" y="117" width="1.1" height="15.0" fill="rgb(252,83,47)" rx="2" ry="2" />
<text  x="555.85" y="127.5" ></text>
</g>
<g >
<title>__db_lget (30 samples, 0.03%)</title><rect x="154.6" y="485" width="0.4" height="15.0" fill="rgb(209,186,17)" rx="2" ry="2" />
<text  x="157.61" y="495.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock (37 samples, 0.04%)</title><rect x="944.8" y="549" width="0.5" height="15.0" fill="rgb(215,16,53)" rx="2" ry="2" />
<text  x="947.81" y="559.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (13 samples, 0.01%)</title><rect x="1147.2" y="693" width="0.1" height="15.0" fill="rgb(230,124,22)" rx="2" ry="2" />
<text  x="1150.17" y="703.5" ></text>
</g>
<g >
<title>__env_alloc (28 samples, 0.03%)</title><rect x="144.9" y="437" width="0.4" height="15.0" fill="rgb(232,31,25)" rx="2" ry="2" />
<text  x="147.94" y="447.5" ></text>
</g>
<g >
<title>__db_get (137 samples, 0.16%)</title><rect x="100.2" y="469" width="1.9" height="15.0" fill="rgb(207,111,24)" rx="2" ry="2" />
<text  x="103.22" y="479.5" ></text>
</g>
<g >
<title>CBlockHeader::Serialize&lt;CHashWriter&gt; (40 samples, 0.05%)</title><rect x="46.7" y="581" width="0.5" height="15.0" fill="rgb(209,57,41)" rx="2" ry="2" />
<text  x="49.71" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (23 samples, 0.03%)</title><rect x="1049.2" y="645" width="0.4" height="15.0" fill="rgb(208,170,40)" rx="2" ry="2" />
<text  x="1052.24" y="655.5" ></text>
</g>
<g >
<title>CWallet::LockChain (1,083 samples, 1.24%)</title><rect x="935.0" y="661" width="14.6" height="15.0" fill="rgb(216,175,1)" rx="2" ry="2" />
<text  x="937.99" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="56.3" y="517" width="0.2" height="15.0" fill="rgb(216,25,27)" rx="2" ry="2" />
<text  x="59.30" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_storage (21 samples, 0.02%)</title><rect x="1001.8" y="501" width="0.3" height="15.0" fill="rgb(239,129,35)" rx="2" ry="2" />
<text  x="1004.78" y="511.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (9 samples, 0.01%)</title><rect x="874.7" y="501" width="0.1" height="15.0" fill="rgb(253,32,6)" rx="2" ry="2" />
<text  x="877.70" y="511.5" ></text>
</g>
<g >
<title>__bam_search (237 samples, 0.27%)</title><rect x="165.5" y="501" width="3.2" height="15.0" fill="rgb(243,157,42)" rx="2" ry="2" />
<text  x="168.47" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (37 samples, 0.04%)</title><rect x="42.2" y="613" width="0.5" height="15.0" fill="rgb(211,158,16)" rx="2" ry="2" />
<text  x="45.17" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (87 samples, 0.10%)</title><rect x="657.2" y="485" width="1.2" height="15.0" fill="rgb(230,226,11)" rx="2" ry="2" />
<text  x="660.19" y="495.5" ></text>
</g>
<g >
<title>__libc_pwrite64 (40 samples, 0.05%)</title><rect x="135.7" y="421" width="0.5" height="15.0" fill="rgb(212,125,37)" rx="2" ry="2" />
<text  x="138.65" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (134 samples, 0.15%)</title><rect x="55.6" y="581" width="1.8" height="15.0" fill="rgb(218,209,5)" rx="2" ry="2" />
<text  x="58.64" y="591.5" ></text>
</g>
<g >
<title>__os_io (16 samples, 0.02%)</title><rect x="87.2" y="389" width="0.3" height="15.0" fill="rgb(235,33,48)" rx="2" ry="2" />
<text  x="90.25" y="399.5" ></text>
</g>
<g >
<title>__db_vrfy_childput (128 samples, 0.15%)</title><rect x="65.6" y="549" width="1.7" height="15.0" fill="rgb(253,43,23)" rx="2" ry="2" />
<text  x="68.56" y="559.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_Tuple_impl&lt;interfaces::Chain::Lock*&amp;, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, void&gt; (10 samples, 0.01%)</title><rect x="1159.8" y="757" width="0.2" height="15.0" fill="rgb(239,60,4)" rx="2" ry="2" />
<text  x="1162.83" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::~unique_ptr (257 samples, 0.29%)</title><rect x="983.3" y="661" width="3.5" height="15.0" fill="rgb(216,178,28)" rx="2" ry="2" />
<text  x="986.30" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (73 samples, 0.08%)</title><rect x="899.7" y="533" width="1.0" height="15.0" fill="rgb(212,216,40)" rx="2" ry="2" />
<text  x="902.74" y="543.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.02%)</title><rect x="112.1" y="309" width="0.2" height="15.0" fill="rgb(210,189,9)" rx="2" ry="2" />
<text  x="115.06" y="319.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (172 samples, 0.20%)</title><rect x="705.6" y="613" width="2.3" height="15.0" fill="rgb(237,174,28)" rx="2" ry="2" />
<text  x="708.60" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocator (36 samples, 0.04%)</title><rect x="1018.9" y="613" width="0.4" height="15.0" fill="rgb(251,151,2)" rx="2" ry="2" />
<text  x="1021.85" y="623.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (20 samples, 0.02%)</title><rect x="40.1" y="581" width="0.2" height="15.0" fill="rgb(216,22,52)" rx="2" ry="2" />
<text  x="43.05" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (18 samples, 0.02%)</title><rect x="98.1" y="357" width="0.3" height="15.0" fill="rgb(247,169,12)" rx="2" ry="2" />
<text  x="101.12" y="367.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, CBlockIndex*&gt;*, std::vector&lt;std::pair&lt;int, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;int, CBlockIndex*&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (10 samples, 0.01%)</title><rect x="52.6" y="613" width="0.2" height="15.0" fill="rgb(210,185,48)" rx="2" ry="2" />
<text  x="55.64" y="623.5" ></text>
</g>
<g >
<title>__addvdi3 (10 samples, 0.01%)</title><rect x="1037.3" y="661" width="0.1" height="15.0" fill="rgb(245,95,3)" rx="2" ry="2" />
<text  x="1040.29" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (9 samples, 0.01%)</title><rect x="859.1" y="325" width="0.2" height="15.0" fill="rgb(218,57,9)" rx="2" ry="2" />
<text  x="862.13" y="335.5" ></text>
</g>
<g >
<title>CHash256::Write (9 samples, 0.01%)</title><rect x="540.4" y="277" width="0.1" height="15.0" fill="rgb(206,100,2)" rx="2" ry="2" />
<text  x="543.35" y="287.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::lower_bound (56 samples, 0.06%)</title><rect x="654.7" y="549" width="0.7" height="15.0" fill="rgb(206,10,10)" rx="2" ry="2" />
<text  x="657.69" y="559.5" ></text>
</g>
<g >
<title>__env_close (11 samples, 0.01%)</title><rect x="180.8" y="453" width="0.1" height="15.0" fill="rgb(244,117,19)" rx="2" ry="2" />
<text  x="183.78" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;CScriptID const, CScript&gt;::pair&lt;CScriptID const&amp;, 0ul&gt; (21 samples, 0.02%)</title><rect x="827.1" y="517" width="0.3" height="15.0" fill="rgb(238,105,50)" rx="2" ry="2" />
<text  x="830.10" y="527.5" ></text>
</g>
<g >
<title>operator+ (8 samples, 0.01%)</title><rect x="32.6" y="661" width="0.1" height="15.0" fill="rgb(247,115,37)" rx="2" ry="2" />
<text  x="35.64" y="671.5" ></text>
</g>
<g >
<title>__env_open (19 samples, 0.02%)</title><rect x="1104.7" y="645" width="0.2" height="15.0" fill="rgb(207,48,11)" rx="2" ry="2" />
<text  x="1107.68" y="655.5" ></text>
</g>
<g >
<title>SaltedIDHasher::operator (144 samples, 0.16%)</title><rect x="841.6" y="581" width="2.0" height="15.0" fill="rgb(214,69,20)" rx="2" ry="2" />
<text  x="844.63" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::destroy&lt;char&gt; (86 samples, 0.10%)</title><rect x="649.8" y="533" width="1.1" height="15.0" fill="rgb(219,10,42)" rx="2" ry="2" />
<text  x="652.75" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10 samples, 0.01%)</title><rect x="49.1" y="533" width="0.1" height="15.0" fill="rgb(221,66,40)" rx="2" ry="2" />
<text  x="52.07" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (12 samples, 0.01%)</title><rect x="1161.7" y="757" width="0.2" height="15.0" fill="rgb(233,129,14)" rx="2" ry="2" />
<text  x="1164.73" y="767.5" ></text>
</g>
<g >
<title>std::tuple&lt;char*&amp;&amp;&gt;::tuple (10 samples, 0.01%)</title><rect x="680.6" y="469" width="0.1" height="15.0" fill="rgb(238,217,41)" rx="2" ry="2" />
<text  x="683.61" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;interfaces::Chain::Lock*&amp;&gt; (9 samples, 0.01%)</title><rect x="948.5" y="581" width="0.1" height="15.0" fill="rgb(226,69,12)" rx="2" ry="2" />
<text  x="951.48" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (8 samples, 0.01%)</title><rect x="535.0" y="245" width="0.1" height="15.0" fill="rgb(219,87,45)" rx="2" ry="2" />
<text  x="538.03" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_value (54 samples, 0.06%)</title><rect x="730.8" y="517" width="0.7" height="15.0" fill="rgb(206,132,51)" rx="2" ry="2" />
<text  x="733.76" y="527.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (1,275 samples, 1.46%)</title><rect x="787.4" y="565" width="17.2" height="15.0" fill="rgb(215,184,10)" rx="2" ry="2" />
<text  x="790.40" y="575.5" ></text>
</g>
<g >
<title>std::distance&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (40 samples, 0.05%)</title><rect x="1095.1" y="629" width="0.6" height="15.0" fill="rgb(220,61,11)" rx="2" ry="2" />
<text  x="1098.11" y="639.5" ></text>
</g>
<g >
<title>CTxOut::~CTxOut (12 samples, 0.01%)</title><rect x="1032.9" y="549" width="0.1" height="15.0" fill="rgb(225,15,43)" rx="2" ry="2" />
<text  x="1035.87" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (12 samples, 0.01%)</title><rect x="550.8" y="293" width="0.2" height="15.0" fill="rgb(216,15,39)" rx="2" ry="2" />
<text  x="553.84" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::end (11 samples, 0.01%)</title><rect x="932.2" y="645" width="0.2" height="15.0" fill="rgb(207,141,43)" rx="2" ry="2" />
<text  x="935.24" y="655.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (26 samples, 0.03%)</title><rect x="528.6" y="117" width="0.4" height="15.0" fill="rgb(240,207,27)" rx="2" ry="2" />
<text  x="531.63" y="127.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (26 samples, 0.03%)</title><rect x="531.4" y="85" width="0.4" height="15.0" fill="rgb(215,3,19)" rx="2" ry="2" />
<text  x="534.41" y="95.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (528 samples, 0.60%)</title><rect x="543.9" y="325" width="7.2" height="15.0" fill="rgb(236,148,48)" rx="2" ry="2" />
<text  x="546.94" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (24 samples, 0.03%)</title><rect x="931.7" y="645" width="0.3" height="15.0" fill="rgb(215,34,50)" rx="2" ry="2" />
<text  x="934.72" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (22 samples, 0.03%)</title><rect x="816.8" y="453" width="0.3" height="15.0" fill="rgb(222,204,26)" rx="2" ry="2" />
<text  x="819.83" y="463.5" ></text>
</g>
<g >
<title>std::mutex::unlock (13 samples, 0.01%)</title><rect x="728.4" y="565" width="0.1" height="15.0" fill="rgb(225,204,48)" rx="2" ry="2" />
<text  x="731.36" y="575.5" ></text>
</g>
<g >
<title>__memp_pgread (56 samples, 0.06%)</title><rect x="98.8" y="389" width="0.7" height="15.0" fill="rgb(245,167,8)" rx="2" ry="2" />
<text  x="101.78" y="399.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (38 samples, 0.04%)</title><rect x="557.4" y="245" width="0.5" height="15.0" fill="rgb(225,110,8)" rx="2" ry="2" />
<text  x="560.37" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (39 samples, 0.04%)</title><rect x="859.8" y="309" width="0.6" height="15.0" fill="rgb(217,149,9)" rx="2" ry="2" />
<text  x="862.85" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_key (23 samples, 0.03%)</title><rect x="979.8" y="613" width="0.3" height="15.0" fill="rgb(228,55,39)" rx="2" ry="2" />
<text  x="982.83" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (12 samples, 0.01%)</title><rect x="152.5" y="469" width="0.2" height="15.0" fill="rgb(235,71,31)" rx="2" ry="2" />
<text  x="155.51" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (14 samples, 0.02%)</title><rect x="145.4" y="421" width="0.2" height="15.0" fill="rgb(248,74,32)" rx="2" ry="2" />
<text  x="148.44" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (11 samples, 0.01%)</title><rect x="884.9" y="645" width="0.2" height="15.0" fill="rgb(207,67,34)" rx="2" ry="2" />
<text  x="887.93" y="655.5" ></text>
</g>
<g >
<title>__memp_fget (9 samples, 0.01%)</title><rect x="163.8" y="453" width="0.1" height="15.0" fill="rgb(252,108,38)" rx="2" ry="2" />
<text  x="166.79" y="463.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (447 samples, 0.51%)</title><rect x="106.7" y="453" width="6.0" height="15.0" fill="rgb(208,58,45)" rx="2" ry="2" />
<text  x="109.68" y="463.5" ></text>
</g>
<g >
<title>Strengthen (398 samples, 0.45%)</title><rect x="1184.2" y="613" width="5.4" height="15.0" fill="rgb(219,222,43)" rx="2" ry="2" />
<text  x="1187.21" y="623.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CScript&gt; (89 samples, 0.10%)</title><rect x="1033.9" y="453" width="1.2" height="15.0" fill="rgb(234,228,3)" rx="2" ry="2" />
<text  x="1036.87" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (18 samples, 0.02%)</title><rect x="1020.4" y="613" width="0.2" height="15.0" fill="rgb(236,218,2)" rx="2" ry="2" />
<text  x="1023.38" y="623.5" ></text>
</g>
<g >
<title>__db_cursor_int (26 samples, 0.03%)</title><rect x="89.4" y="453" width="0.3" height="15.0" fill="rgb(251,115,17)" rx="2" ry="2" />
<text  x="92.36" y="463.5" ></text>
</g>
<g >
<title>__uint32_identity (8 samples, 0.01%)</title><rect x="468.3" y="357" width="0.1" height="15.0" fill="rgb(206,36,47)" rx="2" ry="2" />
<text  x="471.34" y="367.5" ></text>
</g>
<g >
<title>CHashWriter::write (19 samples, 0.02%)</title><rect x="527.9" y="101" width="0.3" height="15.0" fill="rgb(236,8,16)" rx="2" ry="2" />
<text  x="530.92" y="111.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (22 samples, 0.03%)</title><rect x="1056.9" y="565" width="0.3" height="15.0" fill="rgb(221,150,14)" rx="2" ry="2" />
<text  x="1059.88" y="575.5" ></text>
</g>
<g >
<title>__os_malloc (14 samples, 0.02%)</title><rect x="97.8" y="357" width="0.2" height="15.0" fill="rgb(206,167,14)" rx="2" ry="2" />
<text  x="100.78" y="367.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (164 samples, 0.19%)</title><rect x="180.9" y="165" width="2.2" height="15.0" fill="rgb(222,109,51)" rx="2" ry="2" />
<text  x="183.93" y="175.5" ></text>
</g>
<g >
<title>Dbt::get_data (24 samples, 0.03%)</title><rect x="189.2" y="661" width="0.3" height="15.0" fill="rgb(210,56,31)" rx="2" ry="2" />
<text  x="192.15" y="671.5" ></text>
</g>
<g >
<title>std::make_pair&lt;long&amp;, CWalletTx*&gt; (34 samples, 0.04%)</title><rect x="963.6" y="661" width="0.5" height="15.0" fill="rgb(239,177,38)" rx="2" ry="2" />
<text  x="966.63" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (15 samples, 0.02%)</title><rect x="517.2" y="405" width="0.2" height="15.0" fill="rgb(239,13,10)" rx="2" ry="2" />
<text  x="520.23" y="415.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (28 samples, 0.03%)</title><rect x="808.2" y="437" width="0.4" height="15.0" fill="rgb(229,190,42)" rx="2" ry="2" />
<text  x="811.18" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (31 samples, 0.04%)</title><rect x="1167.0" y="757" width="0.4" height="15.0" fill="rgb(239,81,23)" rx="2" ry="2" />
<text  x="1170.00" y="767.5" ></text>
</g>
<g >
<title>CSipHasher::Finalize (30 samples, 0.03%)</title><rect x="889.8" y="597" width="0.4" height="15.0" fill="rgb(222,80,37)" rx="2" ry="2" />
<text  x="892.78" y="607.5" ></text>
</g>
<g >
<title>push_lock (440 samples, 0.50%)</title><rect x="938.3" y="549" width="5.9" height="15.0" fill="rgb(235,179,27)" rx="2" ry="2" />
<text  x="941.27" y="559.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="402.6" y="565" width="0.1" height="15.0" fill="rgb(227,2,23)" rx="2" ry="2" />
<text  x="405.57" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;CChainState, std::default_delete&lt;CChainState&gt; &gt;::operator bool (8 samples, 0.01%)</title><rect x="57.4" y="597" width="0.2" height="15.0" fill="rgb(251,61,23)" rx="2" ry="2" />
<text  x="60.45" y="607.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (23 samples, 0.03%)</title><rect x="578.5" y="597" width="0.3" height="15.0" fill="rgb(238,191,22)" rx="2" ry="2" />
<text  x="581.48" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::find (59 samples, 0.07%)</title><rect x="682.6" y="549" width="0.8" height="15.0" fill="rgb(214,222,2)" rx="2" ry="2" />
<text  x="685.55" y="559.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (63 samples, 0.07%)</title><rect x="734.6" y="645" width="0.8" height="15.0" fill="rgb(229,95,41)" rx="2" ry="2" />
<text  x="737.56" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (10 samples, 0.01%)</title><rect x="1179.0" y="741" width="0.2" height="15.0" fill="rgb(214,198,48)" rx="2" ry="2" />
<text  x="1182.04" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (16 samples, 0.02%)</title><rect x="1020.4" y="597" width="0.2" height="15.0" fill="rgb(234,37,39)" rx="2" ry="2" />
<text  x="1023.40" y="607.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Serialize&lt;CSizeComputer&gt; (14 samples, 0.02%)</title><rect x="1028.4" y="357" width="0.2" height="15.0" fill="rgb(254,32,24)" rx="2" ry="2" />
<text  x="1031.45" y="367.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.01%)</title><rect x="136.7" y="341" width="0.1" height="15.0" fill="rgb(220,88,39)" rx="2" ry="2" />
<text  x="139.70" y="351.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getBlockHeight (43 samples, 0.05%)</title><rect x="34.1" y="613" width="0.5" height="15.0" fill="rgb(222,70,26)" rx="2" ry="2" />
<text  x="37.05" y="623.5" ></text>
</g>
<g >
<title>__bam_split (13 samples, 0.01%)</title><rect x="66.0" y="485" width="0.2" height="15.0" fill="rgb(223,5,11)" rx="2" ry="2" />
<text  x="69.03" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (15 samples, 0.02%)</title><rect x="608.0" y="597" width="0.2" height="15.0" fill="rgb(236,199,19)" rx="2" ry="2" />
<text  x="610.98" y="607.5" ></text>
</g>
<g >
<title>[unknown] (38 samples, 0.04%)</title><rect x="178.9" y="469" width="0.5" height="15.0" fill="rgb(241,79,51)" rx="2" ry="2" />
<text  x="181.94" y="479.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (44 samples, 0.05%)</title><rect x="162.8" y="501" width="0.6" height="15.0" fill="rgb(247,45,7)" rx="2" ry="2" />
<text  x="165.85" y="511.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (641 samples, 0.73%)</title><rect x="525.9" y="309" width="8.7" height="15.0" fill="rgb(250,117,37)" rx="2" ry="2" />
<text  x="528.95" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_valptr (46 samples, 0.05%)</title><rect x="832.6" y="485" width="0.6" height="15.0" fill="rgb(223,119,9)" rx="2" ry="2" />
<text  x="835.61" y="495.5" ></text>
</g>
<g >
<title>[unknown] (46 samples, 0.05%)</title><rect x="146.4" y="389" width="0.6" height="15.0" fill="rgb(231,89,29)" rx="2" ry="2" />
<text  x="149.38" y="399.5" ></text>
</g>
<g >
<title>CSHA256::Write (15 samples, 0.02%)</title><rect x="550.0" y="229" width="0.2" height="15.0" fill="rgb(227,101,28)" rx="2" ry="2" />
<text  x="553.00" y="239.5" ></text>
</g>
<g >
<title>_start (39 samples, 0.04%)</title><rect x="1149.3" y="757" width="0.6" height="15.0" fill="rgb(224,4,18)" rx="2" ry="2" />
<text  x="1152.34" y="767.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (82 samples, 0.09%)</title><rect x="742.2" y="597" width="1.1" height="15.0" fill="rgb(218,14,32)" rx="2" ry="2" />
<text  x="745.16" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, char*&amp;&amp;&gt;::_Tuple_impl&lt;char*&gt; (11 samples, 0.01%)</title><rect x="1086.6" y="501" width="0.1" height="15.0" fill="rgb(228,94,43)" rx="2" ry="2" />
<text  x="1089.58" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (13 samples, 0.01%)</title><rect x="1092.2" y="661" width="0.1" height="15.0" fill="rgb(213,87,25)" rx="2" ry="2" />
<text  x="1095.16" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char* const&amp;&gt;, std::tuple&lt;&gt; &gt; (27 samples, 0.03%)</title><rect x="679.5" y="501" width="0.4" height="15.0" fill="rgb(249,47,47)" rx="2" ry="2" />
<text  x="682.51" y="511.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (58 samples, 0.07%)</title><rect x="184.2" y="133" width="0.8" height="15.0" fill="rgb(241,207,7)" rx="2" ry="2" />
<text  x="187.22" y="143.5" ></text>
</g>
<g >
<title>__db_cursor_int (19 samples, 0.02%)</title><rect x="116.5" y="453" width="0.2" height="15.0" fill="rgb(249,78,49)" rx="2" ry="2" />
<text  x="119.49" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="885.7" y="629" width="0.2" height="15.0" fill="rgb(217,182,18)" rx="2" ry="2" />
<text  x="888.72" y="639.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (38 samples, 0.04%)</title><rect x="1121.0" y="581" width="0.6" height="15.0" fill="rgb(239,109,36)" rx="2" ry="2" />
<text  x="1124.04" y="591.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (12 samples, 0.01%)</title><rect x="574.7" y="581" width="0.2" height="15.0" fill="rgb(237,148,19)" rx="2" ry="2" />
<text  x="577.72" y="591.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;interfaces::Chain::Lock&gt;, true&gt;::_Head_base&lt;std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (11 samples, 0.01%)</title><rect x="948.2" y="549" width="0.2" height="15.0" fill="rgb(248,144,36)" rx="2" ry="2" />
<text  x="951.24" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char&gt; (21 samples, 0.02%)</title><rect x="453.3" y="469" width="0.2" height="15.0" fill="rgb(210,52,32)" rx="2" ry="2" />
<text  x="456.26" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (11 samples, 0.01%)</title><rect x="509.2" y="325" width="0.1" height="15.0" fill="rgb(209,1,42)" rx="2" ry="2" />
<text  x="512.17" y="335.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.02%)</title><rect x="1143.9" y="293" width="0.2" height="15.0" fill="rgb(212,222,44)" rx="2" ry="2" />
<text  x="1146.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (9 samples, 0.01%)</title><rect x="924.0" y="549" width="0.1" height="15.0" fill="rgb(238,198,38)" rx="2" ry="2" />
<text  x="926.98" y="559.5" ></text>
</g>
<g >
<title>Shuffle (9 samples, 0.01%)</title><rect x="1143.5" y="165" width="0.1" height="15.0" fill="rgb(238,213,13)" rx="2" ry="2" />
<text  x="1146.49" y="175.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="160.1" y="437" width="0.1" height="15.0" fill="rgb(216,100,3)" rx="2" ry="2" />
<text  x="163.10" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="127.1" y="485" width="0.2" height="15.0" fill="rgb(214,62,49)" rx="2" ry="2" />
<text  x="130.15" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned int&gt; &gt;::deallocate (12 samples, 0.01%)</title><rect x="685.5" y="597" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="688.47" y="607.5" ></text>
</g>
<g >
<title>__db_vrfy_overflow (116 samples, 0.13%)</title><rect x="162.7" y="581" width="1.6" height="15.0" fill="rgb(240,120,1)" rx="2" ry="2" />
<text  x="165.71" y="591.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CKeyPool&amp;&gt; (10 samples, 0.01%)</title><rect x="403.7" y="661" width="0.1" height="15.0" fill="rgb(236,136,35)" rx="2" ry="2" />
<text  x="406.67" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr (37 samples, 0.04%)</title><rect x="1017.9" y="661" width="0.5" height="15.0" fill="rgb(205,14,14)" rx="2" ry="2" />
<text  x="1020.92" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (44 samples, 0.05%)</title><rect x="660.3" y="485" width="0.6" height="15.0" fill="rgb(220,43,14)" rx="2" ry="2" />
<text  x="663.28" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="575.2" y="565" width="0.1" height="15.0" fill="rgb(218,143,34)" rx="2" ry="2" />
<text  x="578.20" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (16 samples, 0.02%)</title><rect x="840.2" y="581" width="0.2" height="15.0" fill="rgb(219,55,36)" rx="2" ry="2" />
<text  x="843.21" y="591.5" ></text>
</g>
<g >
<title>__db_get (803 samples, 0.92%)</title><rect x="89.3" y="485" width="10.8" height="15.0" fill="rgb(230,30,39)" rx="2" ry="2" />
<text  x="92.32" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, unsigned long, true&gt;::_S_equals (70 samples, 0.08%)</title><rect x="920.6" y="517" width="0.9" height="15.0" fill="rgb(249,30,50)" rx="2" ry="2" />
<text  x="923.56" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::max_size (93 samples, 0.11%)</title><rect x="505.4" y="293" width="1.2" height="15.0" fill="rgb(212,34,18)" rx="2" ry="2" />
<text  x="508.36" y="303.5" ></text>
</g>
<g >
<title>__bam_defcmp (14 samples, 0.02%)</title><rect x="149.5" y="453" width="0.2" height="15.0" fill="rgb(219,34,19)" rx="2" ry="2" />
<text  x="152.55" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_key_compare&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_key_compare (8 samples, 0.01%)</title><rect x="1000.1" y="485" width="0.1" height="15.0" fill="rgb(238,135,21)" rx="2" ry="2" />
<text  x="1003.05" y="495.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, unsigned int&amp;&gt; (60 samples, 0.07%)</title><rect x="43.8" y="565" width="0.8" height="15.0" fill="rgb(244,45,20)" rx="2" ry="2" />
<text  x="46.83" y="575.5" ></text>
</g>
<g >
<title>CSHA256::Write (315 samples, 0.36%)</title><rect x="1105.0" y="405" width="4.2" height="15.0" fill="rgb(241,199,45)" rx="2" ry="2" />
<text  x="1107.95" y="415.5" ></text>
</g>
<g >
<title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (164 samples, 0.19%)</title><rect x="180.9" y="373" width="2.2" height="15.0" fill="rgb(219,155,45)" rx="2" ry="2" />
<text  x="183.93" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::begin (11 samples, 0.01%)</title><rect x="1065.3" y="677" width="0.2" height="15.0" fill="rgb(248,102,6)" rx="2" ry="2" />
<text  x="1068.33" y="687.5" ></text>
</g>
<g >
<title>CSHA256::Write (21 samples, 0.02%)</title><rect x="46.8" y="453" width="0.3" height="15.0" fill="rgb(235,223,45)" rx="2" ry="2" />
<text  x="49.82" y="463.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (18 samples, 0.02%)</title><rect x="154.3" y="437" width="0.3" height="15.0" fill="rgb(252,11,13)" rx="2" ry="2" />
<text  x="157.33" y="447.5" ></text>
</g>
<g >
<title>CWalletTx::CWalletTx (318 samples, 0.36%)</title><rect x="1015.1" y="677" width="4.2" height="15.0" fill="rgb(210,84,8)" rx="2" ry="2" />
<text  x="1018.05" y="687.5" ></text>
</g>
<g >
<title>LockedPool::alloc (498 samples, 0.57%)</title><rect x="611.3" y="549" width="6.8" height="15.0" fill="rgb(223,225,40)" rx="2" ry="2" />
<text  x="614.35" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (8 samples, 0.01%)</title><rect x="88.0" y="437" width="0.1" height="15.0" fill="rgb(213,43,43)" rx="2" ry="2" />
<text  x="90.96" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (11 samples, 0.01%)</title><rect x="592.7" y="533" width="0.1" height="15.0" fill="rgb(230,180,20)" rx="2" ry="2" />
<text  x="595.68" y="543.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (57 samples, 0.07%)</title><rect x="43.8" y="533" width="0.8" height="15.0" fill="rgb(227,84,4)" rx="2" ry="2" />
<text  x="46.84" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::_M_erase_at_end (16 samples, 0.02%)</title><rect x="572.7" y="565" width="0.2" height="15.0" fill="rgb(244,79,9)" rx="2" ry="2" />
<text  x="575.68" y="575.5" ></text>
</g>
<g >
<title>__memp_fput (168 samples, 0.19%)</title><rect x="372.1" y="613" width="2.3" height="15.0" fill="rgb(216,118,43)" rx="2" ry="2" />
<text  x="375.09" y="623.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (17 samples, 0.02%)</title><rect x="1103.5" y="661" width="0.2" height="15.0" fill="rgb(237,160,37)" rx="2" ry="2" />
<text  x="1106.47" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; (12 samples, 0.01%)</title><rect x="830.0" y="565" width="0.1" height="15.0" fill="rgb(233,98,46)" rx="2" ry="2" />
<text  x="832.97" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (26 samples, 0.03%)</title><rect x="469.7" y="309" width="0.3" height="15.0" fill="rgb(217,140,14)" rx="2" ry="2" />
<text  x="472.70" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::vector&lt;char const*, void&gt; (133 samples, 0.15%)</title><rect x="39.8" y="629" width="1.8" height="15.0" fill="rgb(231,189,7)" rx="2" ry="2" />
<text  x="42.85" y="639.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (8 samples, 0.01%)</title><rect x="1020.9" y="613" width="0.1" height="15.0" fill="rgb(240,220,27)" rx="2" ry="2" />
<text  x="1023.87" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (2,246 samples, 2.57%)</title><rect x="414.1" y="549" width="30.3" height="15.0" fill="rgb(205,172,7)" rx="2" ry="2" />
<text  x="417.12" y="559.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (21 samples, 0.02%)</title><rect x="1005.0" y="629" width="0.3" height="15.0" fill="rgb(249,116,20)" rx="2" ry="2" />
<text  x="1008.01" y="639.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CScript&amp;&gt; (172 samples, 0.20%)</title><rect x="409.9" y="661" width="2.3" height="15.0" fill="rgb(213,131,26)" rx="2" ry="2" />
<text  x="412.92" y="671.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (17 samples, 0.02%)</title><rect x="1151.1" y="757" width="0.2" height="15.0" fill="rgb(208,95,7)" rx="2" ry="2" />
<text  x="1154.08" y="767.5" ></text>
</g>
<g >
<title>CWallet::CreateWalletFromFile (68,239 samples, 77.93%)</title><rect x="185.4" y="741" width="919.6" height="15.0" fill="rgb(216,53,20)" rx="2" ry="2" />
<text  x="188.35" y="751.5" >CWallet::CreateWalletFromFile</text>
</g>
<g >
<title>atoi64 (29 samples, 0.03%)</title><rect x="583.9" y="629" width="0.4" height="15.0" fill="rgb(239,226,44)" rx="2" ry="2" />
<text  x="586.92" y="639.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, unsigned char, secure_allocator&lt;unsigned char&gt; &gt; (1,765 samples, 2.02%)</title><rect x="610.1" y="645" width="23.8" height="15.0" fill="rgb(243,205,35)" rx="2" ry="2" />
<text  x="613.12" y="655.5" >U..</text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;unsigned char const*&gt; (120 samples, 0.14%)</title><rect x="815.1" y="437" width="1.6" height="15.0" fill="rgb(211,190,39)" rx="2" ry="2" />
<text  x="818.09" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::_S_construct&lt;unsigned char&gt; (127 samples, 0.15%)</title><rect x="865.1" y="437" width="1.7" height="15.0" fill="rgb(237,43,6)" rx="2" ry="2" />
<text  x="868.12" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTransaction&gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (328 samples, 0.37%)</title><rect x="180.9" y="597" width="4.5" height="15.0" fill="rgb(206,53,2)" rx="2" ry="2" />
<text  x="183.93" y="607.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::WalletClientImpl::start (206 samples, 0.24%)</title><rect x="55.0" y="725" width="2.8" height="15.0" fill="rgb(225,174,49)" rx="2" ry="2" />
<text  x="58.01" y="735.5" ></text>
</g>
<g >
<title>ReadWriteAsHelper&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="475.7" y="229" width="0.1" height="15.0" fill="rgb(225,209,37)" rx="2" ry="2" />
<text  x="478.68" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (85 samples, 0.10%)</title><rect x="410.6" y="501" width="1.1" height="15.0" fill="rgb(224,139,40)" rx="2" ry="2" />
<text  x="413.55" y="511.5" ></text>
</g>
<g >
<title>__bam_search (17 samples, 0.02%)</title><rect x="65.7" y="469" width="0.2" height="15.0" fill="rgb(254,84,54)" rx="2" ry="2" />
<text  x="68.67" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::find (740 samples, 0.85%)</title><rect x="1004.8" y="661" width="10.0" height="15.0" fill="rgb(232,80,22)" rx="2" ry="2" />
<text  x="1007.82" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (11 samples, 0.01%)</title><rect x="677.7" y="453" width="0.2" height="15.0" fill="rgb(209,166,26)" rx="2" ry="2" />
<text  x="680.70" y="463.5" ></text>
</g>
<g >
<title>CScriptWitness::~CScriptWitness (36 samples, 0.04%)</title><rect x="1025.9" y="533" width="0.5" height="15.0" fill="rgb(247,21,51)" rx="2" ry="2" />
<text  x="1028.90" y="543.5" ></text>
</g>
<g >
<title>std::set&lt;CBlockIndex*, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::count (20 samples, 0.02%)</title><rect x="54.7" y="677" width="0.3" height="15.0" fill="rgb(209,165,45)" rx="2" ry="2" />
<text  x="57.71" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_begin (8 samples, 0.01%)</title><rect x="908.5" y="581" width="0.1" height="15.0" fill="rgb(234,210,52)" rx="2" ry="2" />
<text  x="911.47" y="591.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (16 samples, 0.02%)</title><rect x="553.3" y="85" width="0.2" height="15.0" fill="rgb(229,93,2)" rx="2" ry="2" />
<text  x="556.28" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (318 samples, 0.36%)</title><rect x="676.9" y="533" width="4.2" height="15.0" fill="rgb(216,227,25)" rx="2" ry="2" />
<text  x="679.85" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;BerkeleyDatabase, std::default_delete&lt;BerkeleyDatabase&gt; &gt;::~unique_ptr (11 samples, 0.01%)</title><rect x="180.8" y="677" width="0.1" height="15.0" fill="rgb(218,180,20)" rx="2" ry="2" />
<text  x="183.78" y="687.5" ></text>
</g>
<g >
<title>CHash160::Write (9 samples, 0.01%)</title><rect x="704.0" y="645" width="0.1" height="15.0" fill="rgb(242,198,9)" rx="2" ry="2" />
<text  x="706.97" y="655.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10 samples, 0.01%)</title><rect x="601.4" y="565" width="0.1" height="15.0" fill="rgb(253,91,20)" rx="2" ry="2" />
<text  x="604.36" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTransaction&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="549" width="13.8" height="15.0" fill="rgb(221,221,44)" rx="2" ry="2" />
<text  x="1107.95" y="559.5" ></text>
</g>
<g >
<title>BerkeleyEnvironment::Verify (9,098 samples, 10.39%)</title><rect x="57.8" y="645" width="122.6" height="15.0" fill="rgb(227,77,19)" rx="2" ry="2" />
<text  x="60.79" y="655.5" >BerkeleyEnviron..</text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (773 samples, 0.88%)</title><rect x="280.0" y="549" width="10.4" height="15.0" fill="rgb(205,129,33)" rx="2" ry="2" />
<text  x="282.95" y="559.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::lower_bound (86 samples, 0.10%)</title><rect x="582.6" y="597" width="1.2" height="15.0" fill="rgb(243,176,0)" rx="2" ry="2" />
<text  x="585.63" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::max_size (83 samples, 0.09%)</title><rect x="322.1" y="565" width="1.1" height="15.0" fill="rgb(248,122,41)" rx="2" ry="2" />
<text  x="325.07" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char*&amp;&amp;&gt; (8 samples, 0.01%)</title><rect x="1085.6" y="453" width="0.1" height="15.0" fill="rgb(209,164,40)" rx="2" ry="2" />
<text  x="1088.56" y="463.5" ></text>
</g>
<g >
<title>CWalletTx::Unserialize&lt;CDataStream&gt; (36 samples, 0.04%)</title><rect x="19.8" y="757" width="0.5" height="15.0" fill="rgb(253,46,25)" rx="2" ry="2" />
<text  x="22.84" y="767.5" ></text>
</g>
<g >
<title>GetSerializeSize&lt;CTransaction&gt; (10 samples, 0.01%)</title><rect x="21.1" y="757" width="0.1" height="15.0" fill="rgb(209,25,21)" rx="2" ry="2" />
<text  x="24.05" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::__normal_iterator (16 samples, 0.02%)</title><rect x="1036.7" y="517" width="0.2" height="15.0" fill="rgb(237,159,18)" rx="2" ry="2" />
<text  x="1039.70" y="527.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (734 samples, 0.84%)</title><rect x="524.7" y="325" width="9.9" height="15.0" fill="rgb(224,122,48)" rx="2" ry="2" />
<text  x="527.70" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (10 samples, 0.01%)</title><rect x="587.1" y="549" width="0.1" height="15.0" fill="rgb(205,90,1)" rx="2" ry="2" />
<text  x="590.10" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_ptr (10 samples, 0.01%)</title><rect x="947.4" y="613" width="0.1" height="15.0" fill="rgb(232,72,53)" rx="2" ry="2" />
<text  x="950.39" y="623.5" ></text>
</g>
<g >
<title>pop_lock (10 samples, 0.01%)</title><rect x="882.0" y="613" width="0.1" height="15.0" fill="rgb(236,33,7)" rx="2" ry="2" />
<text  x="885.00" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (9 samples, 0.01%)</title><rect x="933.3" y="549" width="0.1" height="15.0" fill="rgb(239,73,15)" rx="2" ry="2" />
<text  x="936.31" y="559.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (8 samples, 0.01%)</title><rect x="581.5" y="581" width="0.1" height="15.0" fill="rgb(253,30,10)" rx="2" ry="2" />
<text  x="584.46" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (38 samples, 0.04%)</title><rect x="1047.9" y="613" width="0.5" height="15.0" fill="rgb(205,194,27)" rx="2" ry="2" />
<text  x="1050.89" y="623.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="261" width="3.8" height="15.0" fill="rgb(237,58,28)" rx="2" ry="2" />
<text  x="1142.99" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (27 samples, 0.03%)</title><rect x="658.6" y="469" width="0.3" height="15.0" fill="rgb(249,141,43)" rx="2" ry="2" />
<text  x="661.58" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (48 samples, 0.05%)</title><rect x="822.2" y="565" width="0.7" height="15.0" fill="rgb(217,148,9)" rx="2" ry="2" />
<text  x="825.24" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTransaction&gt; &gt;::destroy&lt;CTransaction const&gt; (49 samples, 0.06%)</title><rect x="570.7" y="501" width="0.7" height="15.0" fill="rgb(247,55,8)" rx="2" ry="2" />
<text  x="573.74" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_left (25 samples, 0.03%)</title><rect x="970.1" y="613" width="0.3" height="15.0" fill="rgb(212,102,31)" rx="2" ry="2" />
<text  x="973.10" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="48.2" y="565" width="0.1" height="15.0" fill="rgb(213,44,21)" rx="2" ry="2" />
<text  x="51.18" y="575.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (105 samples, 0.12%)</title><rect x="131.3" y="469" width="1.4" height="15.0" fill="rgb(207,223,15)" rx="2" ry="2" />
<text  x="134.29" y="479.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void* const&amp;, void*&amp;&gt; (14 samples, 0.02%)</title><rect x="728.5" y="581" width="0.2" height="15.0" fill="rgb(211,97,46)" rx="2" ry="2" />
<text  x="731.54" y="591.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (109 samples, 0.12%)</title><rect x="547.7" y="181" width="1.5" height="15.0" fill="rgb(223,93,27)" rx="2" ry="2" />
<text  x="550.69" y="191.5" ></text>
</g>
<g >
<title>__lock_get (19 samples, 0.02%)</title><rect x="100.9" y="373" width="0.2" height="15.0" fill="rgb(213,60,28)" rx="2" ry="2" />
<text  x="103.86" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt;::_Hash_node (22 samples, 0.03%)</title><rect x="927.2" y="549" width="0.3" height="15.0" fill="rgb(243,146,45)" rx="2" ry="2" />
<text  x="930.21" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_default_append (8 samples, 0.01%)</title><rect x="1181.5" y="757" width="0.1" height="15.0" fill="rgb(230,217,39)" rx="2" ry="2" />
<text  x="1184.50" y="767.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;CTransaction const, std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="709" width="8.0" height="15.0" fill="rgb(223,36,50)" rx="2" ry="2" />
<text  x="1138.80" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (14 samples, 0.02%)</title><rect x="1065.8" y="645" width="0.2" height="15.0" fill="rgb(210,163,47)" rx="2" ry="2" />
<text  x="1068.82" y="655.5" ></text>
</g>
<g >
<title>__bam_iitem (8 samples, 0.01%)</title><rect x="164.1" y="501" width="0.1" height="15.0" fill="rgb(207,152,14)" rx="2" ry="2" />
<text  x="167.13" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (29 samples, 0.03%)</title><rect x="508.8" y="261" width="0.3" height="15.0" fill="rgb(250,37,28)" rx="2" ry="2" />
<text  x="511.75" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (25 samples, 0.03%)</title><rect x="565.9" y="453" width="0.3" height="15.0" fill="rgb(210,170,31)" rx="2" ry="2" />
<text  x="568.91" y="463.5" ></text>
</g>
<g >
<title>__env_alloc (9 samples, 0.01%)</title><rect x="1104.7" y="597" width="0.1" height="15.0" fill="rgb(225,197,22)" rx="2" ry="2" />
<text  x="1107.71" y="607.5" ></text>
</g>
<g >
<title>__subvdi3 (8 samples, 0.01%)</title><rect x="198.7" y="629" width="0.1" height="15.0" fill="rgb(237,4,40)" rx="2" ry="2" />
<text  x="201.65" y="639.5" ></text>
</g>
<g >
<title>__memp_alloc (207 samples, 0.24%)</title><rect x="143.5" y="453" width="2.8" height="15.0" fill="rgb(219,20,6)" rx="2" ry="2" />
<text  x="146.52" y="463.5" ></text>
</g>
<g >
<title>_int_malloc (23 samples, 0.03%)</title><rect x="844.8" y="517" width="0.3" height="15.0" fill="rgb(238,180,29)" rx="2" ry="2" />
<text  x="847.75" y="527.5" ></text>
</g>
<g >
<title>__lock_get_internal (40 samples, 0.05%)</title><rect x="166.9" y="453" width="0.5" height="15.0" fill="rgb(250,202,48)" rx="2" ry="2" />
<text  x="169.88" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::~unique_ptr (20 samples, 0.02%)</title><rect x="947.3" y="629" width="0.2" height="15.0" fill="rgb(237,70,48)" rx="2" ry="2" />
<text  x="950.25" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::find (312 samples, 0.36%)</title><rect x="875.3" y="565" width="4.2" height="15.0" fill="rgb(226,19,38)" rx="2" ry="2" />
<text  x="878.29" y="575.5" ></text>
</g>
<g >
<title>SipHashUint256 (157 samples, 0.18%)</title><rect x="1012.6" y="597" width="2.1" height="15.0" fill="rgb(247,177,49)" rx="2" ry="2" />
<text  x="1015.60" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (9 samples, 0.01%)</title><rect x="532.4" y="85" width="0.2" height="15.0" fill="rgb(212,25,12)" rx="2" ry="2" />
<text  x="535.43" y="95.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::DBIter::ParseKey (13 samples, 0.01%)</title><rect x="44.9" y="613" width="0.2" height="15.0" fill="rgb(252,58,20)" rx="2" ry="2" />
<text  x="47.89" y="623.5" ></text>
</g>
<g >
<title>CScriptWitness::~CScriptWitness (80 samples, 0.09%)</title><rect x="470.4" y="357" width="1.0" height="15.0" fill="rgb(229,177,13)" rx="2" ry="2" />
<text  x="473.36" y="367.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (10 samples, 0.01%)</title><rect x="664.2" y="533" width="0.2" height="15.0" fill="rgb(209,209,28)" rx="2" ry="2" />
<text  x="667.23" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_upper_bound (63 samples, 0.07%)</title><rect x="595.6" y="581" width="0.9" height="15.0" fill="rgb(233,127,25)" rx="2" ry="2" />
<text  x="598.63" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (16 samples, 0.02%)</title><rect x="448.5" y="517" width="0.2" height="15.0" fill="rgb(249,30,15)" rx="2" ry="2" />
<text  x="451.50" y="527.5" ></text>
</g>
<g >
<title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="389" width="3.8" height="15.0" fill="rgb(219,151,49)" rx="2" ry="2" />
<text  x="1142.99" y="399.5" ></text>
</g>
<g >
<title>__db_get (517 samples, 0.59%)</title><rect x="105.7" y="485" width="7.0" height="15.0" fill="rgb(235,110,49)" rx="2" ry="2" />
<text  x="108.73" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_addr (14 samples, 0.02%)</title><rect x="981.6" y="565" width="0.2" height="15.0" fill="rgb(231,60,43)" rx="2" ry="2" />
<text  x="984.63" y="575.5" ></text>
</g>
<g >
<title>CTxIn::CTxIn (57 samples, 0.07%)</title><rect x="544.0" y="309" width="0.8" height="15.0" fill="rgb(243,95,25)" rx="2" ry="2" />
<text  x="547.01" y="319.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, CKeyID&amp;&gt; (16 samples, 0.02%)</title><rect x="395.2" y="613" width="0.2" height="15.0" fill="rgb(246,188,23)" rx="2" ry="2" />
<text  x="398.20" y="623.5" ></text>
</g>
<g >
<title>CDataStream::read (8 samples, 0.01%)</title><rect x="403.5" y="533" width="0.1" height="15.0" fill="rgb(232,185,48)" rx="2" ry="2" />
<text  x="406.45" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;CKeyID const, CKey&gt;, false, true&gt;::_Node_iterator (16 samples, 0.02%)</title><rect x="841.2" y="581" width="0.2" height="15.0" fill="rgb(213,32,18)" rx="2" ry="2" />
<text  x="844.20" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (41 samples, 0.05%)</title><rect x="469.5" y="341" width="0.5" height="15.0" fill="rgb(206,76,50)" rx="2" ry="2" />
<text  x="472.50" y="351.5" ></text>
</g>
<g >
<title>CSizeComputer::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (564 samples, 0.64%)</title><rect x="1024.8" y="581" width="7.6" height="15.0" fill="rgb(234,159,9)" rx="2" ry="2" />
<text  x="1027.84" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (12 samples, 0.01%)</title><rect x="449.5" y="565" width="0.2" height="15.0" fill="rgb(224,228,4)" rx="2" ry="2" />
<text  x="452.50" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (24 samples, 0.03%)</title><rect x="121.9" y="453" width="0.3" height="15.0" fill="rgb(225,70,31)" rx="2" ry="2" />
<text  x="124.88" y="463.5" ></text>
</g>
<g >
<title>std::mutex::unlock (8 samples, 0.01%)</title><rect x="617.9" y="517" width="0.1" height="15.0" fill="rgb(234,200,19)" rx="2" ry="2" />
<text  x="620.91" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (50 samples, 0.06%)</title><rect x="1018.7" y="629" width="0.6" height="15.0" fill="rgb(238,228,9)" rx="2" ry="2" />
<text  x="1021.66" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, unsigned long, true&gt;::_S_equals (34 samples, 0.04%)</title><rect x="888.0" y="581" width="0.4" height="15.0" fill="rgb(238,76,29)" rx="2" ry="2" />
<text  x="890.97" y="591.5" ></text>
</g>
<g >
<title>std::make_move_iterator&lt;unsigned char*&gt; (15 samples, 0.02%)</title><rect x="1099.0" y="613" width="0.2" height="15.0" fill="rgb(238,174,29)" rx="2" ry="2" />
<text  x="1102.02" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="656.0" y="501" width="0.2" height="15.0" fill="rgb(221,195,2)" rx="2" ry="2" />
<text  x="658.95" y="511.5" ></text>
</g>
<g >
<title>std::make_shared&lt;CTransaction const&gt; (382 samples, 0.44%)</title><rect x="1055.6" y="661" width="5.2" height="15.0" fill="rgb(209,31,46)" rx="2" ry="2" />
<text  x="1058.62" y="671.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (281 samples, 0.32%)</title><rect x="551.7" y="309" width="3.8" height="15.0" fill="rgb(214,178,24)" rx="2" ry="2" />
<text  x="554.67" y="319.5" ></text>
</g>
<g >
<title>__db_lget (51 samples, 0.06%)</title><rect x="123.8" y="405" width="0.6" height="15.0" fill="rgb(210,30,3)" rx="2" ry="2" />
<text  x="126.75" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;char*, unsigned long&amp;&gt; (273 samples, 0.31%)</title><rect x="858.9" y="357" width="3.7" height="15.0" fill="rgb(205,102,27)" rx="2" ry="2" />
<text  x="861.92" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (11 samples, 0.01%)</title><rect x="452.2" y="501" width="0.1" height="15.0" fill="rgb(226,179,17)" rx="2" ry="2" />
<text  x="455.17" y="511.5" ></text>
</g>
<g >
<title>__libc_pwrite64 (16 samples, 0.02%)</title><rect x="145.8" y="389" width="0.3" height="15.0" fill="rgb(223,117,47)" rx="2" ry="2" />
<text  x="148.84" y="399.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (42 samples, 0.05%)</title><rect x="728.8" y="549" width="0.6" height="15.0" fill="rgb(238,162,13)" rx="2" ry="2" />
<text  x="731.85" y="559.5" ></text>
</g>
<g >
<title>_int_free (32 samples, 0.04%)</title><rect x="389.3" y="581" width="0.4" height="15.0" fill="rgb(241,223,39)" rx="2" ry="2" />
<text  x="392.26" y="591.5" ></text>
</g>
<g >
<title>LookupBlockIndex (154 samples, 0.18%)</title><rect x="55.4" y="613" width="2.0" height="15.0" fill="rgb(254,74,47)" rx="2" ry="2" />
<text  x="58.37" y="623.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::erase[abi:cxx11] (96 samples, 0.11%)</title><rect x="653.4" y="549" width="1.3" height="15.0" fill="rgb(234,193,37)" rx="2" ry="2" />
<text  x="656.39" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_deallocate (829 samples, 0.95%)</title><rect x="673.2" y="629" width="11.1" height="15.0" fill="rgb(216,81,0)" rx="2" ry="2" />
<text  x="676.16" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (27 samples, 0.03%)</title><rect x="80.5" y="437" width="0.3" height="15.0" fill="rgb(211,126,49)" rx="2" ry="2" />
<text  x="83.48" y="447.5" ></text>
</g>
<g >
<title>AppInit (39 samples, 0.04%)</title><rect x="1149.3" y="709" width="0.6" height="15.0" fill="rgb(207,79,20)" rx="2" ry="2" />
<text  x="1152.34" y="719.5" ></text>
</g>
<g >
<title>__lock_get_internal (18 samples, 0.02%)</title><rect x="100.9" y="357" width="0.2" height="15.0" fill="rgb(237,76,11)" rx="2" ry="2" />
<text  x="103.87" y="367.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (9 samples, 0.01%)</title><rect x="562.3" y="309" width="0.1" height="15.0" fill="rgb(236,127,43)" rx="2" ry="2" />
<text  x="565.27" y="319.5" ></text>
</g>
<g >
<title>CTxOut::SetNull (22 samples, 0.03%)</title><rect x="491.8" y="245" width="0.3" height="15.0" fill="rgb(229,145,21)" rx="2" ry="2" />
<text  x="494.83" y="255.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (130 samples, 0.15%)</title><rect x="812.0" y="437" width="1.8" height="15.0" fill="rgb(221,137,23)" rx="2" ry="2" />
<text  x="815.01" y="447.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction&lt;CDataStream&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="597" width="8.0" height="15.0" fill="rgb(239,39,33)" rx="2" ry="2" />
<text  x="1138.80" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::pop_back (33 samples, 0.04%)</title><rect x="836.0" y="581" width="0.4" height="15.0" fill="rgb(217,172,43)" rx="2" ry="2" />
<text  x="838.97" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (24 samples, 0.03%)</title><rect x="835.2" y="549" width="0.3" height="15.0" fill="rgb(247,36,34)" rx="2" ry="2" />
<text  x="838.17" y="559.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;&amp;&gt; (1,774 samples, 2.03%)</title><rect x="610.0" y="677" width="23.9" height="15.0" fill="rgb(209,61,20)" rx="2" ry="2" />
<text  x="613.00" y="687.5" >C..</text>
</g>
<g >
<title>[unknown] (25 samples, 0.03%)</title><rect x="135.8" y="357" width="0.4" height="15.0" fill="rgb(206,155,34)" rx="2" ry="2" />
<text  x="138.84" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (19 samples, 0.02%)</title><rect x="835.2" y="517" width="0.3" height="15.0" fill="rgb(231,193,31)" rx="2" ry="2" />
<text  x="838.21" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;CScriptID const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.01%)</title><rect x="1164.4" y="757" width="0.2" height="15.0" fill="rgb(213,163,18)" rx="2" ry="2" />
<text  x="1167.42" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (31 samples, 0.04%)</title><rect x="737.4" y="565" width="0.4" height="15.0" fill="rgb(247,37,21)" rx="2" ry="2" />
<text  x="740.38" y="575.5" ></text>
</g>
<g >
<title>pthread_self@GLIBC_2.2.5 (17 samples, 0.02%)</title><rect x="381.2" y="565" width="0.2" height="15.0" fill="rgb(235,146,18)" rx="2" ry="2" />
<text  x="384.21" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;long, CWalletTx*&gt; &gt; (232 samples, 0.26%)</title><rect x="964.4" y="629" width="3.1" height="15.0" fill="rgb(242,157,49)" rx="2" ry="2" />
<text  x="967.38" y="639.5" ></text>
</g>
<g >
<title>__lock_get_internal (14 samples, 0.02%)</title><rect x="102.5" y="357" width="0.2" height="15.0" fill="rgb(223,229,7)" rx="2" ry="2" />
<text  x="105.51" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_allocate (1,341 samples, 1.53%)</title><rect x="846.0" y="469" width="18.1" height="15.0" fill="rgb(231,198,4)" rx="2" ry="2" />
<text  x="849.02" y="479.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;unsigned char*, unsigned char*, secure_allocator&lt;unsigned char&gt; &gt; (13 samples, 0.01%)</title><rect x="668.1" y="597" width="0.2" height="15.0" fill="rgb(222,98,50)" rx="2" ry="2" />
<text  x="671.10" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (91 samples, 0.10%)</title><rect x="888.5" y="629" width="1.2" height="15.0" fill="rgb(220,114,14)" rx="2" ry="2" />
<text  x="891.46" y="639.5" ></text>
</g>
<g >
<title>ReadOrderPos (536 samples, 0.61%)</title><rect x="576.7" y="629" width="7.2" height="15.0" fill="rgb(225,206,48)" rx="2" ry="2" />
<text  x="579.66" y="639.5" ></text>
</g>
<g >
<title>__db_lget (39 samples, 0.04%)</title><rect x="75.6" y="469" width="0.5" height="15.0" fill="rgb(212,144,27)" rx="2" ry="2" />
<text  x="78.62" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (11 samples, 0.01%)</title><rect x="90.3" y="453" width="0.1" height="15.0" fill="rgb(252,54,4)" rx="2" ry="2" />
<text  x="93.25" y="463.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CVarInt&lt; (36 samples, 0.04%)</title><rect x="43.2" y="549" width="0.5" height="15.0" fill="rgb(244,211,50)" rx="2" ry="2" />
<text  x="46.19" y="559.5" ></text>
</g>
<g >
<title>LoadChainTip (20 samples, 0.02%)</title><rect x="32.9" y="709" width="0.3" height="15.0" fill="rgb(214,6,22)" rx="2" ry="2" />
<text  x="35.95" y="719.5" ></text>
</g>
<g >
<title>CuckooCache::bit_packed_atomic_flags::bit_packed_atomic_flags (14 samples, 0.02%)</title><rect x="30.4" y="645" width="0.2" height="15.0" fill="rgb(235,7,0)" rx="2" ry="2" />
<text  x="33.42" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::begin (16 samples, 0.02%)</title><rect x="743.3" y="597" width="0.2" height="15.0" fill="rgb(237,0,25)" rx="2" ry="2" />
<text  x="746.27" y="607.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::end (50 samples, 0.06%)</title><rect x="850.6" y="389" width="0.7" height="15.0" fill="rgb(238,100,26)" rx="2" ry="2" />
<text  x="853.62" y="399.5" ></text>
</g>
<g >
<title>__bam_defcmp (16 samples, 0.02%)</title><rect x="69.4" y="549" width="0.2" height="15.0" fill="rgb(241,142,45)" rx="2" ry="2" />
<text  x="72.39" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="179.5" y="533" width="0.1" height="15.0" fill="rgb(226,180,16)" rx="2" ry="2" />
<text  x="182.46" y="543.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (16 samples, 0.02%)</title><rect x="830.1" y="565" width="0.2" height="15.0" fill="rgb(238,139,25)" rx="2" ry="2" />
<text  x="833.13" y="575.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (109 samples, 0.12%)</title><rect x="487.0" y="229" width="1.5" height="15.0" fill="rgb(234,40,6)" rx="2" ry="2" />
<text  x="489.99" y="239.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getHeight (24 samples, 0.03%)</title><rect x="57.4" y="629" width="0.4" height="15.0" fill="rgb(245,41,38)" rx="2" ry="2" />
<text  x="60.45" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_base (9 samples, 0.01%)</title><rect x="1161.0" y="757" width="0.1" height="15.0" fill="rgb(250,5,1)" rx="2" ry="2" />
<text  x="1163.96" y="767.5" ></text>
</g>
<g >
<title>CKeyMetadata::CKeyMetadata (52 samples, 0.06%)</title><rect x="892.0" y="549" width="0.7" height="15.0" fill="rgb(223,171,47)" rx="2" ry="2" />
<text  x="894.97" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (18 samples, 0.02%)</title><rect x="1158.9" y="741" width="0.3" height="15.0" fill="rgb(216,122,19)" rx="2" ry="2" />
<text  x="1161.92" y="751.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::lower_bound (58 samples, 0.07%)</title><rect x="600.7" y="613" width="0.8" height="15.0" fill="rgb(228,77,31)" rx="2" ry="2" />
<text  x="603.71" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (8 samples, 0.01%)</title><rect x="171.8" y="469" width="0.1" height="15.0" fill="rgb(247,226,43)" rx="2" ry="2" />
<text  x="174.75" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_head (9 samples, 0.01%)</title><rect x="946.6" y="533" width="0.1" height="15.0" fill="rgb(205,31,45)" rx="2" ry="2" />
<text  x="949.58" y="543.5" ></text>
</g>
<g >
<title>CHashWriter::write (17 samples, 0.02%)</title><rect x="546.9" y="101" width="0.2" height="15.0" fill="rgb(229,153,0)" rx="2" ry="2" />
<text  x="549.88" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (11 samples, 0.01%)</title><rect x="1157.1" y="757" width="0.2" height="15.0" fill="rgb(222,147,29)" rx="2" ry="2" />
<text  x="1160.15" y="767.5" ></text>
</g>
<g >
<title>__dbc_idup (629 samples, 0.72%)</title><rect x="374.4" y="629" width="8.4" height="15.0" fill="rgb(232,167,18)" rx="2" ry="2" />
<text  x="377.36" y="639.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (869 samples, 0.99%)</title><rect x="219.0" y="597" width="11.7" height="15.0" fill="rgb(222,155,10)" rx="2" ry="2" />
<text  x="221.96" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="161.5" y="469" width="0.1" height="15.0" fill="rgb(229,83,20)" rx="2" ry="2" />
<text  x="164.49" y="479.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="445.4" y="597" width="0.1" height="15.0" fill="rgb(233,144,9)" rx="2" ry="2" />
<text  x="448.40" y="607.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (17 samples, 0.02%)</title><rect x="515.8" y="373" width="0.2" height="15.0" fill="rgb(253,169,2)" rx="2" ry="2" />
<text  x="518.81" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="1094.3" y="581" width="0.2" height="15.0" fill="rgb(245,47,24)" rx="2" ry="2" />
<text  x="1097.35" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::emplace&lt;char*, unsigned long&amp;&gt; (279 samples, 0.32%)</title><rect x="858.9" y="389" width="3.7" height="15.0" fill="rgb(214,76,41)" rx="2" ry="2" />
<text  x="861.86" y="399.5" ></text>
</g>
<g >
<title>BerkeleyBatch::SafeDbt::~SafeDbt (199 samples, 0.23%)</title><rect x="190.4" y="677" width="2.7" height="15.0" fill="rgb(206,35,5)" rx="2" ry="2" />
<text  x="193.39" y="687.5" ></text>
</g>
<g >
<title>BerkeleyBatch::VerifyDatabaseFile (39 samples, 0.04%)</title><rect x="1143.9" y="693" width="0.5" height="15.0" fill="rgb(225,209,15)" rx="2" ry="2" />
<text  x="1146.88" y="703.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (8 samples, 0.01%)</title><rect x="587.6" y="533" width="0.1" height="15.0" fill="rgb(217,61,43)" rx="2" ry="2" />
<text  x="590.59" y="543.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, CScript&amp;&gt; (131 samples, 0.15%)</title><rect x="486.7" y="309" width="1.8" height="15.0" fill="rgb(220,98,13)" rx="2" ry="2" />
<text  x="489.71" y="319.5" ></text>
</g>
<g >
<title>__lock_get (9 samples, 0.01%)</title><rect x="80.9" y="421" width="0.2" height="15.0" fill="rgb(213,220,2)" rx="2" ry="2" />
<text  x="83.94" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt;::_Hash_node (16 samples, 0.02%)</title><rect x="995.9" y="597" width="0.2" height="15.0" fill="rgb(225,30,37)" rx="2" ry="2" />
<text  x="998.93" y="607.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (8 samples, 0.01%)</title><rect x="25.3" y="757" width="0.1" height="15.0" fill="rgb(214,47,0)" rx="2" ry="2" />
<text  x="28.31" y="767.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (320 samples, 0.37%)</title><rect x="158.2" y="517" width="4.3" height="15.0" fill="rgb(234,37,37)" rx="2" ry="2" />
<text  x="161.20" y="527.5" ></text>
</g>
<g >
<title>__db_lget (48 samples, 0.05%)</title><rect x="159.6" y="485" width="0.6" height="15.0" fill="rgb(222,122,27)" rx="2" ry="2" />
<text  x="162.59" y="495.5" ></text>
</g>
<g >
<title>CTransaction::~CTransaction (35 samples, 0.04%)</title><rect x="570.9" y="469" width="0.5" height="15.0" fill="rgb(235,6,38)" rx="2" ry="2" />
<text  x="573.93" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair (17 samples, 0.02%)</title><rect x="880.6" y="517" width="0.2" height="15.0" fill="rgb(237,196,40)" rx="2" ry="2" />
<text  x="883.57" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (11 samples, 0.01%)</title><rect x="1031.9" y="533" width="0.2" height="15.0" fill="rgb(235,95,2)" rx="2" ry="2" />
<text  x="1034.91" y="543.5" ></text>
</g>
<g >
<title>__lock_put (16 samples, 0.02%)</title><rect x="109.5" y="389" width="0.2" height="15.0" fill="rgb(234,115,23)" rx="2" ry="2" />
<text  x="112.49" y="399.5" ></text>
</g>
<g >
<title>CWalletTx::Confirmation::Confirmation (10 samples, 0.01%)</title><rect x="1015.7" y="661" width="0.1" height="15.0" fill="rgb(212,54,41)" rx="2" ry="2" />
<text  x="1018.71" y="671.5" ></text>
</g>
<g >
<title>__memp_alloc (13 samples, 0.01%)</title><rect x="102.9" y="373" width="0.2" height="15.0" fill="rgb(248,70,34)" rx="2" ry="2" />
<text  x="105.95" y="383.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::convert_construct&lt;WitnessV0KeyHash&gt; (26 samples, 0.03%)</title><rect x="817.5" y="597" width="0.3" height="15.0" fill="rgb(206,38,34)" rx="2" ry="2" />
<text  x="820.46" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (71 samples, 0.08%)</title><rect x="323.9" y="597" width="0.9" height="15.0" fill="rgb(251,82,45)" rx="2" ry="2" />
<text  x="326.89" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (39 samples, 0.04%)</title><rect x="564.8" y="437" width="0.6" height="15.0" fill="rgb(233,77,8)" rx="2" ry="2" />
<text  x="567.84" y="447.5" ></text>
</g>
<g >
<title>__db_put (50 samples, 0.06%)</title><rect x="65.6" y="533" width="0.6" height="15.0" fill="rgb(254,112,46)" rx="2" ry="2" />
<text  x="68.58" y="543.5" ></text>
</g>
<g >
<title>QuadRound (243 samples, 0.28%)</title><rect x="1109.7" y="373" width="3.3" height="15.0" fill="rgb(243,43,16)" rx="2" ry="2" />
<text  x="1112.71" y="383.5" ></text>
</g>
<g >
<title>SeedStrengthen (398 samples, 0.45%)</title><rect x="1184.2" y="629" width="5.4" height="15.0" fill="rgb(237,68,35)" rx="2" ry="2" />
<text  x="1187.21" y="639.5" ></text>
</g>
<g >
<title>__dbc_get_arg (142 samples, 0.16%)</title><rect x="329.2" y="645" width="2.0" height="15.0" fill="rgb(237,149,24)" rx="2" ry="2" />
<text  x="332.24" y="655.5" ></text>
</g>
<g >
<title>CKey::begin (12 samples, 0.01%)</title><rect x="669.8" y="661" width="0.1" height="15.0" fill="rgb(211,220,9)" rx="2" ry="2" />
<text  x="672.77" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_value (54 samples, 0.06%)</title><rect x="832.5" y="501" width="0.7" height="15.0" fill="rgb(228,195,51)" rx="2" ry="2" />
<text  x="835.50" y="511.5" ></text>
</g>
<g >
<title>__memp_fget (53 samples, 0.06%)</title><rect x="72.1" y="469" width="0.7" height="15.0" fill="rgb(212,214,1)" rx="2" ry="2" />
<text  x="75.08" y="479.5" ></text>
</g>
<g >
<title>CHashWriter::GetHash (315 samples, 0.36%)</title><rect x="1105.0" y="453" width="4.2" height="15.0" fill="rgb(253,120,31)" rx="2" ry="2" />
<text  x="1107.95" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_left (8 samples, 0.01%)</title><rect x="597.8" y="581" width="0.2" height="15.0" fill="rgb(240,195,42)" rx="2" ry="2" />
<text  x="600.84" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair&lt;void*&amp;, true&gt; (9 samples, 0.01%)</title><rect x="1173.8" y="741" width="0.1" height="15.0" fill="rgb(224,142,23)" rx="2" ry="2" />
<text  x="1176.77" y="751.5" ></text>
</g>
<g >
<title>CKeyMetadata::~CKeyMetadata (37 samples, 0.04%)</title><rect x="685.2" y="677" width="0.5" height="15.0" fill="rgb(206,207,6)" rx="2" ry="2" />
<text  x="688.24" y="687.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (12 samples, 0.01%)</title><rect x="574.3" y="565" width="0.2" height="15.0" fill="rgb(208,37,41)" rx="2" ry="2" />
<text  x="577.30" y="575.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.05%)</title><rect x="455.7" y="501" width="0.6" height="15.0" fill="rgb(219,55,39)" rx="2" ry="2" />
<text  x="458.67" y="511.5" ></text>
</g>
<g >
<title>WriteLE32 (10 samples, 0.01%)</title><rect x="724.7" y="581" width="0.2" height="15.0" fill="rgb(235,221,41)" rx="2" ry="2" />
<text  x="727.74" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_select_on_copy (17 samples, 0.02%)</title><rect x="1001.3" y="517" width="0.2" height="15.0" fill="rgb(223,140,3)" rx="2" ry="2" />
<text  x="1004.25" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_erase_at_end (9 samples, 0.01%)</title><rect x="507.0" y="341" width="0.1" height="15.0" fill="rgb(236,19,7)" rx="2" ry="2" />
<text  x="510.01" y="351.5" ></text>
</g>
<g >
<title>uint160::uint160 (21 samples, 0.02%)</title><rect x="765.5" y="597" width="0.3" height="15.0" fill="rgb(217,212,7)" rx="2" ry="2" />
<text  x="768.53" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;COutPoint&gt;::_M_valptr (13 samples, 0.01%)</title><rect x="1042.6" y="565" width="0.1" height="15.0" fill="rgb(248,55,2)" rx="2" ry="2" />
<text  x="1045.57" y="575.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, uint256&amp;&gt; (49 samples, 0.06%)</title><rect x="473.6" y="213" width="0.7" height="15.0" fill="rgb(243,22,48)" rx="2" ry="2" />
<text  x="476.61" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::clear (15 samples, 0.02%)</title><rect x="479.4" y="357" width="0.2" height="15.0" fill="rgb(251,191,26)" rx="2" ry="2" />
<text  x="482.43" y="367.5" ></text>
</g>
<g >
<title>pop_lock (82 samples, 0.09%)</title><rect x="984.6" y="565" width="1.1" height="15.0" fill="rgb(243,71,45)" rx="2" ry="2" />
<text  x="987.57" y="575.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter&gt; (11 samples, 0.01%)</title><rect x="538.7" y="213" width="0.2" height="15.0" fill="rgb(242,54,32)" rx="2" ry="2" />
<text  x="541.74" y="223.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (11 samples, 0.01%)</title><rect x="734.3" y="565" width="0.2" height="15.0" fill="rgb(205,107,34)" rx="2" ry="2" />
<text  x="737.34" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (28 samples, 0.03%)</title><rect x="560.3" y="293" width="0.4" height="15.0" fill="rgb(217,156,45)" rx="2" ry="2" />
<text  x="563.29" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (29 samples, 0.03%)</title><rect x="460.6" y="549" width="0.4" height="15.0" fill="rgb(242,18,26)" rx="2" ry="2" />
<text  x="463.56" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (97 samples, 0.11%)</title><rect x="1089.2" y="549" width="1.3" height="15.0" fill="rgb(235,189,5)" rx="2" ry="2" />
<text  x="1092.20" y="559.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (12 samples, 0.01%)</title><rect x="459.6" y="501" width="0.2" height="15.0" fill="rgb(251,117,41)" rx="2" ry="2" />
<text  x="462.65" y="511.5" ></text>
</g>
<g >
<title>CKeyMetadata::operator= (168 samples, 0.19%)</title><rect x="882.8" y="661" width="2.3" height="15.0" fill="rgb(218,128,1)" rx="2" ry="2" />
<text  x="885.81" y="671.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, unsigned int&gt; (50 samples, 0.06%)</title><rect x="546.5" y="149" width="0.7" height="15.0" fill="rgb(226,30,6)" rx="2" ry="2" />
<text  x="549.53" y="159.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, uint256&gt; (37 samples, 0.04%)</title><rect x="1028.2" y="389" width="0.5" height="15.0" fill="rgb(217,114,45)" rx="2" ry="2" />
<text  x="1031.18" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;CTxIn const*, CTxIn*, CTxIn&gt; (21 samples, 0.02%)</title><rect x="482.7" y="309" width="0.2" height="15.0" fill="rgb(206,114,18)" rx="2" ry="2" />
<text  x="485.66" y="319.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, CBlockIndex*&gt;*, std::vector&lt;std::pair&lt;int, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;int, CBlockIndex*&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (14 samples, 0.02%)</title><rect x="52.6" y="629" width="0.2" height="15.0" fill="rgb(249,156,39)" rx="2" ry="2" />
<text  x="55.64" y="639.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;&gt; (21 samples, 0.02%)</title><rect x="948.9" y="565" width="0.3" height="15.0" fill="rgb(206,4,8)" rx="2" ry="2" />
<text  x="951.88" y="575.5" ></text>
</g>
<g >
<title>CTxIn::CTxIn (42 samples, 0.05%)</title><rect x="481.8" y="261" width="0.6" height="15.0" fill="rgb(254,111,16)" rx="2" ry="2" />
<text  x="484.84" y="271.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (4,365 samples, 4.99%)</title><rect x="78.1" y="517" width="58.8" height="15.0" fill="rgb(241,191,20)" rx="2" ry="2" />
<text  x="81.12" y="527.5" >__bam_..</text>
</g>
<g >
<title>__GI___clone (186 samples, 0.21%)</title><rect x="1144.8" y="757" width="2.5" height="15.0" fill="rgb(214,194,17)" rx="2" ry="2" />
<text  x="1147.84" y="767.5" ></text>
</g>
<g >
<title>__bam_get_root (12 samples, 0.01%)</title><rect x="103.4" y="389" width="0.2" height="15.0" fill="rgb(242,202,33)" rx="2" ry="2" />
<text  x="106.40" y="399.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;LockedPool::LockedPageArena&gt;::_List_iterator (9 samples, 0.01%)</title><rect x="683.5" y="549" width="0.1" height="15.0" fill="rgb(253,2,12)" rx="2" ry="2" />
<text  x="686.46" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (178 samples, 0.20%)</title><rect x="1039.3" y="629" width="2.4" height="15.0" fill="rgb(228,218,8)" rx="2" ry="2" />
<text  x="1042.34" y="639.5" ></text>
</g>
<g >
<title>CHashWriter::write (21 samples, 0.02%)</title><rect x="546.1" y="101" width="0.3" height="15.0" fill="rgb(214,81,23)" rx="2" ry="2" />
<text  x="549.12" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (29 samples, 0.03%)</title><rect x="859.3" y="325" width="0.4" height="15.0" fill="rgb(215,227,29)" rx="2" ry="2" />
<text  x="862.27" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="1080.8" y="565" width="0.2" height="15.0" fill="rgb(236,182,30)" rx="2" ry="2" />
<text  x="1083.83" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_S_value (10 samples, 0.01%)</title><rect x="54.4" y="613" width="0.1" height="15.0" fill="rgb(217,27,9)" rx="2" ry="2" />
<text  x="57.39" y="623.5" ></text>
</g>
<g >
<title>CTransaction::HasWitness (20 samples, 0.02%)</title><rect x="562.7" y="341" width="0.2" height="15.0" fill="rgb(210,98,10)" rx="2" ry="2" />
<text  x="565.66" y="351.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (10 samples, 0.01%)</title><rect x="16.2" y="757" width="0.2" height="15.0" fill="rgb(215,11,0)" rx="2" ry="2" />
<text  x="19.24" y="767.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (21 samples, 0.02%)</title><rect x="477.0" y="149" width="0.2" height="15.0" fill="rgb(227,114,34)" rx="2" ry="2" />
<text  x="479.96" y="159.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.03%)</title><rect x="179.1" y="421" width="0.3" height="15.0" fill="rgb(227,3,21)" rx="2" ry="2" />
<text  x="182.13" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (14 samples, 0.02%)</title><rect x="89.0" y="453" width="0.2" height="15.0" fill="rgb(231,87,37)" rx="2" ry="2" />
<text  x="91.97" y="463.5" ></text>
</g>
<g >
<title>__memp_fput (10 samples, 0.01%)</title><rect x="121.2" y="437" width="0.2" height="15.0" fill="rgb(213,113,24)" rx="2" ry="2" />
<text  x="124.23" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.01%)</title><rect x="613.4" y="437" width="0.2" height="15.0" fill="rgb(220,118,14)" rx="2" ry="2" />
<text  x="616.44" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (13 samples, 0.01%)</title><rect x="735.0" y="565" width="0.1" height="15.0" fill="rgb(242,173,36)" rx="2" ry="2" />
<text  x="737.96" y="575.5" ></text>
</g>
<g >
<title>__lock_get (39 samples, 0.04%)</title><rect x="150.3" y="453" width="0.6" height="15.0" fill="rgb(244,64,31)" rx="2" ry="2" />
<text  x="153.33" y="463.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction (103 samples, 0.12%)</title><rect x="1057.7" y="533" width="1.4" height="15.0" fill="rgb(218,164,17)" rx="2" ry="2" />
<text  x="1060.66" y="543.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CScript&amp;&gt; (119 samples, 0.14%)</title><rect x="486.9" y="277" width="1.6" height="15.0" fill="rgb(240,64,21)" rx="2" ry="2" />
<text  x="489.85" y="287.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.02%)</title><rect x="357.2" y="517" width="0.3" height="15.0" fill="rgb(214,208,34)" rx="2" ry="2" />
<text  x="360.24" y="527.5" ></text>
</g>
<g >
<title>__bam_search (45 samples, 0.05%)</title><rect x="104.9" y="405" width="0.6" height="15.0" fill="rgb(224,164,10)" rx="2" ry="2" />
<text  x="107.93" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::~_Rb_tree_impl (12 samples, 0.01%)</title><rect x="1019.9" y="629" width="0.2" height="15.0" fill="rgb(239,122,47)" rx="2" ry="2" />
<text  x="1022.90" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator-- (9 samples, 0.01%)</title><rect x="1052.1" y="597" width="0.1" height="15.0" fill="rgb(236,46,51)" rx="2" ry="2" />
<text  x="1055.10" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::begin (9 samples, 0.01%)</title><rect x="942.7" y="533" width="0.1" height="15.0" fill="rgb(217,28,3)" rx="2" ry="2" />
<text  x="945.67" y="543.5" ></text>
</g>
<g >
<title>__lock_put (29 samples, 0.03%)</title><rect x="141.2" y="453" width="0.4" height="15.0" fill="rgb(229,122,38)" rx="2" ry="2" />
<text  x="144.16" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (11 samples, 0.01%)</title><rect x="898.7" y="549" width="0.2" height="15.0" fill="rgb(221,191,48)" rx="2" ry="2" />
<text  x="901.74" y="559.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.04%)</title><rect x="146.6" y="341" width="0.4" height="15.0" fill="rgb(230,56,36)" rx="2" ry="2" />
<text  x="149.58" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (16 samples, 0.02%)</title><rect x="579.0" y="597" width="0.2" height="15.0" fill="rgb(210,137,10)" rx="2" ry="2" />
<text  x="581.98" y="607.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (459 samples, 0.52%)</title><rect x="81.6" y="453" width="6.2" height="15.0" fill="rgb(206,66,0)" rx="2" ry="2" />
<text  x="84.63" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::end (25 samples, 0.03%)</title><rect x="560.9" y="293" width="0.3" height="15.0" fill="rgb(218,37,6)" rx="2" ry="2" />
<text  x="563.89" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (101 samples, 0.12%)</title><rect x="737.8" y="581" width="1.4" height="15.0" fill="rgb(218,141,25)" rx="2" ry="2" />
<text  x="740.82" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::_M_v (9 samples, 0.01%)</title><rect x="678.5" y="453" width="0.1" height="15.0" fill="rgb(244,97,39)" rx="2" ry="2" />
<text  x="681.51" y="463.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned char const*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; (29 samples, 0.03%)</title><rect x="742.6" y="565" width="0.4" height="15.0" fill="rgb(214,4,19)" rx="2" ry="2" />
<text  x="745.63" y="575.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (137 samples, 0.16%)</title><rect x="1125.6" y="581" width="1.8" height="15.0" fill="rgb(209,175,27)" rx="2" ry="2" />
<text  x="1128.58" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::end (17 samples, 0.02%)</title><rect x="733.0" y="549" width="0.3" height="15.0" fill="rgb(228,39,41)" rx="2" ry="2" />
<text  x="736.02" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (136 samples, 0.16%)</title><rect x="379.6" y="597" width="1.8" height="15.0" fill="rgb(249,101,23)" rx="2" ry="2" />
<text  x="382.61" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTxOut&gt;::allocate (29 samples, 0.03%)</title><rect x="490.5" y="293" width="0.4" height="15.0" fill="rgb(220,135,49)" rx="2" ry="2" />
<text  x="493.47" y="303.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;CTxOut const*, CTxOut*&gt; (12 samples, 0.01%)</title><rect x="492.5" y="293" width="0.1" height="15.0" fill="rgb(229,223,47)" rx="2" ry="2" />
<text  x="495.47" y="303.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (33 samples, 0.04%)</title><rect x="830.8" y="533" width="0.5" height="15.0" fill="rgb(206,74,38)" rx="2" ry="2" />
<text  x="833.85" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_default_append (127 samples, 0.15%)</title><rect x="396.8" y="453" width="1.7" height="15.0" fill="rgb(248,210,43)" rx="2" ry="2" />
<text  x="399.75" y="463.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (15 samples, 0.02%)</title><rect x="1137.7" y="149" width="0.2" height="15.0" fill="rgb(210,82,18)" rx="2" ry="2" />
<text  x="1140.73" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;CScriptID const&amp;&gt;, std::tuple&lt;&gt; &gt; (215 samples, 0.25%)</title><rect x="825.1" y="581" width="2.9" height="15.0" fill="rgb(233,164,29)" rx="2" ry="2" />
<text  x="828.09" y="591.5" ></text>
</g>
<g >
<title>BerkeleyBatch::VerifyDatabaseFile (9,098 samples, 10.39%)</title><rect x="57.8" y="661" width="122.6" height="15.0" fill="rgb(249,167,23)" rx="2" ry="2" />
<text  x="60.79" y="671.5" >BerkeleyBatch::..</text>
</g>
<g >
<title>__libc_csu_init (403 samples, 0.46%)</title><rect x="1184.2" y="725" width="5.4" height="15.0" fill="rgb(239,198,34)" rx="2" ry="2" />
<text  x="1187.21" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::~vector (1,926 samples, 2.20%)</title><rect x="1066.0" y="677" width="26.0" height="15.0" fill="rgb(249,170,43)" rx="2" ry="2" />
<text  x="1069.01" y="687.5" >s..</text>
</g>
<g >
<title>__db_tas_mutex_unlock (83 samples, 0.09%)</title><rect x="340.6" y="549" width="1.1" height="15.0" fill="rgb(229,162,8)" rx="2" ry="2" />
<text  x="343.57" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt;, false, true&gt;::operator (9 samples, 0.01%)</title><rect x="956.3" y="629" width="0.1" height="15.0" fill="rgb(230,70,24)" rx="2" ry="2" />
<text  x="959.26" y="639.5" ></text>
</g>
<g >
<title>memory_cleanse (10 samples, 0.01%)</title><rect x="684.2" y="581" width="0.1" height="15.0" fill="rgb(245,210,14)" rx="2" ry="2" />
<text  x="687.20" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_equals (81 samples, 0.09%)</title><rect x="910.7" y="565" width="1.1" height="15.0" fill="rgb(238,152,24)" rx="2" ry="2" />
<text  x="913.71" y="575.5" ></text>
</g>
<g >
<title>std::set&lt;CBlockIndex*, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::insert (107 samples, 0.12%)</title><rect x="51.1" y="677" width="1.5" height="15.0" fill="rgb(243,215,33)" rx="2" ry="2" />
<text  x="54.12" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (11 samples, 0.01%)</title><rect x="1162.6" y="757" width="0.2" height="15.0" fill="rgb(219,27,31)" rx="2" ry="2" />
<text  x="1165.63" y="767.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::shrink_to_fit (19 samples, 0.02%)</title><rect x="485.2" y="325" width="0.3" height="15.0" fill="rgb(212,118,26)" rx="2" ry="2" />
<text  x="488.20" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::allocate (121 samples, 0.14%)</title><rect x="201.9" y="597" width="1.7" height="15.0" fill="rgb(241,119,18)" rx="2" ry="2" />
<text  x="204.94" y="607.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (73 samples, 0.08%)</title><rect x="523.6" y="325" width="1.0" height="15.0" fill="rgb(231,6,10)" rx="2" ry="2" />
<text  x="526.60" y="335.5" ></text>
</g>
<g >
<title>__db_pitem_nolog (10 samples, 0.01%)</title><rect x="152.9" y="485" width="0.1" height="15.0" fill="rgb(251,57,25)" rx="2" ry="2" />
<text  x="155.91" y="495.5" ></text>
</g>
<g >
<title>CKeyMetadata::CKeyMetadata (58 samples, 0.07%)</title><rect x="684.5" y="677" width="0.7" height="15.0" fill="rgb(235,220,24)" rx="2" ry="2" />
<text  x="687.46" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_create_node&lt;unsigned long&amp;, char*&amp;&gt; (71 samples, 0.08%)</title><rect x="1079.1" y="533" width="0.9" height="15.0" fill="rgb(216,147,6)" rx="2" ry="2" />
<text  x="1082.09" y="543.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (56 samples, 0.06%)</title><rect x="705.8" y="597" width="0.7" height="15.0" fill="rgb(237,4,12)" rx="2" ry="2" />
<text  x="708.76" y="607.5" ></text>
</g>
<g >
<title>__db_lput (20 samples, 0.02%)</title><rect x="154.3" y="469" width="0.3" height="15.0" fill="rgb(232,167,18)" rx="2" ry="2" />
<text  x="157.30" y="479.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (59 samples, 0.07%)</title><rect x="528.3" y="165" width="0.8" height="15.0" fill="rgb(232,170,42)" rx="2" ry="2" />
<text  x="531.29" y="175.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (43 samples, 0.05%)</title><rect x="939.8" y="501" width="0.6" height="15.0" fill="rgb(237,101,30)" rx="2" ry="2" />
<text  x="942.80" y="511.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (164 samples, 0.19%)</title><rect x="183.1" y="485" width="2.3" height="15.0" fill="rgb(241,3,18)" rx="2" ry="2" />
<text  x="186.14" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, char* const&amp;&gt;::_Tuple_impl (8 samples, 0.01%)</title><rect x="1159.5" y="757" width="0.1" height="15.0" fill="rgb(251,136,2)" rx="2" ry="2" />
<text  x="1162.53" y="767.5" ></text>
</g>
<g >
<title>uint256::uint256 (10 samples, 0.01%)</title><rect x="481.9" y="229" width="0.2" height="15.0" fill="rgb(251,16,1)" rx="2" ry="2" />
<text  x="484.95" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~_Vector_base (33 samples, 0.04%)</title><rect x="604.7" y="613" width="0.4" height="15.0" fill="rgb(225,228,24)" rx="2" ry="2" />
<text  x="607.66" y="623.5" ></text>
</g>
<g >
<title>CTxIn::~CTxIn (12 samples, 0.01%)</title><rect x="18.3" y="757" width="0.2" height="15.0" fill="rgb(218,144,46)" rx="2" ry="2" />
<text  x="21.34" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (8 samples, 0.01%)</title><rect x="675.6" y="517" width="0.1" height="15.0" fill="rgb(228,108,42)" rx="2" ry="2" />
<text  x="678.63" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::size (9 samples, 0.01%)</title><rect x="867.7" y="485" width="0.1" height="15.0" fill="rgb(234,204,20)" rx="2" ry="2" />
<text  x="870.70" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (40 samples, 0.05%)</title><rect x="678.4" y="469" width="0.5" height="15.0" fill="rgb(220,24,38)" rx="2" ry="2" />
<text  x="681.36" y="479.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.03%)</title><rect x="136.5" y="389" width="0.3" height="15.0" fill="rgb(248,144,7)" rx="2" ry="2" />
<text  x="139.53" y="399.5" ></text>
</g>
<g >
<title>__db_vrfy_ccset (11 samples, 0.01%)</title><rect x="136.9" y="517" width="0.2" height="15.0" fill="rgb(233,211,47)" rx="2" ry="2" />
<text  x="139.95" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (18 samples, 0.02%)</title><rect x="192.8" y="645" width="0.3" height="15.0" fill="rgb(235,156,40)" rx="2" ry="2" />
<text  x="195.83" y="655.5" ></text>
</g>
<g >
<title>ShiftMessageC (8 samples, 0.01%)</title><rect x="1130.5" y="629" width="0.1" height="15.0" fill="rgb(244,222,11)" rx="2" ry="2" />
<text  x="1133.53" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10 samples, 0.01%)</title><rect x="1087.5" y="485" width="0.1" height="15.0" fill="rgb(251,133,24)" rx="2" ry="2" />
<text  x="1090.46" y="495.5" ></text>
</g>
<g >
<title>CDataStream::read (89 samples, 0.10%)</title><rect x="607.0" y="613" width="1.2" height="15.0" fill="rgb(236,156,10)" rx="2" ry="2" />
<text  x="609.98" y="623.5" ></text>
</g>
<g >
<title>CHash256::CHash256 (33 samples, 0.04%)</title><rect x="519.8" y="389" width="0.5" height="15.0" fill="rgb(246,190,14)" rx="2" ry="2" />
<text  x="522.84" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (30 samples, 0.03%)</title><rect x="500.1" y="229" width="0.4" height="15.0" fill="rgb(213,210,52)" rx="2" ry="2" />
<text  x="503.13" y="239.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.03%)</title><rect x="136.4" y="437" width="0.4" height="15.0" fill="rgb(237,227,25)" rx="2" ry="2" />
<text  x="139.42" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (70 samples, 0.08%)</title><rect x="947.7" y="613" width="0.9" height="15.0" fill="rgb(245,33,42)" rx="2" ry="2" />
<text  x="950.69" y="623.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CSizeComputer&gt; (117 samples, 0.13%)</title><rect x="1029.6" y="437" width="1.6" height="15.0" fill="rgb(223,131,28)" rx="2" ry="2" />
<text  x="1032.61" y="447.5" ></text>
</g>
<g >
<title>__memp_pgread (53 samples, 0.06%)</title><rect x="146.3" y="453" width="0.7" height="15.0" fill="rgb(248,52,43)" rx="2" ry="2" />
<text  x="149.31" y="463.5" ></text>
</g>
<g >
<title>__db_lget (11 samples, 0.01%)</title><rect x="80.9" y="437" width="0.2" height="15.0" fill="rgb(243,225,6)" rx="2" ry="2" />
<text  x="83.93" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (9 samples, 0.01%)</title><rect x="471.1" y="309" width="0.2" height="15.0" fill="rgb(249,77,12)" rx="2" ry="2" />
<text  x="474.14" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (22 samples, 0.03%)</title><rect x="39.4" y="565" width="0.3" height="15.0" fill="rgb(254,43,13)" rx="2" ry="2" />
<text  x="42.38" y="575.5" ></text>
</g>
<g >
<title>__db_cursor (35 samples, 0.04%)</title><rect x="105.8" y="469" width="0.4" height="15.0" fill="rgb(240,82,23)" rx="2" ry="2" />
<text  x="108.78" y="479.5" ></text>
</g>
<g >
<title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (231 samples, 0.26%)</title><rect x="535.8" y="261" width="3.1" height="15.0" fill="rgb(251,188,15)" rx="2" ry="2" />
<text  x="538.77" y="271.5" ></text>
</g>
<g >
<title>__lock_get_internal (159 samples, 0.18%)</title><rect x="342.3" y="565" width="2.2" height="15.0" fill="rgb(241,93,19)" rx="2" ry="2" />
<text  x="345.35" y="575.5" ></text>
</g>
<g >
<title>CTransaction::ComputeWitnessHash (715 samples, 0.82%)</title><rect x="1109.2" y="485" width="9.6" height="15.0" fill="rgb(254,98,5)" rx="2" ry="2" />
<text  x="1112.20" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;CBlockIndex*  (123 samples, 0.14%)</title><rect x="47.8" y="645" width="1.7" height="15.0" fill="rgb(245,89,29)" rx="2" ry="2" />
<text  x="50.80" y="655.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;unsigned char&amp;&gt; (29 samples, 0.03%)</title><rect x="515.3" y="405" width="0.4" height="15.0" fill="rgb(242,160,54)" rx="2" ry="2" />
<text  x="518.34" y="415.5" ></text>
</g>
<g >
<title>secp256k1_ecmult_odd_multiples_table_storage_var (34 samples, 0.04%)</title><rect x="1149.4" y="629" width="0.4" height="15.0" fill="rgb(205,67,16)" rx="2" ry="2" />
<text  x="1152.36" y="639.5" ></text>
</g>
<g >
<title>__env_alloc (14 samples, 0.02%)</title><rect x="132.7" y="469" width="0.2" height="15.0" fill="rgb(212,24,24)" rx="2" ry="2" />
<text  x="135.70" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::max_size (11 samples, 0.01%)</title><rect x="1182.5" y="741" width="0.1" height="15.0" fill="rgb(237,77,36)" rx="2" ry="2" />
<text  x="1185.49" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_key (104 samples, 0.12%)</title><rect x="968.7" y="613" width="1.4" height="15.0" fill="rgb(254,229,19)" rx="2" ry="2" />
<text  x="971.69" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (11 samples, 0.01%)</title><rect x="385.2" y="613" width="0.1" height="15.0" fill="rgb(239,10,46)" rx="2" ry="2" />
<text  x="388.18" y="623.5" ></text>
</g>
<g >
<title>__dbc_iget (212 samples, 0.24%)</title><rect x="113.6" y="469" width="2.8" height="15.0" fill="rgb(252,156,4)" rx="2" ry="2" />
<text  x="116.55" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_value (64 samples, 0.07%)</title><rect x="969.0" y="597" width="0.9" height="15.0" fill="rgb(220,228,5)" rx="2" ry="2" />
<text  x="972.02" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (63 samples, 0.07%)</title><rect x="1089.5" y="517" width="0.8" height="15.0" fill="rgb(219,64,37)" rx="2" ry="2" />
<text  x="1092.48" y="527.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (20 samples, 0.02%)</title><rect x="1094.8" y="613" width="0.3" height="15.0" fill="rgb(208,184,19)" rx="2" ry="2" />
<text  x="1097.82" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (22 samples, 0.03%)</title><rect x="834.3" y="533" width="0.3" height="15.0" fill="rgb(216,194,9)" rx="2" ry="2" />
<text  x="837.30" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (176 samples, 0.20%)</title><rect x="837.6" y="581" width="2.4" height="15.0" fill="rgb(239,48,41)" rx="2" ry="2" />
<text  x="840.63" y="591.5" ></text>
</g>
<g >
<title>CKeyPool::Unserialize&lt;CDataStream&gt; (10 samples, 0.01%)</title><rect x="403.7" y="645" width="0.1" height="15.0" fill="rgb(233,140,50)" rx="2" ry="2" />
<text  x="406.67" y="655.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (142 samples, 0.16%)</title><rect x="530.6" y="117" width="2.0" height="15.0" fill="rgb(238,20,12)" rx="2" ry="2" />
<text  x="533.64" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (531 samples, 0.61%)</title><rect x="898.2" y="597" width="7.2" height="15.0" fill="rgb(205,15,5)" rx="2" ry="2" />
<text  x="901.21" y="607.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (29 samples, 0.03%)</title><rect x="536.7" y="101" width="0.4" height="15.0" fill="rgb(236,24,7)" rx="2" ry="2" />
<text  x="539.69" y="111.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (27 samples, 0.03%)</title><rect x="527.8" y="117" width="0.4" height="15.0" fill="rgb(253,161,41)" rx="2" ry="2" />
<text  x="530.81" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (14 samples, 0.02%)</title><rect x="48.7" y="533" width="0.2" height="15.0" fill="rgb(223,44,10)" rx="2" ry="2" />
<text  x="51.66" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;bool&amp;&gt; (9 samples, 0.01%)</title><rect x="1045.5" y="629" width="0.1" height="15.0" fill="rgb(235,85,19)" rx="2" ry="2" />
<text  x="1048.51" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, unsigned long&gt;, char*, unsigned long&amp;&gt; (14 samples, 0.02%)</title><rect x="662.8" y="469" width="0.2" height="15.0" fill="rgb(210,169,9)" rx="2" ry="2" />
<text  x="665.77" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_max_size (12 samples, 0.01%)</title><rect x="1101.8" y="645" width="0.2" height="15.0" fill="rgb(207,85,19)" rx="2" ry="2" />
<text  x="1104.83" y="655.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (79 samples, 0.09%)</title><rect x="373.3" y="597" width="1.1" height="15.0" fill="rgb(210,218,43)" rx="2" ry="2" />
<text  x="376.29" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (10 samples, 0.01%)</title><rect x="850.4" y="357" width="0.1" height="15.0" fill="rgb(250,204,10)" rx="2" ry="2" />
<text  x="853.39" y="367.5" ></text>
</g>
<g >
<title>uint160::uint160 (8 samples, 0.01%)</title><rect x="704.1" y="645" width="0.1" height="15.0" fill="rgb(224,74,22)" rx="2" ry="2" />
<text  x="707.09" y="655.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (24 samples, 0.03%)</title><rect x="409.5" y="613" width="0.3" height="15.0" fill="rgb(218,71,30)" rx="2" ry="2" />
<text  x="412.46" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::construct&lt;char, char const&amp;&gt; (2,824 samples, 3.23%)</title><rect x="252.3" y="565" width="38.1" height="15.0" fill="rgb(234,200,51)" rx="2" ry="2" />
<text  x="255.31" y="575.5" >__g..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_do_relocate (35 samples, 0.04%)</title><rect x="511.7" y="309" width="0.5" height="15.0" fill="rgb(246,217,3)" rx="2" ry="2" />
<text  x="514.70" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_lower_bound (8 samples, 0.01%)</title><rect x="54.8" y="645" width="0.2" height="15.0" fill="rgb(211,84,5)" rx="2" ry="2" />
<text  x="57.85" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (13 samples, 0.01%)</title><rect x="512.6" y="309" width="0.2" height="15.0" fill="rgb(211,174,29)" rx="2" ry="2" />
<text  x="515.62" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::allocate (19 samples, 0.02%)</title><rect x="861.7" y="325" width="0.2" height="15.0" fill="rgb(215,173,8)" rx="2" ry="2" />
<text  x="864.69" y="335.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocator (16 samples, 0.02%)</title><rect x="469.8" y="293" width="0.2" height="15.0" fill="rgb(222,8,15)" rx="2" ry="2" />
<text  x="472.83" y="303.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (47 samples, 0.05%)</title><rect x="178.8" y="533" width="0.6" height="15.0" fill="rgb(206,138,24)" rx="2" ry="2" />
<text  x="181.82" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (33 samples, 0.04%)</title><rect x="814.6" y="437" width="0.5" height="15.0" fill="rgb(241,117,38)" rx="2" ry="2" />
<text  x="817.62" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="1055.1" y="661" width="0.1" height="15.0" fill="rgb(254,19,15)" rx="2" ry="2" />
<text  x="1058.09" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::begin (8 samples, 0.01%)</title><rect x="835.0" y="565" width="0.1" height="15.0" fill="rgb(224,7,30)" rx="2" ry="2" />
<text  x="838.00" y="575.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (311 samples, 0.36%)</title><rect x="1135.8" y="469" width="4.2" height="15.0" fill="rgb(252,39,32)" rx="2" ry="2" />
<text  x="1138.80" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_S_key (32 samples, 0.04%)</title><rect x="1040.2" y="613" width="0.4" height="15.0" fill="rgb(205,124,38)" rx="2" ry="2" />
<text  x="1043.20" y="623.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction&lt;CDataStream&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="517" width="13.8" height="15.0" fill="rgb(215,145,23)" rx="2" ry="2" />
<text  x="1107.95" y="527.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned char*, unsigned char*&gt; (22 samples, 0.03%)</title><rect x="1093.7" y="549" width="0.3" height="15.0" fill="rgb(206,208,18)" rx="2" ry="2" />
<text  x="1096.66" y="559.5" ></text>
</g>
<g >
<title>CHash256::Write (34 samples, 0.04%)</title><rect x="557.4" y="213" width="0.5" height="15.0" fill="rgb(247,17,20)" rx="2" ry="2" />
<text  x="560.43" y="223.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (67 samples, 0.08%)</title><rect x="501.5" y="245" width="0.9" height="15.0" fill="rgb(221,115,41)" rx="2" ry="2" />
<text  x="504.49" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (33 samples, 0.04%)</title><rect x="390.2" y="581" width="0.4" height="15.0" fill="rgb(249,187,40)" rx="2" ry="2" />
<text  x="393.19" y="591.5" ></text>
</g>
<g >
<title>__memp_bhwrite (24 samples, 0.03%)</title><rect x="145.8" y="437" width="0.3" height="15.0" fill="rgb(211,41,24)" rx="2" ry="2" />
<text  x="148.77" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (31 samples, 0.04%)</title><rect x="816.7" y="469" width="0.4" height="15.0" fill="rgb(233,27,20)" rx="2" ry="2" />
<text  x="819.71" y="479.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CKeyPool&amp;&gt; (11 samples, 0.01%)</title><rect x="403.7" y="677" width="0.1" height="15.0" fill="rgb(226,182,20)" rx="2" ry="2" />
<text  x="406.65" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_hint_unique_pos (270 samples, 0.31%)</title><rect x="456.4" y="565" width="3.7" height="15.0" fill="rgb(250,169,12)" rx="2" ry="2" />
<text  x="459.41" y="575.5" ></text>
</g>
<g >
<title>__db_put (62 samples, 0.07%)</title><rect x="103.9" y="469" width="0.9" height="15.0" fill="rgb(218,208,37)" rx="2" ry="2" />
<text  x="106.93" y="479.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (687 samples, 0.78%)</title><rect x="90.6" y="453" width="9.3" height="15.0" fill="rgb(213,188,9)" rx="2" ry="2" />
<text  x="93.63" y="463.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (10 samples, 0.01%)</title><rect x="44.1" y="453" width="0.2" height="15.0" fill="rgb(239,167,54)" rx="2" ry="2" />
<text  x="47.14" y="463.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getBlockDepth (85 samples, 0.10%)</title><rect x="33.7" y="629" width="1.2" height="15.0" fill="rgb(252,56,42)" rx="2" ry="2" />
<text  x="36.72" y="639.5" ></text>
</g>
<g >
<title>uint256::uint256 (9 samples, 0.01%)</title><rect x="525.0" y="277" width="0.2" height="15.0" fill="rgb(231,29,25)" rx="2" ry="2" />
<text  x="528.03" y="287.5" ></text>
</g>
<g >
<title>CHash256::Write (17 samples, 0.02%)</title><rect x="531.5" y="53" width="0.3" height="15.0" fill="rgb(211,84,30)" rx="2" ry="2" />
<text  x="534.53" y="63.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (17 samples, 0.02%)</title><rect x="1151.1" y="741" width="0.2" height="15.0" fill="rgb(244,191,46)" rx="2" ry="2" />
<text  x="1154.08" y="751.5" ></text>
</g>
<g >
<title>BerkeleyBatch::VerifyEnvironment (29 samples, 0.03%)</title><rect x="180.4" y="661" width="0.4" height="15.0" fill="rgb(219,84,1)" rx="2" ry="2" />
<text  x="183.39" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (11 samples, 0.01%)</title><rect x="884.8" y="613" width="0.1" height="15.0" fill="rgb(213,141,50)" rx="2" ry="2" />
<text  x="887.78" y="623.5" ></text>
</g>
<g >
<title>__lock_get (99 samples, 0.11%)</title><rect x="92.5" y="389" width="1.3" height="15.0" fill="rgb(226,131,6)" rx="2" ry="2" />
<text  x="95.51" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (36 samples, 0.04%)</title><rect x="957.1" y="597" width="0.5" height="15.0" fill="rgb(248,41,46)" rx="2" ry="2" />
<text  x="960.12" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (10 samples, 0.01%)</title><rect x="595.1" y="581" width="0.1" height="15.0" fill="rgb(222,177,25)" rx="2" ry="2" />
<text  x="598.05" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (322 samples, 0.37%)</title><rect x="450.7" y="549" width="4.3" height="15.0" fill="rgb(240,100,47)" rx="2" ry="2" />
<text  x="453.70" y="559.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getHeight (17 samples, 0.02%)</title><rect x="34.6" y="613" width="0.3" height="15.0" fill="rgb(210,202,43)" rx="2" ry="2" />
<text  x="37.63" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (11 samples, 0.01%)</title><rect x="1100.2" y="661" width="0.2" height="15.0" fill="rgb(219,182,25)" rx="2" ry="2" />
<text  x="1103.24" y="671.5" ></text>
</g>
<g >
<title>SipHashUint256 (74 samples, 0.08%)</title><rect x="933.8" y="581" width="1.0" height="15.0" fill="rgb(230,149,5)" rx="2" ry="2" />
<text  x="936.76" y="591.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (44 samples, 0.05%)</title><rect x="985.7" y="581" width="0.6" height="15.0" fill="rgb(219,174,42)" rx="2" ry="2" />
<text  x="988.71" y="591.5" ></text>
</g>
<g >
<title>CPubKey::GetID (124 samples, 0.14%)</title><rect x="1118.8" y="725" width="1.7" height="15.0" fill="rgb(235,55,5)" rx="2" ry="2" />
<text  x="1121.83" y="735.5" ></text>
</g>
<g >
<title>WriteBE64 (10 samples, 0.01%)</title><rect x="1189.4" y="581" width="0.1" height="15.0" fill="rgb(235,34,5)" rx="2" ry="2" />
<text  x="1192.39" y="591.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (20 samples, 0.02%)</title><rect x="577.1" y="597" width="0.3" height="15.0" fill="rgb(218,65,51)" rx="2" ry="2" />
<text  x="580.10" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (333 samples, 0.38%)</title><rect x="646.4" y="549" width="4.5" height="15.0" fill="rgb(226,150,35)" rx="2" ry="2" />
<text  x="649.43" y="559.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, uint256&gt; (25 samples, 0.03%)</title><rect x="46.8" y="533" width="0.3" height="15.0" fill="rgb(250,206,14)" rx="2" ry="2" />
<text  x="49.78" y="543.5" ></text>
</g>
<g >
<title>CTxOut::Serialize&lt;CHashWriter&gt; (164 samples, 0.19%)</title><rect x="183.1" y="389" width="2.3" height="15.0" fill="rgb(222,211,29)" rx="2" ry="2" />
<text  x="186.14" y="399.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.02%)</title><rect x="1143.9" y="325" width="0.2" height="15.0" fill="rgb(230,144,42)" rx="2" ry="2" />
<text  x="1146.88" y="335.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (12 samples, 0.01%)</title><rect x="729.2" y="517" width="0.2" height="15.0" fill="rgb(218,0,50)" rx="2" ry="2" />
<text  x="732.25" y="527.5" ></text>
</g>
<g >
<title>COutPoint::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (8 samples, 0.01%)</title><rect x="15.9" y="757" width="0.1" height="15.0" fill="rgb(219,94,37)" rx="2" ry="2" />
<text  x="18.89" y="767.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (15 samples, 0.02%)</title><rect x="87.6" y="405" width="0.2" height="15.0" fill="rgb(222,82,16)" rx="2" ry="2" />
<text  x="90.61" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node_base*&amp;, true&gt; (18 samples, 0.02%)</title><rect x="459.8" y="549" width="0.3" height="15.0" fill="rgb(208,174,5)" rx="2" ry="2" />
<text  x="462.81" y="559.5" ></text>
</g>
<g >
<title>CWallet::LoadCScript (98 samples, 0.11%)</title><rect x="1120.5" y="725" width="1.3" height="15.0" fill="rgb(207,174,15)" rx="2" ry="2" />
<text  x="1123.50" y="735.5" ></text>
</g>
<g >
<title>__db_lget (9 samples, 0.01%)</title><rect x="103.6" y="389" width="0.1" height="15.0" fill="rgb(239,113,33)" rx="2" ry="2" />
<text  x="106.57" y="399.5" ></text>
</g>
<g >
<title>CHash160::Finalize (8 samples, 0.01%)</title><rect x="21.2" y="741" width="0.1" height="15.0" fill="rgb(244,161,10)" rx="2" ry="2" />
<text  x="24.24" y="751.5" ></text>
</g>
<g >
<title>CTxOut::SetNull (38 samples, 0.04%)</title><rect x="484.9" y="357" width="0.6" height="15.0" fill="rgb(254,62,49)" rx="2" ry="2" />
<text  x="487.94" y="367.5" ></text>
</g>
<g >
<title>__db_lput (21 samples, 0.02%)</title><rect x="70.1" y="501" width="0.2" height="15.0" fill="rgb(250,219,41)" rx="2" ry="2" />
<text  x="73.06" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::destroy&lt;char&gt; (11 samples, 0.01%)</title><rect x="635.4" y="533" width="0.2" height="15.0" fill="rgb(210,225,20)" rx="2" ry="2" />
<text  x="638.42" y="543.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="533" width="4.2" height="15.0" fill="rgb(218,174,16)" rx="2" ry="2" />
<text  x="1138.80" y="543.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (35 samples, 0.04%)</title><rect x="495.2" y="357" width="0.5" height="15.0" fill="rgb(254,115,25)" rx="2" ry="2" />
<text  x="498.24" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (8 samples, 0.01%)</title><rect x="882.0" y="565" width="0.1" height="15.0" fill="rgb(211,148,17)" rx="2" ry="2" />
<text  x="885.03" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTxOut&gt;::new_allocator (10 samples, 0.01%)</title><rect x="1168.7" y="741" width="0.1" height="15.0" fill="rgb(214,218,46)" rx="2" ry="2" />
<text  x="1171.69" y="751.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;CTxIn const*, CTxIn*&gt; (11 samples, 0.01%)</title><rect x="482.8" y="293" width="0.1" height="15.0" fill="rgb(205,116,27)" rx="2" ry="2" />
<text  x="485.80" y="303.5" ></text>
</g>
<g >
<title>__dbc_iget (341 samples, 0.39%)</title><rect x="158.1" y="549" width="4.6" height="15.0" fill="rgb(213,225,37)" rx="2" ry="2" />
<text  x="161.12" y="559.5" ></text>
</g>
<g >
<title>__db_cursor_int (21 samples, 0.02%)</title><rect x="73.4" y="517" width="0.2" height="15.0" fill="rgb(247,50,28)" rx="2" ry="2" />
<text  x="76.35" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (35 samples, 0.04%)</title><rect x="1171.9" y="741" width="0.5" height="15.0" fill="rgb(209,153,9)" rx="2" ry="2" />
<text  x="1174.90" y="751.5" ></text>
</g>
<g >
<title>operator&gt; (58 samples, 0.07%)</title><rect x="51.3" y="613" width="0.8" height="15.0" fill="rgb(208,172,50)" rx="2" ry="2" />
<text  x="54.34" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="1089.3" y="517" width="0.2" height="15.0" fill="rgb(211,115,29)" rx="2" ry="2" />
<text  x="1092.35" y="527.5" ></text>
</g>
<g >
<title>__db_lput (10 samples, 0.01%)</title><rect x="169.3" y="517" width="0.1" height="15.0" fill="rgb(216,151,12)" rx="2" ry="2" />
<text  x="172.27" y="527.5" ></text>
</g>
<g >
<title>LockAssertion::LockAssertion&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt; (15 samples, 0.02%)</title><rect x="55.2" y="613" width="0.2" height="15.0" fill="rgb(239,133,4)" rx="2" ry="2" />
<text  x="58.17" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (117 samples, 0.13%)</title><rect x="876.0" y="533" width="1.6" height="15.0" fill="rgb(240,46,1)" rx="2" ry="2" />
<text  x="879.03" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (2,250 samples, 2.57%)</title><rect x="414.1" y="565" width="30.3" height="15.0" fill="rgb(205,157,50)" rx="2" ry="2" />
<text  x="417.07" y="575.5" >st..</text>
</g>
<g >
<title>__GI___libc_malloc (34 samples, 0.04%)</title><rect x="966.9" y="549" width="0.4" height="15.0" fill="rgb(221,13,5)" rx="2" ry="2" />
<text  x="969.89" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_emplace&lt;std::pair&lt;COutPoint, uint256&gt; &gt; (18 samples, 0.02%)</title><rect x="1153.2" y="757" width="0.2" height="15.0" fill="rgb(206,52,6)" rx="2" ry="2" />
<text  x="1156.18" y="767.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (12 samples, 0.01%)</title><rect x="576.3" y="613" width="0.2" height="15.0" fill="rgb(236,122,4)" rx="2" ry="2" />
<text  x="579.35" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (75 samples, 0.09%)</title><rect x="470.4" y="341" width="1.0" height="15.0" fill="rgb(238,73,21)" rx="2" ry="2" />
<text  x="473.43" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (28 samples, 0.03%)</title><rect x="826.2" y="501" width="0.4" height="15.0" fill="rgb(234,128,51)" rx="2" ry="2" />
<text  x="829.24" y="511.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (132 samples, 0.15%)</title><rect x="1133.6" y="645" width="1.8" height="15.0" fill="rgb(253,40,40)" rx="2" ry="2" />
<text  x="1136.62" y="655.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="1174.1" y="757" width="0.1" height="15.0" fill="rgb(244,167,34)" rx="2" ry="2" />
<text  x="1177.13" y="767.5" ></text>
</g>
<g >
<title>__memp_pgread (33 samples, 0.04%)</title><rect x="136.4" y="485" width="0.4" height="15.0" fill="rgb(242,45,54)" rx="2" ry="2" />
<text  x="139.38" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="742.0" y="581" width="0.1" height="15.0" fill="rgb(237,34,39)" rx="2" ry="2" />
<text  x="745.03" y="591.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="277" width="4.2" height="15.0" fill="rgb(253,228,47)" rx="2" ry="2" />
<text  x="1138.80" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (58 samples, 0.07%)</title><rect x="726.4" y="581" width="0.8" height="15.0" fill="rgb(209,9,4)" rx="2" ry="2" />
<text  x="729.42" y="591.5" ></text>
</g>
<g >
<title>__dbc_iget (48 samples, 0.05%)</title><rect x="103.3" y="453" width="0.6" height="15.0" fill="rgb(244,151,11)" rx="2" ry="2" />
<text  x="106.28" y="463.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="309" width="3.8" height="15.0" fill="rgb(221,13,14)" rx="2" ry="2" />
<text  x="1142.99" y="319.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (23 samples, 0.03%)</title><rect x="477.7" y="149" width="0.4" height="15.0" fill="rgb(206,127,22)" rx="2" ry="2" />
<text  x="480.74" y="159.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.03%)</title><rect x="179.9" y="469" width="0.3" height="15.0" fill="rgb(242,99,47)" rx="2" ry="2" />
<text  x="182.87" y="479.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::internal_apply_visitor&lt;boost::detail::variant::destroyer&gt; (48 samples, 0.05%)</title><rect x="818.0" y="581" width="0.7" height="15.0" fill="rgb(231,172,6)" rx="2" ry="2" />
<text  x="821.02" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_M_ptr (15 samples, 0.02%)</title><rect x="848.2" y="357" width="0.2" height="15.0" fill="rgb(223,8,11)" rx="2" ry="2" />
<text  x="851.23" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_put_node (8 samples, 0.01%)</title><rect x="1048.1" y="581" width="0.1" height="15.0" fill="rgb(219,155,54)" rx="2" ry="2" />
<text  x="1051.08" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (12 samples, 0.01%)</title><rect x="852.0" y="341" width="0.2" height="15.0" fill="rgb(254,154,14)" rx="2" ry="2" />
<text  x="855.02" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt;::allocate (44 samples, 0.05%)</title><rect x="662.1" y="469" width="0.6" height="15.0" fill="rgb(220,127,53)" rx="2" ry="2" />
<text  x="665.14" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::~pair (12 samples, 0.01%)</title><rect x="735.0" y="549" width="0.1" height="15.0" fill="rgb(224,201,39)" rx="2" ry="2" />
<text  x="737.98" y="559.5" ></text>
</g>
<g >
<title>CWallet::Verify (39 samples, 0.04%)</title><rect x="1143.9" y="725" width="0.5" height="15.0" fill="rgb(226,56,41)" rx="2" ry="2" />
<text  x="1146.88" y="735.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::lower_bound (108 samples, 0.12%)</title><rect x="852.2" y="389" width="1.5" height="15.0" fill="rgb(250,69,12)" rx="2" ry="2" />
<text  x="855.25" y="399.5" ></text>
</g>
<g >
<title>operator+ (10 samples, 0.01%)</title><rect x="50.1" y="661" width="0.1" height="15.0" fill="rgb(219,224,7)" rx="2" ry="2" />
<text  x="53.09" y="671.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (17 samples, 0.02%)</title><rect x="618.1" y="533" width="0.2" height="15.0" fill="rgb(227,68,26)" rx="2" ry="2" />
<text  x="621.07" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_bucket_index (10 samples, 0.01%)</title><rect x="921.7" y="533" width="0.1" height="15.0" fill="rgb(231,72,54)" rx="2" ry="2" />
<text  x="924.68" y="543.5" ></text>
</g>
<g >
<title>__bam_get_root (42 samples, 0.05%)</title><rect x="82.6" y="421" width="0.6" height="15.0" fill="rgb(232,129,33)" rx="2" ry="2" />
<text  x="85.61" y="431.5" ></text>
</g>
<g >
<title>std::__addressof&lt;unsigned char&gt; (109 samples, 0.12%)</title><rect x="620.4" y="581" width="1.5" height="15.0" fill="rgb(215,90,7)" rx="2" ry="2" />
<text  x="623.44" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_Tuple_impl (28 samples, 0.03%)</title><rect x="946.8" y="565" width="0.4" height="15.0" fill="rgb(251,77,53)" rx="2" ry="2" />
<text  x="949.82" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_v (20 samples, 0.02%)</title><rect x="905.1" y="581" width="0.3" height="15.0" fill="rgb(236,218,29)" rx="2" ry="2" />
<text  x="908.10" y="591.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (19 samples, 0.02%)</title><rect x="449.7" y="597" width="0.2" height="15.0" fill="rgb(215,20,23)" rx="2" ry="2" />
<text  x="452.66" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (55 samples, 0.06%)</title><rect x="569.3" y="501" width="0.7" height="15.0" fill="rgb(250,96,15)" rx="2" ry="2" />
<text  x="572.29" y="511.5" ></text>
</g>
<g >
<title>Db::verify (39 samples, 0.04%)</title><rect x="1143.9" y="661" width="0.5" height="15.0" fill="rgb(250,228,6)" rx="2" ry="2" />
<text  x="1146.88" y="671.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;LockedPool::LockedPageArena&gt;::operator++ (13 samples, 0.01%)</title><rect x="863.0" y="405" width="0.2" height="15.0" fill="rgb(221,173,21)" rx="2" ry="2" />
<text  x="866.03" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (37 samples, 0.04%)</title><rect x="821.3" y="549" width="0.5" height="15.0" fill="rgb(229,27,48)" rx="2" ry="2" />
<text  x="824.28" y="559.5" ></text>
</g>
<g >
<title>__bam_stkrel (26 samples, 0.03%)</title><rect x="154.3" y="485" width="0.3" height="15.0" fill="rgb(207,126,21)" rx="2" ry="2" />
<text  x="157.26" y="495.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (9 samples, 0.01%)</title><rect x="21.2" y="757" width="0.2" height="15.0" fill="rgb(235,4,10)" rx="2" ry="2" />
<text  x="24.24" y="767.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="113.0" y="437" width="0.1" height="15.0" fill="rgb(237,8,4)" rx="2" ry="2" />
<text  x="116.01" y="447.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, CScript&amp;&gt; (275 samples, 0.31%)</title><rect x="475.2" y="309" width="3.7" height="15.0" fill="rgb(221,117,1)" rx="2" ry="2" />
<text  x="478.24" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (25 samples, 0.03%)</title><rect x="615.7" y="437" width="0.4" height="15.0" fill="rgb(243,180,22)" rx="2" ry="2" />
<text  x="618.74" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (440 samples, 0.50%)</title><rect x="450.5" y="565" width="5.9" height="15.0" fill="rgb(230,177,23)" rx="2" ry="2" />
<text  x="453.48" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (170 samples, 0.19%)</title><rect x="656.2" y="501" width="2.2" height="15.0" fill="rgb(218,37,4)" rx="2" ry="2" />
<text  x="659.16" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (111 samples, 0.13%)</title><rect x="55.8" y="565" width="1.5" height="15.0" fill="rgb(228,195,30)" rx="2" ry="2" />
<text  x="58.79" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase_aux (19 samples, 0.02%)</title><rect x="1156.4" y="757" width="0.2" height="15.0" fill="rgb(238,85,23)" rx="2" ry="2" />
<text  x="1159.39" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (38 samples, 0.04%)</title><rect x="859.9" y="293" width="0.5" height="15.0" fill="rgb(232,48,49)" rx="2" ry="2" />
<text  x="862.86" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;LockedPool::LockedPageArena&gt;::_M_ptr (18 samples, 0.02%)</title><rect x="862.8" y="373" width="0.2" height="15.0" fill="rgb(217,62,3)" rx="2" ry="2" />
<text  x="865.79" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, unsigned long, true&gt;::_S_equals (32 samples, 0.04%)</title><rect x="821.3" y="533" width="0.5" height="15.0" fill="rgb(237,143,16)" rx="2" ry="2" />
<text  x="824.33" y="543.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (23 samples, 0.03%)</title><rect x="885.2" y="645" width="0.3" height="15.0" fill="rgb(246,134,2)" rx="2" ry="2" />
<text  x="888.16" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;char*, unsigned long&amp;&gt; (157 samples, 0.18%)</title><rect x="615.3" y="501" width="2.1" height="15.0" fill="rgb(226,3,50)" rx="2" ry="2" />
<text  x="618.27" y="511.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (164 samples, 0.19%)</title><rect x="183.1" y="437" width="2.3" height="15.0" fill="rgb(235,190,28)" rx="2" ry="2" />
<text  x="186.14" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;true&gt;::__destroy&lt;unsigned char*&gt; (9 samples, 0.01%)</title><rect x="1153.0" y="741" width="0.2" height="15.0" fill="rgb(225,85,5)" rx="2" ry="2" />
<text  x="1156.05" y="751.5" ></text>
</g>
<g >
<title>CWallet::Verify (20 samples, 0.02%)</title><rect x="1144.6" y="709" width="0.2" height="15.0" fill="rgb(247,96,15)" rx="2" ry="2" />
<text  x="1147.57" y="719.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (9 samples, 0.01%)</title><rect x="784.8" y="565" width="0.1" height="15.0" fill="rgb(243,226,24)" rx="2" ry="2" />
<text  x="787.80" y="575.5" ></text>
</g>
<g >
<title>__dbc_iget (71 samples, 0.08%)</title><rect x="102.2" y="453" width="1.0" height="15.0" fill="rgb(206,153,16)" rx="2" ry="2" />
<text  x="105.22" y="463.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (33 samples, 0.04%)</title><rect x="1115.7" y="229" width="0.5" height="15.0" fill="rgb(230,96,20)" rx="2" ry="2" />
<text  x="1118.72" y="239.5" ></text>
</g>
<g >
<title>CSHA256::Write (10 samples, 0.01%)</title><rect x="1054.9" y="645" width="0.1" height="15.0" fill="rgb(239,157,28)" rx="2" ry="2" />
<text  x="1057.91" y="655.5" ></text>
</g>
<g >
<title>__gthread_active_p (10 samples, 0.01%)</title><rect x="940.2" y="485" width="0.2" height="15.0" fill="rgb(234,158,37)" rx="2" ry="2" />
<text  x="943.25" y="495.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocator (26 samples, 0.03%)</title><rect x="1046.0" y="613" width="0.4" height="15.0" fill="rgb(212,178,1)" rx="2" ry="2" />
<text  x="1049.03" y="623.5" ></text>
</g>
<g >
<title>__bam_defcmp (14 samples, 0.02%)</title><rect x="107.7" y="389" width="0.2" height="15.0" fill="rgb(245,197,12)" rx="2" ry="2" />
<text  x="110.69" y="399.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (38 samples, 0.04%)</title><rect x="1126.6" y="549" width="0.5" height="15.0" fill="rgb(212,148,12)" rx="2" ry="2" />
<text  x="1129.64" y="559.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;LockedPool::LockedPageArena&gt;::_List_iterator (8 samples, 0.01%)</title><rect x="617.5" y="517" width="0.1" height="15.0" fill="rgb(217,112,41)" rx="2" ry="2" />
<text  x="620.49" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::base (30 samples, 0.03%)</title><rect x="813.2" y="405" width="0.5" height="15.0" fill="rgb(254,123,29)" rx="2" ry="2" />
<text  x="816.25" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (17 samples, 0.02%)</title><rect x="511.4" y="309" width="0.2" height="15.0" fill="rgb(224,156,44)" rx="2" ry="2" />
<text  x="514.38" y="319.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (35 samples, 0.04%)</title><rect x="573.1" y="597" width="0.5" height="15.0" fill="rgb(240,89,16)" rx="2" ry="2" />
<text  x="576.09" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::max_size (13 samples, 0.01%)</title><rect x="397.5" y="421" width="0.2" height="15.0" fill="rgb(250,219,21)" rx="2" ry="2" />
<text  x="400.48" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, char*&gt;, unsigned long&amp;, char*&amp;&gt; (24 samples, 0.03%)</title><rect x="1079.3" y="501" width="0.4" height="15.0" fill="rgb(223,142,6)" rx="2" ry="2" />
<text  x="1082.35" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::end (8 samples, 0.01%)</title><rect x="814.0" y="453" width="0.1" height="15.0" fill="rgb(238,1,32)" rx="2" ry="2" />
<text  x="817.01" y="463.5" ></text>
</g>
<g >
<title>CTxIn::Serialize&lt;CHashWriter&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="405" width="3.8" height="15.0" fill="rgb(222,213,20)" rx="2" ry="2" />
<text  x="1142.99" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;BerkeleyEnvironment,  (11 samples, 0.01%)</title><rect x="180.8" y="613" width="0.1" height="15.0" fill="rgb(213,61,40)" rx="2" ry="2" />
<text  x="183.78" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (39 samples, 0.04%)</title><rect x="858.2" y="357" width="0.6" height="15.0" fill="rgb(246,160,6)" rx="2" ry="2" />
<text  x="861.24" y="367.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::operator&lt;&lt;= (10 samples, 0.01%)</title><rect x="49.8" y="645" width="0.1" height="15.0" fill="rgb(249,7,9)" rx="2" ry="2" />
<text  x="52.80" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="496.8" y="309" width="0.1" height="15.0" fill="rgb(205,45,36)" rx="2" ry="2" />
<text  x="499.84" y="319.5" ></text>
</g>
<g >
<title>__db_put (350 samples, 0.40%)</title><rect x="73.3" y="549" width="4.7" height="15.0" fill="rgb(228,79,30)" rx="2" ry="2" />
<text  x="76.28" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;CKeyID, CKey, SaltedIDHasher, std::equal_to&lt;CKeyID&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt; &gt;::operator[] (2,394 samples, 2.73%)</title><rect x="836.8" y="629" width="32.3" height="15.0" fill="rgb(223,130,53)" rx="2" ry="2" />
<text  x="839.83" y="639.5" >st..</text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (16 samples, 0.02%)</title><rect x="539.0" y="293" width="0.2" height="15.0" fill="rgb(219,161,16)" rx="2" ry="2" />
<text  x="541.95" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (39 samples, 0.04%)</title><rect x="461.9" y="549" width="0.5" height="15.0" fill="rgb(248,219,39)" rx="2" ry="2" />
<text  x="464.86" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::vector (16 samples, 0.02%)</title><rect x="1179.9" y="757" width="0.2" height="15.0" fill="rgb(231,212,51)" rx="2" ry="2" />
<text  x="1182.93" y="767.5" ></text>
</g>
<g >
<title>EnterCritical (623 samples, 0.71%)</title><rect x="936.2" y="565" width="8.4" height="15.0" fill="rgb(242,23,10)" rx="2" ry="2" />
<text  x="939.20" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTxIn&gt;::allocate (29 samples, 0.03%)</title><rect x="480.8" y="293" width="0.4" height="15.0" fill="rgb(254,212,47)" rx="2" ry="2" />
<text  x="483.80" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (21 samples, 0.02%)</title><rect x="391.3" y="613" width="0.3" height="15.0" fill="rgb(230,54,31)" rx="2" ry="2" />
<text  x="394.31" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (18 samples, 0.02%)</title><rect x="141.3" y="421" width="0.3" height="15.0" fill="rgb(236,36,35)" rx="2" ry="2" />
<text  x="144.31" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned char&gt;::allocator (11 samples, 0.01%)</title><rect x="514.4" y="325" width="0.1" height="15.0" fill="rgb(252,138,50)" rx="2" ry="2" />
<text  x="517.36" y="335.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (391 samples, 0.45%)</title><rect x="1113.6" y="373" width="5.2" height="15.0" fill="rgb(245,117,32)" rx="2" ry="2" />
<text  x="1116.56" y="383.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (17 samples, 0.02%)</title><rect x="584.0" y="613" width="0.2" height="15.0" fill="rgb(219,171,38)" rx="2" ry="2" />
<text  x="586.96" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CKeyID, std::pair&lt;CKeyID const, long&gt;, std::_Select1st&lt;std::pair&lt;CKeyID const, long&gt; &gt;, std::less&lt;CKeyID&gt;, std::allocator&lt;std::pair&lt;CKeyID const, long&gt; &gt; &gt;::lower_bound (8 samples, 0.01%)</title><rect x="894.1" y="629" width="0.2" height="15.0" fill="rgb(210,225,7)" rx="2" ry="2" />
<text  x="897.14" y="639.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (8 samples, 0.01%)</title><rect x="829.3" y="581" width="0.1" height="15.0" fill="rgb(217,66,39)" rx="2" ry="2" />
<text  x="832.28" y="591.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (21 samples, 0.02%)</title><rect x="1090.8" y="581" width="0.3" height="15.0" fill="rgb(254,53,44)" rx="2" ry="2" />
<text  x="1093.80" y="591.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (109 samples, 0.12%)</title><rect x="100.5" y="421" width="1.5" height="15.0" fill="rgb(218,125,8)" rx="2" ry="2" />
<text  x="103.55" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (18 samples, 0.02%)</title><rect x="816.0" y="389" width="0.2" height="15.0" fill="rgb(217,195,11)" rx="2" ry="2" />
<text  x="819.00" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_impl::~_Vector_impl (13 samples, 0.01%)</title><rect x="1021.4" y="629" width="0.2" height="15.0" fill="rgb(220,131,3)" rx="2" ry="2" />
<text  x="1024.40" y="639.5" ></text>
</g>
<g >
<title>DbEnv::open (19 samples, 0.02%)</title><rect x="1104.7" y="661" width="0.2" height="15.0" fill="rgb(233,47,24)" rx="2" ry="2" />
<text  x="1107.68" y="671.5" ></text>
</g>
<g >
<title>CSHA256::Write (9 samples, 0.01%)</title><rect x="785.5" y="565" width="0.2" height="15.0" fill="rgb(214,105,42)" rx="2" ry="2" />
<text  x="788.54" y="575.5" ></text>
</g>
<g >
<title>ShiftMessageB (24 samples, 0.03%)</title><rect x="1139.4" y="165" width="0.3" height="15.0" fill="rgb(225,147,23)" rx="2" ry="2" />
<text  x="1142.41" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (32 samples, 0.04%)</title><rect x="80.4" y="453" width="0.4" height="15.0" fill="rgb(249,130,27)" rx="2" ry="2" />
<text  x="83.41" y="463.5" ></text>
</g>
<g >
<title>__memp_fput (8 samples, 0.01%)</title><rect x="162.6" y="517" width="0.1" height="15.0" fill="rgb(211,201,10)" rx="2" ry="2" />
<text  x="165.60" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="579.7" y="597" width="0.2" height="15.0" fill="rgb(215,208,32)" rx="2" ry="2" />
<text  x="582.75" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_Vector_base (9 samples, 0.01%)</title><rect x="892.5" y="501" width="0.1" height="15.0" fill="rgb(205,120,5)" rx="2" ry="2" />
<text  x="895.51" y="511.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (51 samples, 0.06%)</title><rect x="766.2" y="613" width="0.7" height="15.0" fill="rgb(243,13,51)" rx="2" ry="2" />
<text  x="769.19" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_valptr (18 samples, 0.02%)</title><rect x="905.1" y="565" width="0.3" height="15.0" fill="rgb(230,38,54)" rx="2" ry="2" />
<text  x="908.13" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::destroy&lt;char&gt; (9 samples, 0.01%)</title><rect x="44.5" y="421" width="0.1" height="15.0" fill="rgb(222,28,13)" rx="2" ry="2" />
<text  x="47.49" y="431.5" ></text>
</g>
<g >
<title>__bam_cmp (23 samples, 0.03%)</title><rect x="114.1" y="405" width="0.3" height="15.0" fill="rgb(224,71,45)" rx="2" ry="2" />
<text  x="117.06" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (53 samples, 0.06%)</title><rect x="681.7" y="501" width="0.7" height="15.0" fill="rgb(232,25,26)" rx="2" ry="2" />
<text  x="684.73" y="511.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::base (8 samples, 0.01%)</title><rect x="1051.5" y="581" width="0.1" height="15.0" fill="rgb(252,157,25)" rx="2" ry="2" />
<text  x="1054.47" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::resize (1,638 samples, 1.87%)</title><rect x="845.8" y="501" width="22.0" height="15.0" fill="rgb(211,191,13)" rx="2" ry="2" />
<text  x="848.75" y="511.5" >s..</text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;&gt; (1,367 samples, 1.56%)</title><rect x="444.8" y="629" width="18.5" height="15.0" fill="rgb(207,47,18)" rx="2" ry="2" />
<text  x="447.84" y="639.5" ></text>
</g>
<g >
<title>std::pair&lt;CKeyID const, CKeyMetadata&gt;::pair&lt;CKeyID const&amp;, 0ul&gt; (63 samples, 0.07%)</title><rect x="891.9" y="565" width="0.9" height="15.0" fill="rgb(224,221,33)" rx="2" ry="2" />
<text  x="894.93" y="575.5" ></text>
</g>
<g >
<title>__bam_iitem (65 samples, 0.07%)</title><rect x="119.9" y="437" width="0.9" height="15.0" fill="rgb(221,170,29)" rx="2" ry="2" />
<text  x="122.91" y="447.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, COutPoint&gt; (132 samples, 0.15%)</title><rect x="1027.5" y="469" width="1.8" height="15.0" fill="rgb(205,208,50)" rx="2" ry="2" />
<text  x="1030.49" y="479.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (9 samples, 0.01%)</title><rect x="830.2" y="533" width="0.1" height="15.0" fill="rgb(206,208,7)" rx="2" ry="2" />
<text  x="833.23" y="543.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, uint256, std::allocator&lt;uint256&gt;, uint256&gt; (56 samples, 0.06%)</title><rect x="573.9" y="597" width="0.8" height="15.0" fill="rgb(230,183,13)" rx="2" ry="2" />
<text  x="576.90" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, COutPoint const, uint256&gt; (16 samples, 0.02%)</title><rect x="930.3" y="549" width="0.2" height="15.0" fill="rgb(226,113,40)" rx="2" ry="2" />
<text  x="933.27" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_addr (25 samples, 0.03%)</title><rect x="832.9" y="453" width="0.3" height="15.0" fill="rgb(216,113,51)" rx="2" ry="2" />
<text  x="835.90" y="463.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="245" width="3.8" height="15.0" fill="rgb(226,80,3)" rx="2" ry="2" />
<text  x="1142.99" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (471 samples, 0.54%)</title><rect x="956.9" y="613" width="6.4" height="15.0" fill="rgb(242,11,20)" rx="2" ry="2" />
<text  x="959.92" y="623.5" ></text>
</g>
<g >
<title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (301 samples, 0.34%)</title><rect x="545.6" y="261" width="4.1" height="15.0" fill="rgb(248,46,25)" rx="2" ry="2" />
<text  x="548.64" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (11 samples, 0.01%)</title><rect x="606.4" y="629" width="0.2" height="15.0" fill="rgb(219,51,1)" rx="2" ry="2" />
<text  x="609.44" y="639.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::iterator::iterator (9 samples, 0.01%)</title><rect x="810.9" y="437" width="0.1" height="15.0" fill="rgb(230,139,10)" rx="2" ry="2" />
<text  x="813.90" y="447.5" ></text>
</g>
<g >
<title>CSHA256::Write (12 samples, 0.01%)</title><rect x="536.5" y="69" width="0.2" height="15.0" fill="rgb(225,63,38)" rx="2" ry="2" />
<text  x="539.53" y="79.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (9 samples, 0.01%)</title><rect x="600.6" y="613" width="0.1" height="15.0" fill="rgb(246,25,43)" rx="2" ry="2" />
<text  x="603.59" y="623.5" ></text>
</g>
<g >
<title>__bam_search (202 samples, 0.23%)</title><rect x="169.7" y="501" width="2.7" height="15.0" fill="rgb(211,226,5)" rx="2" ry="2" />
<text  x="172.67" y="511.5" ></text>
</g>
<g >
<title>__memp_bhfree (18 samples, 0.02%)</title><rect x="111.6" y="373" width="0.3" height="15.0" fill="rgb(238,216,38)" rx="2" ry="2" />
<text  x="114.62" y="383.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (164 samples, 0.19%)</title><rect x="183.1" y="165" width="2.3" height="15.0" fill="rgb(213,181,46)" rx="2" ry="2" />
<text  x="186.14" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (117 samples, 0.13%)</title><rect x="739.2" y="613" width="1.6" height="15.0" fill="rgb(238,222,38)" rx="2" ry="2" />
<text  x="742.18" y="623.5" ></text>
</g>
<g >
<title>__dbc_iput (249 samples, 0.28%)</title><rect x="169.6" y="549" width="3.4" height="15.0" fill="rgb(219,171,12)" rx="2" ry="2" />
<text  x="172.61" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::find (57 samples, 0.07%)</title><rect x="1081.0" y="565" width="0.8" height="15.0" fill="rgb(240,59,34)" rx="2" ry="2" />
<text  x="1084.00" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (11 samples, 0.01%)</title><rect x="409.3" y="613" width="0.1" height="15.0" fill="rgb(209,78,13)" rx="2" ry="2" />
<text  x="412.27" y="623.5" ></text>
</g>
<g >
<title>CBlockIndex::SetNull (9 samples, 0.01%)</title><rect x="47.9" y="581" width="0.1" height="15.0" fill="rgb(208,125,20)" rx="2" ry="2" />
<text  x="50.87" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_get_Tp_allocator (9 samples, 0.01%)</title><rect x="664.7" y="629" width="0.1" height="15.0" fill="rgb(228,34,27)" rx="2" ry="2" />
<text  x="667.73" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_trylock (8 samples, 0.01%)</title><rect x="144.4" y="437" width="0.1" height="15.0" fill="rgb(228,208,31)" rx="2" ry="2" />
<text  x="147.37" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::erase[abi:cxx11] (48 samples, 0.05%)</title><rect x="612.3" y="501" width="0.6" height="15.0" fill="rgb(235,129,21)" rx="2" ry="2" />
<text  x="615.29" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_const_iterator&lt;COutPoint&gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;&amp;, bool&amp;, true&gt; (27 samples, 0.03%)</title><rect x="1045.3" y="645" width="0.4" height="15.0" fill="rgb(235,100,34)" rx="2" ry="2" />
<text  x="1048.29" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (28 samples, 0.03%)</title><rect x="928.8" y="501" width="0.3" height="15.0" fill="rgb(234,143,51)" rx="2" ry="2" />
<text  x="931.75" y="511.5" ></text>
</g>
<g >
<title>KeyOriginInfo::clear (14 samples, 0.02%)</title><rect x="684.7" y="645" width="0.2" height="15.0" fill="rgb(228,189,24)" rx="2" ry="2" />
<text  x="687.74" y="655.5" ></text>
</g>
<g >
<title>__db_cursor (27 samples, 0.03%)</title><rect x="89.3" y="469" width="0.4" height="15.0" fill="rgb(252,152,34)" rx="2" ry="2" />
<text  x="92.35" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (8 samples, 0.01%)</title><rect x="119.1" y="357" width="0.2" height="15.0" fill="rgb(212,126,17)" rx="2" ry="2" />
<text  x="122.14" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_begin (19 samples, 0.02%)</title><rect x="852.4" y="357" width="0.3" height="15.0" fill="rgb(211,130,49)" rx="2" ry="2" />
<text  x="855.41" y="367.5" ></text>
</g>
<g >
<title>__bam_defcmp (13 samples, 0.01%)</title><rect x="75.1" y="453" width="0.1" height="15.0" fill="rgb(233,187,46)" rx="2" ry="2" />
<text  x="78.06" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::~vector (73 samples, 0.08%)</title><rect x="602.2" y="629" width="1.0" height="15.0" fill="rgb(212,97,46)" rx="2" ry="2" />
<text  x="605.21" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;::base (12 samples, 0.01%)</title><rect x="884.2" y="501" width="0.2" height="15.0" fill="rgb(244,130,1)" rx="2" ry="2" />
<text  x="887.23" y="511.5" ></text>
</g>
<g >
<title>__os_malloc (13 samples, 0.01%)</title><rect x="132.7" y="453" width="0.2" height="15.0" fill="rgb(240,169,0)" rx="2" ry="2" />
<text  x="135.71" y="463.5" ></text>
</g>
<g >
<title>CHashWriter::GetVersion (12 samples, 0.01%)</title><rect x="523.4" y="341" width="0.2" height="15.0" fill="rgb(234,37,46)" rx="2" ry="2" />
<text  x="526.41" y="351.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::~LockImpl (8 samples, 0.01%)</title><rect x="1150.4" y="757" width="0.1" height="15.0" fill="rgb(236,182,28)" rx="2" ry="2" />
<text  x="1153.39" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;CDBIterator, std::default_delete&lt;CDBIterator&gt; &gt;::operator (9 samples, 0.01%)</title><rect x="49.5" y="661" width="0.1" height="15.0" fill="rgb(226,4,42)" rx="2" ry="2" />
<text  x="52.49" y="671.5" ></text>
</g>
<g >
<title>COutPoint::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (146 samples, 0.17%)</title><rect x="473.2" y="245" width="2.0" height="15.0" fill="rgb(212,173,17)" rx="2" ry="2" />
<text  x="476.22" y="255.5" ></text>
</g>
<g >
<title>__uint32_identity (12 samples, 0.01%)</title><rect x="524.4" y="293" width="0.2" height="15.0" fill="rgb(227,150,20)" rx="2" ry="2" />
<text  x="527.43" y="303.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (31 samples, 0.04%)</title><rect x="764.9" y="581" width="0.5" height="15.0" fill="rgb(246,112,21)" rx="2" ry="2" />
<text  x="767.95" y="591.5" ></text>
</g>
<g >
<title>LockedPool::alloc (9 samples, 0.01%)</title><rect x="21.6" y="757" width="0.1" height="15.0" fill="rgb(231,27,23)" rx="2" ry="2" />
<text  x="24.60" y="767.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (348 samples, 0.40%)</title><rect x="404.5" y="581" width="4.7" height="15.0" fill="rgb(222,175,34)" rx="2" ry="2" />
<text  x="407.51" y="591.5" ></text>
</g>
<g >
<title>CDataStream::Init (13 samples, 0.01%)</title><rect x="383.6" y="677" width="0.2" height="15.0" fill="rgb(244,17,49)" rx="2" ry="2" />
<text  x="386.60" y="687.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (18 samples, 0.02%)</title><rect x="167.2" y="437" width="0.2" height="15.0" fill="rgb(208,63,49)" rx="2" ry="2" />
<text  x="170.17" y="447.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned char const*, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (44 samples, 0.05%)</title><rect x="1099.5" y="613" width="0.6" height="15.0" fill="rgb(227,135,22)" rx="2" ry="2" />
<text  x="1102.47" y="623.5" ></text>
</g>
<g >
<title>__db_get (339 samples, 0.39%)</title><rect x="164.3" y="565" width="4.6" height="15.0" fill="rgb(243,162,22)" rx="2" ry="2" />
<text  x="167.29" y="575.5" ></text>
</g>
<g >
<title>__memp_pgread (9 samples, 0.01%)</title><rect x="101.9" y="373" width="0.1" height="15.0" fill="rgb(211,41,30)" rx="2" ry="2" />
<text  x="104.88" y="383.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (45 samples, 0.05%)</title><rect x="893.5" y="613" width="0.6" height="15.0" fill="rgb(248,121,46)" rx="2" ry="2" />
<text  x="896.47" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_construct&lt;char, char const&amp;&gt; (4,946 samples, 5.65%)</title><rect x="239.1" y="581" width="66.7" height="15.0" fill="rgb(244,23,48)" rx="2" ry="2" />
<text  x="242.11" y="591.5" >std::al..</text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (55 samples, 0.06%)</title><rect x="705.8" y="581" width="0.7" height="15.0" fill="rgb(223,220,23)" rx="2" ry="2" />
<text  x="708.77" y="591.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (416 samples, 0.48%)</title><rect x="534.6" y="341" width="5.6" height="15.0" fill="rgb(247,188,46)" rx="2" ry="2" />
<text  x="537.59" y="351.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, unsigned int&amp;&gt; (32 samples, 0.04%)</title><rect x="479.0" y="293" width="0.4" height="15.0" fill="rgb(233,217,41)" rx="2" ry="2" />
<text  x="482.00" y="303.5" ></text>
</g>
<g >
<title>CBlockTreeDB::LoadBlockIndexGuts (821 samples, 0.94%)</title><rect x="38.5" y="677" width="11.1" height="15.0" fill="rgb(209,32,16)" rx="2" ry="2" />
<text  x="41.54" y="687.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (39 samples, 0.04%)</title><rect x="1116.2" y="229" width="0.5" height="15.0" fill="rgb(211,9,43)" rx="2" ry="2" />
<text  x="1119.16" y="239.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (36 samples, 0.04%)</title><rect x="608.6" y="613" width="0.5" height="15.0" fill="rgb(241,122,14)" rx="2" ry="2" />
<text  x="611.64" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (13 samples, 0.01%)</title><rect x="1032.2" y="533" width="0.1" height="15.0" fill="rgb(240,54,21)" rx="2" ry="2" />
<text  x="1035.17" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (196 samples, 0.22%)</title><rect x="1056.5" y="581" width="2.6" height="15.0" fill="rgb(251,158,23)" rx="2" ry="2" />
<text  x="1059.45" y="591.5" ></text>
</g>
<g >
<title>SaltedOutpointHasher::operator (154 samples, 0.18%)</title><rect x="924.5" y="549" width="2.1" height="15.0" fill="rgb(241,73,36)" rx="2" ry="2" />
<text  x="927.51" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (21 samples, 0.02%)</title><rect x="991.7" y="597" width="0.2" height="15.0" fill="rgb(222,128,53)" rx="2" ry="2" />
<text  x="994.66" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (186 samples, 0.21%)</title><rect x="886.0" y="613" width="2.5" height="15.0" fill="rgb(245,142,5)" rx="2" ry="2" />
<text  x="888.95" y="623.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, long&amp;&gt; (59 samples, 0.07%)</title><rect x="488.5" y="309" width="0.8" height="15.0" fill="rgb(246,136,49)" rx="2" ry="2" />
<text  x="491.47" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;::_Node_const_iterator (11 samples, 0.01%)</title><rect x="930.7" y="565" width="0.1" height="15.0" fill="rgb(207,188,36)" rx="2" ry="2" />
<text  x="933.68" y="575.5" ></text>
</g>
<g >
<title>CChain::Contains (19 samples, 0.02%)</title><rect x="34.1" y="597" width="0.2" height="15.0" fill="rgb(250,10,39)" rx="2" ry="2" />
<text  x="37.07" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (20 samples, 0.02%)</title><rect x="531.8" y="101" width="0.2" height="15.0" fill="rgb(222,89,18)" rx="2" ry="2" />
<text  x="534.76" y="111.5" ></text>
</g>
<g >
<title>CTxIn::Serialize&lt;CSizeComputer&gt; (351 samples, 0.40%)</title><rect x="1026.8" y="517" width="4.8" height="15.0" fill="rgb(214,111,46)" rx="2" ry="2" />
<text  x="1029.83" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_lower_bound (41 samples, 0.05%)</title><rect x="654.9" y="517" width="0.5" height="15.0" fill="rgb(208,94,36)" rx="2" ry="2" />
<text  x="657.89" y="527.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CDiskBlockIndex&amp;&gt; (121 samples, 0.14%)</title><rect x="43.1" y="629" width="1.6" height="15.0" fill="rgb(208,166,6)" rx="2" ry="2" />
<text  x="46.11" y="639.5" ></text>
</g>
<g >
<title>CTxOut::Serialize&lt;CHashWriter&gt; (164 samples, 0.19%)</title><rect x="180.9" y="389" width="2.2" height="15.0" fill="rgb(238,148,24)" rx="2" ry="2" />
<text  x="183.93" y="399.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (9 samples, 0.01%)</title><rect x="703.3" y="629" width="0.1" height="15.0" fill="rgb(240,170,28)" rx="2" ry="2" />
<text  x="706.28" y="639.5" ></text>
</g>
<g >
<title>__memp_fget (39 samples, 0.04%)</title><rect x="115.5" y="405" width="0.5" height="15.0" fill="rgb(236,194,33)" rx="2" ry="2" />
<text  x="118.46" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (27 samples, 0.03%)</title><rect x="515.0" y="357" width="0.3" height="15.0" fill="rgb(226,180,0)" rx="2" ry="2" />
<text  x="517.98" y="367.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, unsigned long&gt;, false, false&gt;, bool&gt; (13 samples, 0.01%)</title><rect x="862.4" y="341" width="0.2" height="15.0" fill="rgb(247,40,28)" rx="2" ry="2" />
<text  x="865.42" y="351.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction&lt;CDataStream&gt; (7,351 samples, 8.40%)</title><rect x="466.3" y="469" width="99.1" height="15.0" fill="rgb(213,143,37)" rx="2" ry="2" />
<text  x="469.30" y="479.5" >CTransactio..</text>
</g>
<g >
<title>CScript::CScript (10 samples, 0.01%)</title><rect x="544.3" y="293" width="0.1" height="15.0" fill="rgb(220,193,30)" rx="2" ry="2" />
<text  x="547.28" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (25 samples, 0.03%)</title><rect x="937.5" y="533" width="0.4" height="15.0" fill="rgb(207,14,14)" rx="2" ry="2" />
<text  x="940.52" y="543.5" ></text>
</g>
<g >
<title>CWalletTx::Unserialize&lt;CDataStream&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="693" width="13.8" height="15.0" fill="rgb(219,49,52)" rx="2" ry="2" />
<text  x="1107.95" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;::operator (16 samples, 0.02%)</title><rect x="1086.1" y="533" width="0.2" height="15.0" fill="rgb(242,108,49)" rx="2" ry="2" />
<text  x="1089.11" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (41 samples, 0.05%)</title><rect x="1020.1" y="661" width="0.5" height="15.0" fill="rgb(243,198,34)" rx="2" ry="2" />
<text  x="1023.07" y="671.5" ></text>
</g>
<g >
<title>__db_lput (23 samples, 0.03%)</title><rect x="164.8" y="517" width="0.3" height="15.0" fill="rgb(228,211,36)" rx="2" ry="2" />
<text  x="167.77" y="527.5" ></text>
</g>
<g >
<title>__memp_bhfree (39 samples, 0.04%)</title><rect x="98.0" y="373" width="0.5" height="15.0" fill="rgb(254,225,28)" rx="2" ry="2" />
<text  x="100.97" y="383.5" ></text>
</g>
<g >
<title>__mutex_alloc_int (16 samples, 0.02%)</title><rect x="146.1" y="437" width="0.2" height="15.0" fill="rgb(225,182,43)" rx="2" ry="2" />
<text  x="149.10" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, unsigned long&gt;, false, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, unsigned long&gt;, false, false&gt;, bool, true&gt; (10 samples, 0.01%)</title><rect x="663.4" y="485" width="0.2" height="15.0" fill="rgb(231,113,43)" rx="2" ry="2" />
<text  x="666.43" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_emplace_equal&lt;unsigned long const&amp;, char*&amp;&gt; (13 samples, 0.01%)</title><rect x="653.0" y="533" width="0.2" height="15.0" fill="rgb(240,20,42)" rx="2" ry="2" />
<text  x="655.99" y="543.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (164 samples, 0.19%)</title><rect x="183.1" y="277" width="2.3" height="15.0" fill="rgb(212,186,48)" rx="2" ry="2" />
<text  x="186.14" y="287.5" ></text>
</g>
<g >
<title>Arena::addressInArena (8 samples, 0.01%)</title><rect x="1078.1" y="581" width="0.1" height="15.0" fill="rgb(248,7,8)" rx="2" ry="2" />
<text  x="1081.07" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_S_use_relocate (12 samples, 0.01%)</title><rect x="493.5" y="325" width="0.1" height="15.0" fill="rgb(239,91,28)" rx="2" ry="2" />
<text  x="496.47" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (185 samples, 0.21%)</title><rect x="854.0" y="373" width="2.5" height="15.0" fill="rgb(230,50,35)" rx="2" ry="2" />
<text  x="857.00" y="383.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (42 samples, 0.05%)</title><rect x="454.2" y="469" width="0.6" height="15.0" fill="rgb(229,30,1)" rx="2" ry="2" />
<text  x="457.21" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="1147.6" y="757" width="0.1" height="15.0" fill="rgb(207,165,17)" rx="2" ry="2" />
<text  x="1150.58" y="767.5" ></text>
</g>
<g >
<title>__memp_fget (41 samples, 0.05%)</title><rect x="82.6" y="405" width="0.6" height="15.0" fill="rgb(219,9,6)" rx="2" ry="2" />
<text  x="85.62" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (244 samples, 0.28%)</title><rect x="875.6" y="549" width="3.2" height="15.0" fill="rgb(236,191,37)" rx="2" ry="2" />
<text  x="878.56" y="559.5" ></text>
</g>
<g >
<title>CTransaction::ComputeHash (164 samples, 0.19%)</title><rect x="180.9" y="549" width="2.2" height="15.0" fill="rgb(206,158,40)" rx="2" ry="2" />
<text  x="183.93" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (10 samples, 0.01%)</title><rect x="1052.7" y="581" width="0.1" height="15.0" fill="rgb(227,119,5)" rx="2" ry="2" />
<text  x="1055.68" y="591.5" ></text>
</g>
<g >
<title>CHashWriter::write (19 samples, 0.02%)</title><rect x="548.3" y="69" width="0.2" height="15.0" fill="rgb(217,57,42)" rx="2" ry="2" />
<text  x="551.27" y="79.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (22 samples, 0.03%)</title><rect x="26.7" y="757" width="0.3" height="15.0" fill="rgb(219,216,11)" rx="2" ry="2" />
<text  x="29.67" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator+ (23 samples, 0.03%)</title><rect x="1096.2" y="661" width="0.4" height="15.0" fill="rgb(228,32,52)" rx="2" ry="2" />
<text  x="1099.25" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_erase_at_end (13 samples, 0.01%)</title><rect x="498.3" y="309" width="0.2" height="15.0" fill="rgb(222,85,40)" rx="2" ry="2" />
<text  x="501.34" y="319.5" ></text>
</g>
<g >
<title>CSHA256::Write (13 samples, 0.01%)</title><rect x="528.8" y="69" width="0.1" height="15.0" fill="rgb(241,26,49)" rx="2" ry="2" />
<text  x="531.75" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (25 samples, 0.03%)</title><rect x="682.9" y="469" width="0.3" height="15.0" fill="rgb(232,71,36)" rx="2" ry="2" />
<text  x="685.86" y="479.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (141 samples, 0.16%)</title><rect x="984.4" y="597" width="1.9" height="15.0" fill="rgb(231,6,44)" rx="2" ry="2" />
<text  x="987.41" y="607.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (555 samples, 0.63%)</title><rect x="1025.0" y="565" width="7.4" height="15.0" fill="rgb(234,5,53)" rx="2" ry="2" />
<text  x="1027.96" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (243 samples, 0.28%)</title><rect x="1041.7" y="629" width="3.3" height="15.0" fill="rgb(228,208,9)" rx="2" ry="2" />
<text  x="1044.74" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (38 samples, 0.04%)</title><rect x="682.7" y="517" width="0.5" height="15.0" fill="rgb(218,202,52)" rx="2" ry="2" />
<text  x="685.73" y="527.5" ></text>
</g>
<g >
<title>CSipHasher::Write (95 samples, 0.11%)</title><rect x="842.2" y="565" width="1.3" height="15.0" fill="rgb(248,160,6)" rx="2" ry="2" />
<text  x="845.19" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::get_deleter (37 samples, 0.04%)</title><rect x="948.7" y="613" width="0.5" height="15.0" fill="rgb(205,70,6)" rx="2" ry="2" />
<text  x="951.67" y="623.5" ></text>
</g>
<g >
<title>__strlen_avx2 (17 samples, 0.02%)</title><rect x="829.0" y="533" width="0.3" height="15.0" fill="rgb(226,143,41)" rx="2" ry="2" />
<text  x="832.03" y="543.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (22 samples, 0.03%)</title><rect x="572.3" y="581" width="0.2" height="15.0" fill="rgb(248,123,14)" rx="2" ry="2" />
<text  x="575.25" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (31 samples, 0.04%)</title><rect x="614.7" y="437" width="0.4" height="15.0" fill="rgb(251,20,38)" rx="2" ry="2" />
<text  x="617.70" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (137 samples, 0.16%)</title><rect x="613.4" y="485" width="1.8" height="15.0" fill="rgb(208,71,43)" rx="2" ry="2" />
<text  x="616.37" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_insert_node (18 samples, 0.02%)</title><rect x="1080.2" y="533" width="0.3" height="15.0" fill="rgb(247,161,2)" rx="2" ry="2" />
<text  x="1083.24" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (28 samples, 0.03%)</title><rect x="600.0" y="597" width="0.4" height="15.0" fill="rgb(218,220,2)" rx="2" ry="2" />
<text  x="602.99" y="607.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::operator (14 samples, 0.02%)</title><rect x="877.4" y="517" width="0.2" height="15.0" fill="rgb(221,146,38)" rx="2" ry="2" />
<text  x="880.42" y="527.5" ></text>
</g>
<g >
<title>_int_malloc (19 samples, 0.02%)</title><rect x="967.1" y="533" width="0.2" height="15.0" fill="rgb(245,97,32)" rx="2" ry="2" />
<text  x="970.09" y="543.5" ></text>
</g>
<g >
<title>__env_alloc (13 samples, 0.01%)</title><rect x="86.7" y="389" width="0.1" height="15.0" fill="rgb(215,47,2)" rx="2" ry="2" />
<text  x="89.65" y="399.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (401 samples, 0.46%)</title><rect x="157.3" y="581" width="5.4" height="15.0" fill="rgb(254,6,17)" rx="2" ry="2" />
<text  x="160.31" y="591.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (18 samples, 0.02%)</title><rect x="1147.1" y="709" width="0.2" height="15.0" fill="rgb(205,130,38)" rx="2" ry="2" />
<text  x="1150.11" y="719.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (35 samples, 0.04%)</title><rect x="955.1" y="629" width="0.5" height="15.0" fill="rgb(234,36,48)" rx="2" ry="2" />
<text  x="958.14" y="639.5" ></text>
</g>
<g >
<title>CDataStream::read (120 samples, 0.14%)</title><rect x="634.0" y="629" width="1.6" height="15.0" fill="rgb(221,198,23)" rx="2" ry="2" />
<text  x="637.03" y="639.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (53 samples, 0.06%)</title><rect x="1059.1" y="581" width="0.7" height="15.0" fill="rgb(243,112,18)" rx="2" ry="2" />
<text  x="1062.09" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator* (13 samples, 0.01%)</title><rect x="707.5" y="581" width="0.1" height="15.0" fill="rgb(245,17,22)" rx="2" ry="2" />
<text  x="710.47" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (12 samples, 0.01%)</title><rect x="127.9" y="485" width="0.2" height="15.0" fill="rgb(220,82,25)" rx="2" ry="2" />
<text  x="130.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (43 samples, 0.05%)</title><rect x="856.8" y="325" width="0.5" height="15.0" fill="rgb(245,133,12)" rx="2" ry="2" />
<text  x="859.76" y="335.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (9 samples, 0.01%)</title><rect x="900.6" y="485" width="0.1" height="15.0" fill="rgb(214,127,5)" rx="2" ry="2" />
<text  x="903.60" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (17 samples, 0.02%)</title><rect x="951.3" y="661" width="0.2" height="15.0" fill="rgb(207,82,14)" rx="2" ry="2" />
<text  x="954.27" y="671.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="111.7" y="357" width="0.1" height="15.0" fill="rgb(205,175,16)" rx="2" ry="2" />
<text  x="114.70" y="367.5" ></text>
</g>
<g >
<title>DbEnv::close (11 samples, 0.01%)</title><rect x="180.8" y="485" width="0.1" height="15.0" fill="rgb(216,149,49)" rx="2" ry="2" />
<text  x="183.78" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::erase (890 samples, 1.02%)</title><rect x="588.4" y="613" width="12.0" height="15.0" fill="rgb(213,105,52)" rx="2" ry="2" />
<text  x="591.37" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (66 samples, 0.08%)</title><rect x="455.4" y="517" width="0.9" height="15.0" fill="rgb(254,26,53)" rx="2" ry="2" />
<text  x="458.44" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator* (10 samples, 0.01%)</title><rect x="600.4" y="613" width="0.1" height="15.0" fill="rgb(216,142,18)" rx="2" ry="2" />
<text  x="603.39" y="623.5" ></text>
</g>
<g >
<title>[unknown] (45 samples, 0.05%)</title><rect x="98.9" y="325" width="0.6" height="15.0" fill="rgb(245,200,46)" rx="2" ry="2" />
<text  x="101.93" y="335.5" ></text>
</g>
<g >
<title>secp256k1_fe_mul (14 samples, 0.02%)</title><rect x="1149.5" y="597" width="0.2" height="15.0" fill="rgb(241,99,12)" rx="2" ry="2" />
<text  x="1152.52" y="607.5" ></text>
</g>
<g >
<title>CDataStream::read (23 samples, 0.03%)</title><rect x="39.4" y="581" width="0.3" height="15.0" fill="rgb(219,195,48)" rx="2" ry="2" />
<text  x="42.36" y="591.5" ></text>
</g>
<g >
<title>__db_pitem_nolog (14 samples, 0.02%)</title><rect x="120.6" y="421" width="0.2" height="15.0" fill="rgb(208,210,11)" rx="2" ry="2" />
<text  x="123.59" y="431.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, unsigned int&gt; (33 samples, 0.04%)</title><rect x="549.2" y="229" width="0.5" height="15.0" fill="rgb(228,173,45)" rx="2" ry="2" />
<text  x="552.25" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::construct&lt;unsigned char&gt; (148 samples, 0.17%)</title><rect x="864.8" y="453" width="2.0" height="15.0" fill="rgb(242,46,11)" rx="2" ry="2" />
<text  x="867.83" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;char const*, char*, zero_after_free_allocator&lt;char&gt; &gt; (128 samples, 0.15%)</title><rect x="39.9" y="597" width="1.7" height="15.0" fill="rgb(233,147,1)" rx="2" ry="2" />
<text  x="42.86" y="607.5" ></text>
</g>
<g >
<title>__db_vrfy_putpageinfo (313 samples, 0.36%)</title><rect x="168.9" y="581" width="4.2" height="15.0" fill="rgb(239,112,47)" rx="2" ry="2" />
<text  x="171.86" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::_Vector_impl::_Vector_impl (38 samples, 0.04%)</title><rect x="601.7" y="597" width="0.5" height="15.0" fill="rgb(213,60,13)" rx="2" ry="2" />
<text  x="604.70" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::allocate (63 samples, 0.07%)</title><rect x="966.5" y="581" width="0.8" height="15.0" fill="rgb(221,201,40)" rx="2" ry="2" />
<text  x="969.50" y="591.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;void*, void*&gt; (39 samples, 0.04%)</title><rect x="732.3" y="517" width="0.6" height="15.0" fill="rgb(216,33,49)" rx="2" ry="2" />
<text  x="735.34" y="527.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (9 samples, 0.01%)</title><rect x="136.9" y="485" width="0.2" height="15.0" fill="rgb(212,178,32)" rx="2" ry="2" />
<text  x="139.95" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;CTxIn*, unsigned long&gt; (68 samples, 0.08%)</title><rect x="481.5" y="309" width="1.0" height="15.0" fill="rgb(211,6,52)" rx="2" ry="2" />
<text  x="484.54" y="319.5" ></text>
</g>
<g >
<title>__lock_get_internal (77 samples, 0.09%)</title><rect x="83.2" y="389" width="1.1" height="15.0" fill="rgb(254,138,7)" rx="2" ry="2" />
<text  x="86.24" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::_Vector_base (43 samples, 0.05%)</title><rect x="601.6" y="613" width="0.6" height="15.0" fill="rgb(248,25,24)" rx="2" ry="2" />
<text  x="604.63" y="623.5" ></text>
</g>
<g >
<title>operator/ (66 samples, 0.08%)</title><rect x="50.2" y="661" width="0.9" height="15.0" fill="rgb(223,82,7)" rx="2" ry="2" />
<text  x="53.23" y="671.5" ></text>
</g>
<g >
<title>CSHA256::Write (13 samples, 0.01%)</title><rect x="805.2" y="565" width="0.2" height="15.0" fill="rgb(224,117,7)" rx="2" ry="2" />
<text  x="808.23" y="575.5" ></text>
</g>
<g >
<title>CSipHasher::Write (63 samples, 0.07%)</title><rect x="739.8" y="581" width="0.9" height="15.0" fill="rgb(223,216,41)" rx="2" ry="2" />
<text  x="742.80" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::~vector (14 samples, 0.02%)</title><rect x="1177.1" y="757" width="0.2" height="15.0" fill="rgb(214,161,36)" rx="2" ry="2" />
<text  x="1180.12" y="767.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.01%)</title><rect x="146.9" y="309" width="0.1" height="15.0" fill="rgb(232,91,36)" rx="2" ry="2" />
<text  x="149.86" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (38 samples, 0.04%)</title><rect x="815.7" y="421" width="0.5" height="15.0" fill="rgb(228,34,23)" rx="2" ry="2" />
<text  x="818.73" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, CKeyID const&amp;&gt;::_Tuple_impl (11 samples, 0.01%)</title><rect x="892.8" y="565" width="0.1" height="15.0" fill="rgb(254,108,6)" rx="2" ry="2" />
<text  x="895.80" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_S_do_relocate (14 samples, 0.02%)</title><rect x="397.9" y="421" width="0.2" height="15.0" fill="rgb(253,126,42)" rx="2" ry="2" />
<text  x="400.88" y="431.5" ></text>
</g>
<g >
<title>std::__distance&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (28 samples, 0.03%)</title><rect x="1095.2" y="613" width="0.4" height="15.0" fill="rgb(206,55,29)" rx="2" ry="2" />
<text  x="1098.21" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (25 samples, 0.03%)</title><rect x="615.7" y="421" width="0.4" height="15.0" fill="rgb(219,160,48)" rx="2" ry="2" />
<text  x="618.74" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (18 samples, 0.02%)</title><rect x="99.6" y="389" width="0.3" height="15.0" fill="rgb(227,68,45)" rx="2" ry="2" />
<text  x="102.64" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (272 samples, 0.31%)</title><rect x="567.9" y="565" width="3.7" height="15.0" fill="rgb(254,78,32)" rx="2" ry="2" />
<text  x="570.94" y="575.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (21 samples, 0.02%)</title><rect x="725.8" y="629" width="0.3" height="15.0" fill="rgb(217,27,17)" rx="2" ry="2" />
<text  x="728.84" y="639.5" ></text>
</g>
<g >
<title>CKeyPool::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (10 samples, 0.01%)</title><rect x="403.7" y="629" width="0.1" height="15.0" fill="rgb(209,103,34)" rx="2" ry="2" />
<text  x="406.67" y="639.5" ></text>
</g>
<g >
<title>__db_verify (20 samples, 0.02%)</title><rect x="1144.6" y="613" width="0.2" height="15.0" fill="rgb(211,163,49)" rx="2" ry="2" />
<text  x="1147.57" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (12 samples, 0.01%)</title><rect x="593.2" y="581" width="0.1" height="15.0" fill="rgb(223,145,27)" rx="2" ry="2" />
<text  x="596.18" y="591.5" ></text>
</g>
<g >
<title>CSHA256::Write (25 samples, 0.03%)</title><rect x="541.5" y="357" width="0.4" height="15.0" fill="rgb(233,156,41)" rx="2" ry="2" />
<text  x="544.51" y="367.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::end (12 samples, 0.01%)</title><rect x="612.1" y="517" width="0.2" height="15.0" fill="rgb(229,121,35)" rx="2" ry="2" />
<text  x="615.13" y="527.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (209 samples, 0.24%)</title><rect x="113.6" y="453" width="2.8" height="15.0" fill="rgb(237,88,48)" rx="2" ry="2" />
<text  x="116.59" y="463.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (16 samples, 0.02%)</title><rect x="543.6" y="325" width="0.3" height="15.0" fill="rgb(232,196,33)" rx="2" ry="2" />
<text  x="546.64" y="335.5" ></text>
</g>
<g >
<title>__bam_get_root (23 samples, 0.03%)</title><rect x="71.5" y="469" width="0.3" height="15.0" fill="rgb(235,55,51)" rx="2" ry="2" />
<text  x="74.53" y="479.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, CVarInt&lt; (40 samples, 0.05%)</title><rect x="43.2" y="565" width="0.5" height="15.0" fill="rgb(240,79,40)" rx="2" ry="2" />
<text  x="46.18" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;CScriptID const, CScript&gt;::pair&lt;CScriptID const&amp;&gt; (26 samples, 0.03%)</title><rect x="827.0" y="533" width="0.4" height="15.0" fill="rgb(221,30,37)" rx="2" ry="2" />
<text  x="830.03" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt; &gt;::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, true&gt; (36 samples, 0.04%)</title><rect x="906.2" y="629" width="0.5" height="15.0" fill="rgb(243,1,14)" rx="2" ry="2" />
<text  x="909.22" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (9 samples, 0.01%)</title><rect x="571.8" y="597" width="0.1" height="15.0" fill="rgb(210,47,43)" rx="2" ry="2" />
<text  x="574.81" y="607.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (9 samples, 0.01%)</title><rect x="836.3" y="517" width="0.1" height="15.0" fill="rgb(236,220,17)" rx="2" ry="2" />
<text  x="839.29" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="462.3" y="517" width="0.1" height="15.0" fill="rgb(211,175,38)" rx="2" ry="2" />
<text  x="465.27" y="527.5" ></text>
</g>
<g >
<title>CPubKey::CPubKey (17 samples, 0.02%)</title><rect x="685.7" y="677" width="0.3" height="15.0" fill="rgb(214,7,15)" rx="2" ry="2" />
<text  x="688.74" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;uint256&amp;, CWalletTx&amp;&gt; (10 samples, 0.01%)</title><rect x="1164.9" y="757" width="0.1" height="15.0" fill="rgb(221,98,23)" rx="2" ry="2" />
<text  x="1167.85" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (47 samples, 0.05%)</title><rect x="859.7" y="325" width="0.7" height="15.0" fill="rgb(241,40,50)" rx="2" ry="2" />
<text  x="862.74" y="335.5" ></text>
</g>
<g >
<title>__db_verify_internal (20 samples, 0.02%)</title><rect x="1144.6" y="629" width="0.2" height="15.0" fill="rgb(242,222,47)" rx="2" ry="2" />
<text  x="1147.57" y="639.5" ></text>
</g>
<g >
<title>__db_lput (23 samples, 0.03%)</title><rect x="115.2" y="405" width="0.3" height="15.0" fill="rgb(215,21,1)" rx="2" ry="2" />
<text  x="118.15" y="415.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void*&amp;, CLockLocation const&amp;&gt; (52 samples, 0.06%)</title><rect x="728.7" y="581" width="0.7" height="15.0" fill="rgb(240,19,23)" rx="2" ry="2" />
<text  x="731.72" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::operator (8 samples, 0.01%)</title><rect x="983.2" y="661" width="0.1" height="15.0" fill="rgb(248,138,47)" rx="2" ry="2" />
<text  x="986.19" y="671.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (8 samples, 0.01%)</title><rect x="1145.9" y="613" width="0.1" height="15.0" fill="rgb(239,56,26)" rx="2" ry="2" />
<text  x="1148.85" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (13 samples, 0.01%)</title><rect x="175.8" y="549" width="0.1" height="15.0" fill="rgb(211,129,21)" rx="2" ry="2" />
<text  x="178.77" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (17 samples, 0.02%)</title><rect x="342.1" y="565" width="0.2" height="15.0" fill="rgb(249,59,36)" rx="2" ry="2" />
<text  x="345.12" y="575.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTransaction&gt; (8,044 samples, 9.19%)</title><rect x="463.5" y="613" width="108.4" height="15.0" fill="rgb(206,10,42)" rx="2" ry="2" />
<text  x="466.53" y="623.5" >Unserialize&lt;C..</text>
</g>
<g >
<title>CSHA256::Write (11 samples, 0.01%)</title><rect x="531.6" y="37" width="0.2" height="15.0" fill="rgb(228,211,17)" rx="2" ry="2" />
<text  x="534.61" y="47.5" ></text>
</g>
<g >
<title>_mm_storeu_si128 (8 samples, 0.01%)</title><rect x="1118.7" y="245" width="0.1" height="15.0" fill="rgb(248,6,39)" rx="2" ry="2" />
<text  x="1121.66" y="255.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::shrink_to_fit (13 samples, 0.01%)</title><rect x="808.6" y="453" width="0.1" height="15.0" fill="rgb(235,195,32)" rx="2" ry="2" />
<text  x="811.56" y="463.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (70 samples, 0.08%)</title><rect x="133.3" y="453" width="0.9" height="15.0" fill="rgb(213,130,9)" rx="2" ry="2" />
<text  x="136.28" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;CTxOut&gt;::allocator (12 samples, 0.01%)</title><rect x="565.2" y="389" width="0.1" height="15.0" fill="rgb(209,215,33)" rx="2" ry="2" />
<text  x="568.16" y="399.5" ></text>
</g>
<g >
<title>WriteLE32 (9 samples, 0.01%)</title><rect x="16.2" y="741" width="0.2" height="15.0" fill="rgb(235,180,40)" rx="2" ry="2" />
<text  x="19.24" y="751.5" ></text>
</g>
<g >
<title>__lock_get_internal (98 samples, 0.11%)</title><rect x="92.5" y="373" width="1.3" height="15.0" fill="rgb(254,119,10)" rx="2" ry="2" />
<text  x="95.53" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (46 samples, 0.05%)</title><rect x="614.5" y="469" width="0.6" height="15.0" fill="rgb(225,98,4)" rx="2" ry="2" />
<text  x="617.51" y="479.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;int&gt; (19 samples, 0.02%)</title><rect x="543.6" y="341" width="0.3" height="15.0" fill="rgb(237,45,1)" rx="2" ry="2" />
<text  x="546.60" y="351.5" ></text>
</g>
<g >
<title>__os_calloc (66 samples, 0.08%)</title><rect x="80.0" y="485" width="0.8" height="15.0" fill="rgb(220,106,44)" rx="2" ry="2" />
<text  x="82.95" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::operator[] (66 samples, 0.08%)</title><rect x="858.0" y="389" width="0.9" height="15.0" fill="rgb(221,146,15)" rx="2" ry="2" />
<text  x="860.97" y="399.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (128 samples, 0.15%)</title><rect x="547.5" y="213" width="1.7" height="15.0" fill="rgb(229,128,32)" rx="2" ry="2" />
<text  x="550.46" y="223.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__Z18InitSignatureCachev (398 samples, 0.45%)</title><rect x="1184.2" y="709" width="5.4" height="15.0" fill="rgb(213,161,39)" rx="2" ry="2" />
<text  x="1187.21" y="719.5" ></text>
</g>
<g >
<title>CDBIterator::GetKey&lt;std::pair&lt;char, uint256&gt; &gt; (88 samples, 0.10%)</title><rect x="38.6" y="661" width="1.2" height="15.0" fill="rgb(238,80,46)" rx="2" ry="2" />
<text  x="41.64" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char* const&amp;, 0ul&gt; (13 samples, 0.01%)</title><rect x="1084.0" y="469" width="0.2" height="15.0" fill="rgb(205,168,1)" rx="2" ry="2" />
<text  x="1087.04" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::new_allocator (13 samples, 0.01%)</title><rect x="1019.2" y="597" width="0.1" height="15.0" fill="rgb(247,167,28)" rx="2" ry="2" />
<text  x="1022.16" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (85 samples, 0.10%)</title><rect x="899.6" y="549" width="1.2" height="15.0" fill="rgb(240,22,20)" rx="2" ry="2" />
<text  x="902.64" y="559.5" ></text>
</g>
<g >
<title>__bamc_compress_dup (33 samples, 0.04%)</title><rect x="375.4" y="613" width="0.5" height="15.0" fill="rgb(227,197,21)" rx="2" ry="2" />
<text  x="378.43" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned int*, unsigned int&gt; (12 samples, 0.01%)</title><rect x="883.3" y="613" width="0.2" height="15.0" fill="rgb(237,27,2)" rx="2" ry="2" />
<text  x="886.34" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (146 samples, 0.17%)</title><rect x="1010.4" y="581" width="1.9" height="15.0" fill="rgb(224,46,39)" rx="2" ry="2" />
<text  x="1013.38" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (118 samples, 0.13%)</title><rect x="407.6" y="549" width="1.6" height="15.0" fill="rgb(213,101,19)" rx="2" ry="2" />
<text  x="410.61" y="559.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter&gt; (9 samples, 0.01%)</title><rect x="532.6" y="213" width="0.2" height="15.0" fill="rgb(219,92,46)" rx="2" ry="2" />
<text  x="535.65" y="223.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="357.6" y="581" width="0.2" height="15.0" fill="rgb(251,87,15)" rx="2" ry="2" />
<text  x="360.63" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::operator[] (324 samples, 0.37%)</title><rect x="676.8" y="549" width="4.4" height="15.0" fill="rgb(246,188,51)" rx="2" ry="2" />
<text  x="679.84" y="559.5" ></text>
</g>
<g >
<title>Hash160&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1,391 samples, 1.59%)</title><rect x="787.1" y="597" width="18.7" height="15.0" fill="rgb(245,227,10)" rx="2" ry="2" />
<text  x="790.10" y="607.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (35 samples, 0.04%)</title><rect x="1133.1" y="645" width="0.5" height="15.0" fill="rgb(207,224,20)" rx="2" ry="2" />
<text  x="1136.14" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_default_append (460 samples, 0.53%)</title><rect x="507.4" y="341" width="6.2" height="15.0" fill="rgb(212,37,37)" rx="2" ry="2" />
<text  x="510.43" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (14 samples, 0.02%)</title><rect x="482.2" y="229" width="0.2" height="15.0" fill="rgb(222,60,29)" rx="2" ry="2" />
<text  x="485.22" y="239.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (13 samples, 0.01%)</title><rect x="1094.3" y="597" width="0.2" height="15.0" fill="rgb(231,100,0)" rx="2" ry="2" />
<text  x="1097.33" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (76 samples, 0.09%)</title><rect x="608.2" y="645" width="1.0" height="15.0" fill="rgb(208,36,17)" rx="2" ry="2" />
<text  x="611.18" y="655.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, 28u, unsigned char&gt; (143 samples, 0.16%)</title><rect x="410.3" y="581" width="1.9" height="15.0" fill="rgb(222,66,39)" rx="2" ry="2" />
<text  x="413.26" y="591.5" ></text>
</g>
<g >
<title>TLS wrapper function for g_lockstack (13 samples, 0.01%)</title><rect x="939.0" y="533" width="0.2" height="15.0" fill="rgb(226,163,4)" rx="2" ry="2" />
<text  x="942.01" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (75 samples, 0.09%)</title><rect x="501.4" y="261" width="1.0" height="15.0" fill="rgb(251,201,1)" rx="2" ry="2" />
<text  x="504.38" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_get_Tp_allocator (8 samples, 0.01%)</title><rect x="491.0" y="325" width="0.1" height="15.0" fill="rgb(229,75,40)" rx="2" ry="2" />
<text  x="493.99" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::equal_range (394 samples, 0.45%)</title><rect x="594.4" y="597" width="5.3" height="15.0" fill="rgb(245,44,52)" rx="2" ry="2" />
<text  x="597.39" y="607.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (98 samples, 0.11%)</title><rect x="1120.5" y="613" width="1.3" height="15.0" fill="rgb(227,51,44)" rx="2" ry="2" />
<text  x="1123.50" y="623.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream (10 samples, 0.01%)</title><rect x="1146.0" y="629" width="0.1" height="15.0" fill="rgb(225,74,43)" rx="2" ry="2" />
<text  x="1148.97" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (29 samples, 0.03%)</title><rect x="85.7" y="405" width="0.4" height="15.0" fill="rgb(220,143,16)" rx="2" ry="2" />
<text  x="88.68" y="415.5" ></text>
</g>
<g >
<title>__bam_cmp (33 samples, 0.04%)</title><rect x="149.3" y="469" width="0.4" height="15.0" fill="rgb(213,110,9)" rx="2" ry="2" />
<text  x="152.29" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTransaction&gt;::construct&lt;CTransaction const&gt; (126 samples, 0.14%)</title><rect x="1057.4" y="549" width="1.7" height="15.0" fill="rgb(246,15,43)" rx="2" ry="2" />
<text  x="1060.39" y="559.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.01%)</title><rect x="99.4" y="245" width="0.1" height="15.0" fill="rgb(210,115,14)" rx="2" ry="2" />
<text  x="102.41" y="255.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (92 samples, 0.11%)</title><rect x="541.4" y="373" width="1.2" height="15.0" fill="rgb(247,186,50)" rx="2" ry="2" />
<text  x="544.41" y="383.5" ></text>
</g>
<g >
<title>__bswap_32 (25 samples, 0.03%)</title><rect x="542.2" y="341" width="0.4" height="15.0" fill="rgb(214,97,18)" rx="2" ry="2" />
<text  x="545.21" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char*&amp;&amp;&gt; (11 samples, 0.01%)</title><rect x="680.5" y="469" width="0.1" height="15.0" fill="rgb(210,53,14)" rx="2" ry="2" />
<text  x="683.47" y="479.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::emplace&lt;unsigned long const&amp;, char*&amp;&gt; (14 samples, 0.02%)</title><rect x="653.0" y="549" width="0.2" height="15.0" fill="rgb(230,117,23)" rx="2" ry="2" />
<text  x="655.97" y="559.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (9 samples, 0.01%)</title><rect x="831.1" y="501" width="0.2" height="15.0" fill="rgb(236,112,17)" rx="2" ry="2" />
<text  x="834.14" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::allocate (10 samples, 0.01%)</title><rect x="855.3" y="309" width="0.1" height="15.0" fill="rgb(240,149,33)" rx="2" ry="2" />
<text  x="858.31" y="319.5" ></text>
</g>
<g >
<title>CDataStream::read (2,272 samples, 2.59%)</title><rect x="413.9" y="581" width="30.6" height="15.0" fill="rgb(221,11,18)" rx="2" ry="2" />
<text  x="416.88" y="591.5" >CD..</text>
</g>
<g >
<title>secp256k1_fe_sqr (8 samples, 0.01%)</title><rect x="1149.7" y="597" width="0.1" height="15.0" fill="rgb(227,187,5)" rx="2" ry="2" />
<text  x="1152.71" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (50 samples, 0.06%)</title><rect x="943.5" y="485" width="0.6" height="15.0" fill="rgb(205,178,7)" rx="2" ry="2" />
<text  x="946.45" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (37 samples, 0.04%)</title><rect x="470.9" y="325" width="0.5" height="15.0" fill="rgb(220,208,37)" rx="2" ry="2" />
<text  x="473.94" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (31 samples, 0.04%)</title><rect x="857.4" y="309" width="0.4" height="15.0" fill="rgb(220,179,49)" rx="2" ry="2" />
<text  x="860.41" y="319.5" ></text>
</g>
<g >
<title>__uint32_identity (18 samples, 0.02%)</title><rect x="784.3" y="517" width="0.2" height="15.0" fill="rgb(215,158,22)" rx="2" ry="2" />
<text  x="787.30" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (11 samples, 0.01%)</title><rect x="916.0" y="517" width="0.1" height="15.0" fill="rgb(217,92,42)" rx="2" ry="2" />
<text  x="918.98" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (50 samples, 0.06%)</title><rect x="999.5" y="501" width="0.7" height="15.0" fill="rgb(245,84,9)" rx="2" ry="2" />
<text  x="1002.49" y="511.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Unserialize&lt;CDataStream&gt; (24 samples, 0.03%)</title><rect x="575.0" y="597" width="0.3" height="15.0" fill="rgb(242,51,32)" rx="2" ry="2" />
<text  x="577.99" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (48 samples, 0.05%)</title><rect x="575.5" y="613" width="0.7" height="15.0" fill="rgb(209,164,47)" rx="2" ry="2" />
<text  x="578.51" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::size (12 samples, 0.01%)</title><rect x="743.8" y="597" width="0.1" height="15.0" fill="rgb(214,120,39)" rx="2" ry="2" />
<text  x="746.75" y="607.5" ></text>
</g>
<g >
<title>__bam_search (9 samples, 0.01%)</title><rect x="136.9" y="453" width="0.2" height="15.0" fill="rgb(213,122,40)" rx="2" ry="2" />
<text  x="139.95" y="463.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (53 samples, 0.06%)</title><rect x="182.1" y="133" width="0.7" height="15.0" fill="rgb(243,170,17)" rx="2" ry="2" />
<text  x="185.09" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.01%)</title><rect x="854.1" y="325" width="0.2" height="15.0" fill="rgb(237,168,33)" rx="2" ry="2" />
<text  x="857.13" y="335.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (239 samples, 0.27%)</title><rect x="169.6" y="533" width="3.3" height="15.0" fill="rgb(234,65,54)" rx="2" ry="2" />
<text  x="172.64" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (329 samples, 0.38%)</title><rect x="1096.1" y="677" width="4.4" height="15.0" fill="rgb(215,186,22)" rx="2" ry="2" />
<text  x="1099.08" y="687.5" ></text>
</g>
<g >
<title>RewindBlockIndex (149 samples, 0.17%)</title><rect x="53.0" y="725" width="2.0" height="15.0" fill="rgb(209,175,9)" rx="2" ry="2" />
<text  x="55.98" y="735.5" ></text>
</g>
<g >
<title>QuadRound (72 samples, 0.08%)</title><rect x="1120.6" y="597" width="1.0" height="15.0" fill="rgb(254,91,36)" rx="2" ry="2" />
<text  x="1123.58" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_reset (9 samples, 0.01%)</title><rect x="907.6" y="565" width="0.2" height="15.0" fill="rgb(214,109,33)" rx="2" ry="2" />
<text  x="910.65" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (36 samples, 0.04%)</title><rect x="680.3" y="501" width="0.5" height="15.0" fill="rgb(240,176,44)" rx="2" ry="2" />
<text  x="683.33" y="511.5" ></text>
</g>
<g >
<title>__subvdi3 (10 samples, 0.01%)</title><rect x="387.5" y="645" width="0.1" height="15.0" fill="rgb(226,111,44)" rx="2" ry="2" />
<text  x="390.48" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (9 samples, 0.01%)</title><rect x="853.1" y="341" width="0.1" height="15.0" fill="rgb(224,120,44)" rx="2" ry="2" />
<text  x="856.06" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (30 samples, 0.03%)</title><rect x="565.8" y="485" width="0.4" height="15.0" fill="rgb(244,149,33)" rx="2" ry="2" />
<text  x="568.84" y="495.5" ></text>
</g>
<g >
<title>SaltedTxidHasher::operator (76 samples, 0.09%)</title><rect x="933.7" y="597" width="1.1" height="15.0" fill="rgb(207,146,29)" rx="2" ry="2" />
<text  x="936.74" y="607.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (15 samples, 0.02%)</title><rect x="962.1" y="485" width="0.2" height="15.0" fill="rgb(216,13,40)" rx="2" ry="2" />
<text  x="965.08" y="495.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.01%)</title><rect x="614.2" y="389" width="0.1" height="15.0" fill="rgb(237,3,5)" rx="2" ry="2" />
<text  x="617.18" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::destroy&lt;char&gt; (24 samples, 0.03%)</title><rect x="402.1" y="453" width="0.3" height="15.0" fill="rgb(237,34,0)" rx="2" ry="2" />
<text  x="405.08" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (62 samples, 0.07%)</title><rect x="514.5" y="373" width="0.8" height="15.0" fill="rgb(242,17,30)" rx="2" ry="2" />
<text  x="517.51" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_range_initialize&lt;char const*&gt; (46 samples, 0.05%)</title><rect x="38.7" y="613" width="0.6" height="15.0" fill="rgb(219,147,1)" rx="2" ry="2" />
<text  x="41.69" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*&gt; (8 samples, 0.01%)</title><rect x="1102.8" y="645" width="0.1" height="15.0" fill="rgb(233,76,23)" rx="2" ry="2" />
<text  x="1105.80" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, CScriptID const&amp;&gt;::_M_head (14 samples, 0.02%)</title><rect x="827.7" y="501" width="0.1" height="15.0" fill="rgb(236,140,2)" rx="2" ry="2" />
<text  x="830.65" y="511.5" ></text>
</g>
<g >
<title>CTxIn::CTxIn (90 samples, 0.10%)</title><rect x="468.8" y="373" width="1.2" height="15.0" fill="rgb(215,97,23)" rx="2" ry="2" />
<text  x="471.84" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (16 samples, 0.02%)</title><rect x="601.0" y="565" width="0.2" height="15.0" fill="rgb(234,18,10)" rx="2" ry="2" />
<text  x="604.00" y="575.5" ></text>
</g>
<g >
<title>ReadLE32 (49 samples, 0.06%)</title><rect x="783.9" y="533" width="0.6" height="15.0" fill="rgb(217,94,11)" rx="2" ry="2" />
<text  x="786.88" y="543.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::erase[abi:cxx11] (71 samples, 0.08%)</title><rect x="851.3" y="389" width="0.9" height="15.0" fill="rgb(209,115,36)" rx="2" ry="2" />
<text  x="854.29" y="399.5" ></text>
</g>
<g >
<title>CWalletTx::~CWalletTx (149 samples, 0.17%)</title><rect x="1019.6" y="677" width="2.0" height="15.0" fill="rgb(228,136,26)" rx="2" ry="2" />
<text  x="1022.57" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (28 samples, 0.03%)</title><rect x="451.2" y="533" width="0.4" height="15.0" fill="rgb(241,223,19)" rx="2" ry="2" />
<text  x="454.21" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.01%)</title><rect x="613.4" y="469" width="0.2" height="15.0" fill="rgb(220,40,8)" rx="2" ry="2" />
<text  x="616.40" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, long, std::_Identity&lt;long&gt;, std::less&lt;long&gt;, std::allocator&lt;long&gt; &gt;::_M_insert_unique&lt;long const&amp;&gt; (8 samples, 0.01%)</title><rect x="894.3" y="645" width="0.1" height="15.0" fill="rgb(248,158,19)" rx="2" ry="2" />
<text  x="897.25" y="655.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void*&amp;, CLockLocation const&amp;&gt; (11 samples, 0.01%)</title><rect x="1173.7" y="757" width="0.2" height="15.0" fill="rgb(208,160,46)" rx="2" ry="2" />
<text  x="1176.75" y="767.5" ></text>
</g>
<g >
<title>CDataStream::read (11 samples, 0.01%)</title><rect x="403.0" y="549" width="0.1" height="15.0" fill="rgb(238,91,11)" rx="2" ry="2" />
<text  x="405.96" y="559.5" ></text>
</g>
<g >
<title>ShiftMessageB (27 samples, 0.03%)</title><rect x="1143.1" y="165" width="0.4" height="15.0" fill="rgb(211,71,18)" rx="2" ry="2" />
<text  x="1146.12" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (15 samples, 0.02%)</title><rect x="321.2" y="581" width="0.2" height="15.0" fill="rgb(232,61,30)" rx="2" ry="2" />
<text  x="324.23" y="591.5" ></text>
</g>
<g >
<title>__memp_alloc (327 samples, 0.37%)</title><rect x="352.5" y="581" width="4.4" height="15.0" fill="rgb(209,142,0)" rx="2" ry="2" />
<text  x="355.52" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (37 samples, 0.04%)</title><rect x="660.4" y="453" width="0.5" height="15.0" fill="rgb(226,62,42)" rx="2" ry="2" />
<text  x="663.37" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;CChainState, std::default_delete&lt;CChainState&gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="57.4" y="565" width="0.2" height="15.0" fill="rgb(208,205,5)" rx="2" ry="2" />
<text  x="60.45" y="575.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (230 samples, 0.26%)</title><rect x="475.8" y="229" width="3.1" height="15.0" fill="rgb(247,105,10)" rx="2" ry="2" />
<text  x="478.79" y="239.5" ></text>
</g>
<g >
<title>ShiftMessageB (27 samples, 0.03%)</title><rect x="1118.0" y="245" width="0.4" height="15.0" fill="rgb(253,85,52)" rx="2" ry="2" />
<text  x="1121.01" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_check_len (138 samples, 0.16%)</title><rect x="502.4" y="293" width="1.9" height="15.0" fill="rgb(248,145,47)" rx="2" ry="2" />
<text  x="505.39" y="303.5" ></text>
</g>
<g >
<title>CSHA256::Write (19 samples, 0.02%)</title><rect x="553.0" y="69" width="0.3" height="15.0" fill="rgb(215,213,21)" rx="2" ry="2" />
<text  x="556.00" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (10 samples, 0.01%)</title><rect x="1025.6" y="501" width="0.1" height="15.0" fill="rgb(233,134,24)" rx="2" ry="2" />
<text  x="1028.55" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (19 samples, 0.02%)</title><rect x="595.4" y="565" width="0.2" height="15.0" fill="rgb(207,34,31)" rx="2" ry="2" />
<text  x="598.38" y="575.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::emplace&lt;unsigned long&amp;, char*&amp;&gt; (142 samples, 0.16%)</title><rect x="1078.9" y="565" width="1.9" height="15.0" fill="rgb(240,186,18)" rx="2" ry="2" />
<text  x="1081.86" y="575.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, 28u, unsigned char&gt; (49 samples, 0.06%)</title><rect x="1034.3" y="373" width="0.7" height="15.0" fill="rgb(205,18,16)" rx="2" ry="2" />
<text  x="1037.34" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;uint256, CBlockIndex*&gt; &gt; (12 samples, 0.01%)</title><rect x="49.2" y="549" width="0.2" height="15.0" fill="rgb(235,173,28)" rx="2" ry="2" />
<text  x="52.22" y="559.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (52 samples, 0.06%)</title><rect x="1011.6" y="517" width="0.7" height="15.0" fill="rgb(206,227,26)" rx="2" ry="2" />
<text  x="1014.64" y="527.5" ></text>
</g>
<g >
<title>__db_goff (84 samples, 0.10%)</title><rect x="357.8" y="629" width="1.1" height="15.0" fill="rgb(216,109,32)" rx="2" ry="2" />
<text  x="360.75" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_right (15 samples, 0.02%)</title><rect x="833.5" y="517" width="0.2" height="15.0" fill="rgb(213,26,24)" rx="2" ry="2" />
<text  x="836.47" y="527.5" ></text>
</g>
<g >
<title>std::multimap&lt;CBlockIndex*, CBlockIndex*, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::insert&lt;std::pair&lt;CBlockIndex*, CBlockIndex*&gt; &gt; (35 samples, 0.04%)</title><rect x="54.2" y="677" width="0.5" height="15.0" fill="rgb(214,105,54)" rx="2" ry="2" />
<text  x="57.19" y="687.5" ></text>
</g>
<g >
<title>__db_cursor (26 samples, 0.03%)</title><rect x="168.9" y="549" width="0.3" height="15.0" fill="rgb(236,137,8)" rx="2" ry="2" />
<text  x="171.87" y="559.5" ></text>
</g>
<g >
<title>std::less&lt;unsigned long&gt;::operator (11 samples, 0.01%)</title><rect x="655.3" y="501" width="0.1" height="15.0" fill="rgb(207,10,20)" rx="2" ry="2" />
<text  x="658.29" y="511.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (9 samples, 0.01%)</title><rect x="587.9" y="597" width="0.1" height="15.0" fill="rgb(231,182,33)" rx="2" ry="2" />
<text  x="590.93" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (9 samples, 0.01%)</title><rect x="870.7" y="565" width="0.1" height="15.0" fill="rgb(226,32,7)" rx="2" ry="2" />
<text  x="873.68" y="575.5" ></text>
</g>
<g >
<title>__lock_open (16 samples, 0.02%)</title><rect x="1104.7" y="613" width="0.2" height="15.0" fill="rgb(210,195,45)" rx="2" ry="2" />
<text  x="1107.68" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (9 samples, 0.01%)</title><rect x="582.2" y="565" width="0.1" height="15.0" fill="rgb(209,186,8)" rx="2" ry="2" />
<text  x="585.22" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_allocate (19 samples, 0.02%)</title><rect x="883.6" y="597" width="0.2" height="15.0" fill="rgb(221,210,2)" rx="2" ry="2" />
<text  x="886.55" y="607.5" ></text>
</g>
<g >
<title>CDataStream::~CDataStream (465 samples, 0.53%)</title><rect x="385.3" y="693" width="6.3" height="15.0" fill="rgb(243,88,50)" rx="2" ry="2" />
<text  x="388.32" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::clear (14 samples, 0.02%)</title><rect x="574.5" y="581" width="0.2" height="15.0" fill="rgb(233,80,31)" rx="2" ry="2" />
<text  x="577.46" y="591.5" ></text>
</g>
<g >
<title>COutPoint::Unserialize&lt;CDataStream&gt; (159 samples, 0.18%)</title><rect x="473.0" y="261" width="2.2" height="15.0" fill="rgb(223,115,44)" rx="2" ry="2" />
<text  x="476.04" y="271.5" ></text>
</g>
<g >
<title>__bam_defcmp (11 samples, 0.01%)</title><rect x="166.2" y="469" width="0.2" height="15.0" fill="rgb(207,128,50)" rx="2" ry="2" />
<text  x="169.20" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (15 samples, 0.02%)</title><rect x="172.6" y="485" width="0.2" height="15.0" fill="rgb(247,67,35)" rx="2" ry="2" />
<text  x="175.59" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (15 samples, 0.02%)</title><rect x="80.2" y="469" width="0.2" height="15.0" fill="rgb(253,134,28)" rx="2" ry="2" />
<text  x="83.17" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (88 samples, 0.10%)</title><rect x="577.6" y="613" width="1.2" height="15.0" fill="rgb(225,152,42)" rx="2" ry="2" />
<text  x="580.60" y="623.5" ></text>
</g>
<g >
<title>__db_new (83 samples, 0.09%)</title><rect x="155.2" y="485" width="1.1" height="15.0" fill="rgb(211,66,46)" rx="2" ry="2" />
<text  x="158.18" y="495.5" ></text>
</g>
<g >
<title>std::unordered_multimap&lt;COutPoint, uint256, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt; &gt;::equal_range (384 samples, 0.44%)</title><rect x="909.4" y="629" width="5.2" height="15.0" fill="rgb(246,217,49)" rx="2" ry="2" />
<text  x="912.39" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="592.6" y="517" width="0.1" height="15.0" fill="rgb(242,183,43)" rx="2" ry="2" />
<text  x="595.57" y="527.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (34 samples, 0.04%)</title><rect x="598.9" y="533" width="0.5" height="15.0" fill="rgb(222,154,53)" rx="2" ry="2" />
<text  x="601.91" y="543.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (391 samples, 0.45%)</title><rect x="1113.6" y="357" width="5.2" height="15.0" fill="rgb(205,160,13)" rx="2" ry="2" />
<text  x="1116.56" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::deallocate (13 samples, 0.01%)</title><rect x="657.8" y="437" width="0.1" height="15.0" fill="rgb(213,39,34)" rx="2" ry="2" />
<text  x="660.76" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (20 samples, 0.02%)</title><rect x="125.9" y="389" width="0.3" height="15.0" fill="rgb(229,112,30)" rx="2" ry="2" />
<text  x="128.88" y="399.5" ></text>
</g>
<g >
<title>align_up (9 samples, 0.01%)</title><rect x="847.5" y="389" width="0.1" height="15.0" fill="rgb(206,169,21)" rx="2" ry="2" />
<text  x="850.46" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (18 samples, 0.02%)</title><rect x="922.5" y="517" width="0.2" height="15.0" fill="rgb(243,183,46)" rx="2" ry="2" />
<text  x="925.47" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (35 samples, 0.04%)</title><rect x="930.0" y="565" width="0.5" height="15.0" fill="rgb(214,45,22)" rx="2" ry="2" />
<text  x="933.02" y="575.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, 4&gt; (17 samples, 0.02%)</title><rect x="398.6" y="501" width="0.2" height="15.0" fill="rgb(211,198,11)" rx="2" ry="2" />
<text  x="401.59" y="511.5" ></text>
</g>
<g >
<title>uint256::uint256 (17 samples, 0.02%)</title><rect x="522.5" y="389" width="0.2" height="15.0" fill="rgb(232,157,9)" rx="2" ry="2" />
<text  x="525.46" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (10 samples, 0.01%)</title><rect x="448.9" y="565" width="0.1" height="15.0" fill="rgb(233,203,9)" rx="2" ry="2" />
<text  x="451.88" y="575.5" ></text>
</g>
<g >
<title>FillableSigningProvider::AddCScript (2,629 samples, 3.00%)</title><rect x="705.4" y="661" width="35.5" height="15.0" fill="rgb(238,202,31)" rx="2" ry="2" />
<text  x="708.42" y="671.5" >Fil..</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (19 samples, 0.02%)</title><rect x="728.3" y="581" width="0.2" height="15.0" fill="rgb(243,55,54)" rx="2" ry="2" />
<text  x="731.28" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (37 samples, 0.04%)</title><rect x="355.8" y="565" width="0.5" height="15.0" fill="rgb(234,25,16)" rx="2" ry="2" />
<text  x="358.81" y="575.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, unsigned int, std::allocator&lt;unsigned int&gt;, unsigned int&gt; (197 samples, 0.22%)</title><rect x="395.8" y="485" width="2.7" height="15.0" fill="rgb(215,78,12)" rx="2" ry="2" />
<text  x="398.84" y="495.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (101 samples, 0.12%)</title><rect x="536.2" y="165" width="1.4" height="15.0" fill="rgb(210,72,8)" rx="2" ry="2" />
<text  x="539.22" y="175.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="72.7" y="453" width="0.1" height="15.0" fill="rgb(225,203,18)" rx="2" ry="2" />
<text  x="75.65" y="463.5" ></text>
</g>
<g >
<title>BerkeleyBatch::SafeDbt::SafeDbt (72 samples, 0.08%)</title><rect x="187.6" y="677" width="0.9" height="15.0" fill="rgb(213,20,39)" rx="2" ry="2" />
<text  x="190.58" y="687.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (534 samples, 0.61%)</title><rect x="543.9" y="341" width="7.2" height="15.0" fill="rgb(207,175,48)" rx="2" ry="2" />
<text  x="546.86" y="351.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (10 samples, 0.01%)</title><rect x="1122.6" y="565" width="0.1" height="15.0" fill="rgb(226,130,11)" rx="2" ry="2" />
<text  x="1125.57" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (15 samples, 0.02%)</title><rect x="816.9" y="437" width="0.2" height="15.0" fill="rgb(254,58,38)" rx="2" ry="2" />
<text  x="819.86" y="447.5" ></text>
</g>
<g >
<title>CSHA256::Write (137 samples, 0.16%)</title><rect x="1125.6" y="597" width="1.8" height="15.0" fill="rgb(227,123,44)" rx="2" ry="2" />
<text  x="1128.58" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (8 samples, 0.01%)</title><rect x="583.6" y="549" width="0.1" height="15.0" fill="rgb(234,136,26)" rx="2" ry="2" />
<text  x="586.57" y="559.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;void*, void*&gt; &gt;::operator (9 samples, 0.01%)</title><rect x="879.3" y="549" width="0.2" height="15.0" fill="rgb(214,13,48)" rx="2" ry="2" />
<text  x="882.33" y="559.5" ></text>
</g>
<g >
<title>__db_lput (28 samples, 0.03%)</title><rect x="116.8" y="437" width="0.4" height="15.0" fill="rgb(218,56,19)" rx="2" ry="2" />
<text  x="119.81" y="447.5" ></text>
</g>
<g >
<title>__memp_fput (26 samples, 0.03%)</title><rect x="99.5" y="405" width="0.4" height="15.0" fill="rgb(243,153,29)" rx="2" ry="2" />
<text  x="102.54" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;COutPoint, uint256&gt;::pair&lt;COutPoint, uint256, true&gt; (11 samples, 0.01%)</title><rect x="905.8" y="613" width="0.1" height="15.0" fill="rgb(237,210,10)" rx="2" ry="2" />
<text  x="908.80" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_construct_node&lt;unsigned long&amp;, char*&amp;&gt; (46 samples, 0.05%)</title><rect x="1079.1" y="517" width="0.6" height="15.0" fill="rgb(254,2,9)" rx="2" ry="2" />
<text  x="1082.10" y="527.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CSizeComputer, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (449 samples, 0.51%)</title><rect x="1026.4" y="549" width="6.0" height="15.0" fill="rgb(206,94,52)" rx="2" ry="2" />
<text  x="1029.39" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="115.0" y="357" width="0.1" height="15.0" fill="rgb(244,31,5)" rx="2" ry="2" />
<text  x="117.98" y="367.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (25 samples, 0.03%)</title><rect x="46.8" y="549" width="0.3" height="15.0" fill="rgb(226,118,50)" rx="2" ry="2" />
<text  x="49.78" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::end (9 samples, 0.01%)</title><rect x="1090.7" y="581" width="0.1" height="15.0" fill="rgb(209,145,53)" rx="2" ry="2" />
<text  x="1093.68" y="591.5" ></text>
</g>
<g >
<title>__bam_defcmp (13 samples, 0.01%)</title><rect x="82.4" y="405" width="0.2" height="15.0" fill="rgb(224,159,1)" rx="2" ry="2" />
<text  x="85.43" y="415.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (164 samples, 0.19%)</title><rect x="183.1" y="341" width="2.3" height="15.0" fill="rgb(219,121,43)" rx="2" ry="2" />
<text  x="186.14" y="351.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (10 samples, 0.01%)</title><rect x="570.6" y="501" width="0.1" height="15.0" fill="rgb(216,146,22)" rx="2" ry="2" />
<text  x="573.61" y="511.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (164 samples, 0.19%)</title><rect x="180.9" y="341" width="2.2" height="15.0" fill="rgb(215,222,36)" rx="2" ry="2" />
<text  x="183.93" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;uint256&amp;&gt; (8 samples, 0.01%)</title><rect x="1004.6" y="645" width="0.1" height="15.0" fill="rgb(246,43,31)" rx="2" ry="2" />
<text  x="1007.59" y="655.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (1,394 samples, 1.59%)</title><rect x="767.0" y="597" width="18.8" height="15.0" fill="rgb(253,205,49)" rx="2" ry="2" />
<text  x="769.98" y="607.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (20 samples, 0.02%)</title><rect x="360.3" y="613" width="0.2" height="15.0" fill="rgb(241,65,42)" rx="2" ry="2" />
<text  x="363.26" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (116 samples, 0.13%)</title><rect x="1100.5" y="677" width="1.6" height="15.0" fill="rgb(234,159,1)" rx="2" ry="2" />
<text  x="1103.52" y="687.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::IsNull (12 samples, 0.01%)</title><rect x="951.5" y="661" width="0.2" height="15.0" fill="rgb(211,206,14)" rx="2" ry="2" />
<text  x="954.50" y="671.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (20 samples, 0.02%)</title><rect x="942.0" y="469" width="0.3" height="15.0" fill="rgb(237,212,51)" rx="2" ry="2" />
<text  x="945.01" y="479.5" ></text>
</g>
<g >
<title>CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (372 samples, 0.42%)</title><rect x="39.8" y="661" width="5.0" height="15.0" fill="rgb(216,2,12)" rx="2" ry="2" />
<text  x="42.82" y="671.5" ></text>
</g>
<g >
<title>MakeTransactionRef (396 samples, 0.45%)</title><rect x="1055.4" y="677" width="5.4" height="15.0" fill="rgb(227,33,13)" rx="2" ry="2" />
<text  x="1058.43" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::~_Vector_base (8 samples, 0.01%)</title><rect x="1179.7" y="741" width="0.2" height="15.0" fill="rgb(249,184,44)" rx="2" ry="2" />
<text  x="1182.74" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_ptr (22 samples, 0.03%)</title><rect x="981.5" y="581" width="0.3" height="15.0" fill="rgb(249,106,34)" rx="2" ry="2" />
<text  x="984.52" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_addr (8 samples, 0.01%)</title><rect x="1147.7" y="741" width="0.1" height="15.0" fill="rgb(205,16,10)" rx="2" ry="2" />
<text  x="1150.73" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_addr (9 samples, 0.01%)</title><rect x="834.4" y="469" width="0.1" height="15.0" fill="rgb(230,88,45)" rx="2" ry="2" />
<text  x="837.42" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="115.8" y="389" width="0.2" height="15.0" fill="rgb(236,58,3)" rx="2" ry="2" />
<text  x="118.84" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::empty (70 samples, 0.08%)</title><rect x="558.1" y="261" width="1.0" height="15.0" fill="rgb(209,79,3)" rx="2" ry="2" />
<text  x="561.12" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;::operator++ (10 samples, 0.01%)</title><rect x="872.5" y="581" width="0.2" height="15.0" fill="rgb(239,98,13)" rx="2" ry="2" />
<text  x="875.53" y="591.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="437" width="4.2" height="15.0" fill="rgb(225,0,14)" rx="2" ry="2" />
<text  x="1138.80" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (17 samples, 0.02%)</title><rect x="608.9" y="597" width="0.2" height="15.0" fill="rgb(210,54,17)" rx="2" ry="2" />
<text  x="611.89" y="607.5" ></text>
</g>
<g >
<title>__dbc_iget (3,835 samples, 4.38%)</title><rect x="331.2" y="645" width="51.6" height="15.0" fill="rgb(223,3,37)" rx="2" ry="2" />
<text  x="334.15" y="655.5" >__dbc..</text>
</g>
<g >
<title>BerkeleyEnvironment::Open (19 samples, 0.02%)</title><rect x="1104.7" y="677" width="0.2" height="15.0" fill="rgb(244,154,47)" rx="2" ry="2" />
<text  x="1107.68" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, true&gt; &gt;::allocate (30 samples, 0.03%)</title><rect x="891.4" y="597" width="0.4" height="15.0" fill="rgb(228,203,39)" rx="2" ry="2" />
<text  x="894.35" y="607.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (13 samples, 0.01%)</title><rect x="109.5" y="373" width="0.2" height="15.0" fill="rgb(234,105,23)" rx="2" ry="2" />
<text  x="112.53" y="383.5" ></text>
</g>
<g >
<title>CSHA256::Write (324 samples, 0.37%)</title><rect x="1109.2" y="405" width="4.4" height="15.0" fill="rgb(236,53,38)" rx="2" ry="2" />
<text  x="1112.20" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (16 samples, 0.02%)</title><rect x="614.1" y="421" width="0.2" height="15.0" fill="rgb(248,220,6)" rx="2" ry="2" />
<text  x="617.07" y="431.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (17 samples, 0.02%)</title><rect x="829.0" y="549" width="0.3" height="15.0" fill="rgb(216,152,15)" rx="2" ry="2" />
<text  x="832.03" y="559.5" ></text>
</g>
<g >
<title>__lock_get (40 samples, 0.05%)</title><rect x="166.9" y="469" width="0.5" height="15.0" fill="rgb(214,84,47)" rx="2" ry="2" />
<text  x="169.88" y="479.5" ></text>
</g>
<g >
<title>CScriptID::CScriptID (1,328 samples, 1.52%)</title><rect x="708.2" y="645" width="17.9" height="15.0" fill="rgb(250,137,40)" rx="2" ry="2" />
<text  x="711.23" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, CScriptID const&amp;&gt;::_Tuple_impl (33 samples, 0.04%)</title><rect x="827.4" y="517" width="0.5" height="15.0" fill="rgb(208,98,49)" rx="2" ry="2" />
<text  x="830.42" y="527.5" ></text>
</g>
<g >
<title>_int_malloc (14 samples, 0.02%)</title><rect x="891.6" y="549" width="0.2" height="15.0" fill="rgb(248,223,49)" rx="2" ry="2" />
<text  x="894.57" y="559.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (45 samples, 0.05%)</title><rect x="893.5" y="597" width="0.6" height="15.0" fill="rgb(230,179,31)" rx="2" ry="2" />
<text  x="896.47" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="27.3" y="757" width="0.1" height="15.0" fill="rgb(213,113,47)" rx="2" ry="2" />
<text  x="30.26" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (20 samples, 0.02%)</title><rect x="733.8" y="565" width="0.3" height="15.0" fill="rgb(227,52,44)" rx="2" ry="2" />
<text  x="736.79" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (44 samples, 0.05%)</title><rect x="1158.8" y="757" width="0.6" height="15.0" fill="rgb(227,190,21)" rx="2" ry="2" />
<text  x="1161.79" y="767.5" ></text>
</g>
<g >
<title>LoadBlockIndexDB (1,075 samples, 1.23%)</title><rect x="38.4" y="709" width="14.5" height="15.0" fill="rgb(221,173,6)" rx="2" ry="2" />
<text  x="41.43" y="719.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;&gt; (215 samples, 0.25%)</title><rect x="395.6" y="533" width="2.9" height="15.0" fill="rgb(233,129,25)" rx="2" ry="2" />
<text  x="398.63" y="543.5" ></text>
</g>
<g >
<title>zero_after_free_allocator&lt;char&gt;::zero_after_free_allocator (24 samples, 0.03%)</title><rect x="385.0" y="629" width="0.3" height="15.0" fill="rgb(215,192,0)" rx="2" ry="2" />
<text  x="388.00" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;uint256&gt; (19 samples, 0.02%)</title><rect x="929.7" y="501" width="0.2" height="15.0" fill="rgb(226,28,22)" rx="2" ry="2" />
<text  x="932.68" y="511.5" ></text>
</g>
<g >
<title>__bam_search (443 samples, 0.51%)</title><rect x="106.7" y="421" width="6.0" height="15.0" fill="rgb(205,109,39)" rx="2" ry="2" />
<text  x="109.73" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::vector (13 samples, 0.01%)</title><rect x="685.1" y="645" width="0.1" height="15.0" fill="rgb(225,115,3)" rx="2" ry="2" />
<text  x="688.06" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_deallocate (10 samples, 0.01%)</title><rect x="481.2" y="325" width="0.1" height="15.0" fill="rgb(223,44,45)" rx="2" ry="2" />
<text  x="484.19" y="335.5" ></text>
</g>
<g >
<title>__db_get (82 samples, 0.09%)</title><rect x="102.1" y="469" width="1.1" height="15.0" fill="rgb(207,157,13)" rx="2" ry="2" />
<text  x="105.07" y="479.5" ></text>
</g>
<g >
<title>LookupBlockIndex (11 samples, 0.01%)</title><rect x="34.5" y="597" width="0.1" height="15.0" fill="rgb(249,219,13)" rx="2" ry="2" />
<text  x="37.47" y="607.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::apply_visitor&lt;boost::detail::variant::comparer&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;, boost::detail::variant::less_comp&gt; &gt; (8 samples, 0.01%)</title><rect x="1062.1" y="581" width="0.1" height="15.0" fill="rgb(254,209,7)" rx="2" ry="2" />
<text  x="1065.10" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (18 samples, 0.02%)</title><rect x="681.7" y="485" width="0.3" height="15.0" fill="rgb(225,39,22)" rx="2" ry="2" />
<text  x="684.75" y="495.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (93 samples, 0.11%)</title><rect x="1029.9" y="405" width="1.2" height="15.0" fill="rgb(220,180,0)" rx="2" ry="2" />
<text  x="1032.89" y="415.5" ></text>
</g>
<g >
<title>CHashWriter::write (17 samples, 0.02%)</title><rect x="536.9" y="69" width="0.2" height="15.0" fill="rgb(217,8,46)" rx="2" ry="2" />
<text  x="539.85" y="79.5" ></text>
</g>
<g >
<title>CMutableTransaction::HasWitness (62 samples, 0.07%)</title><rect x="516.0" y="405" width="0.9" height="15.0" fill="rgb(205,172,5)" rx="2" ry="2" />
<text  x="519.04" y="415.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (109 samples, 0.12%)</title><rect x="100.5" y="437" width="1.5" height="15.0" fill="rgb(211,181,31)" rx="2" ry="2" />
<text  x="103.55" y="447.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::UniqueLock (951 samples, 1.09%)</title><rect x="869.1" y="645" width="12.8" height="15.0" fill="rgb(206,175,52)" rx="2" ry="2" />
<text  x="872.09" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (328 samples, 0.37%)</title><rect x="180.9" y="629" width="4.5" height="15.0" fill="rgb(253,84,0)" rx="2" ry="2" />
<text  x="183.93" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_insert_multi_node (663 samples, 0.76%)</title><rect x="915.4" y="565" width="8.9" height="15.0" fill="rgb(236,31,44)" rx="2" ry="2" />
<text  x="918.37" y="575.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (1,233 samples, 1.41%)</title><rect x="686.4" y="613" width="16.7" height="15.0" fill="rgb(224,209,20)" rx="2" ry="2" />
<text  x="689.44" y="623.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (35 samples, 0.04%)</title><rect x="1122.8" y="565" width="0.5" height="15.0" fill="rgb(214,145,45)" rx="2" ry="2" />
<text  x="1125.83" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (13 samples, 0.01%)</title><rect x="1154.9" y="757" width="0.2" height="15.0" fill="rgb(235,101,28)" rx="2" ry="2" />
<text  x="1157.91" y="767.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;char*&gt; (9 samples, 0.01%)</title><rect x="681.0" y="517" width="0.1" height="15.0" fill="rgb(225,123,37)" rx="2" ry="2" />
<text  x="683.96" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_S_value (17 samples, 0.02%)</title><rect x="53.8" y="629" width="0.2" height="15.0" fill="rgb(242,129,39)" rx="2" ry="2" />
<text  x="56.77" y="639.5" ></text>
</g>
<g >
<title>__bam_iitem (35 samples, 0.04%)</title><rect x="172.4" y="517" width="0.5" height="15.0" fill="rgb(249,198,31)" rx="2" ry="2" />
<text  x="175.39" y="527.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (18 samples, 0.02%)</title><rect x="506.4" y="261" width="0.2" height="15.0" fill="rgb(222,220,24)" rx="2" ry="2" />
<text  x="509.37" y="271.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (23 samples, 0.03%)</title><rect x="472.0" y="341" width="0.4" height="15.0" fill="rgb(219,70,49)" rx="2" ry="2" />
<text  x="475.04" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree_impl&lt;std::less&lt;COutPoint&gt;, true&gt;::_Rb_tree_impl (35 samples, 0.04%)</title><rect x="1045.9" y="629" width="0.5" height="15.0" fill="rgb(251,228,41)" rx="2" ry="2" />
<text  x="1048.91" y="639.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.01%)</title><rect x="451.0" y="533" width="0.2" height="15.0" fill="rgb(226,6,2)" rx="2" ry="2" />
<text  x="454.01" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (68 samples, 0.08%)</title><rect x="67.8" y="533" width="0.9" height="15.0" fill="rgb(212,197,44)" rx="2" ry="2" />
<text  x="70.80" y="543.5" ></text>
</g>
<g >
<title>CHash256::Write (15 samples, 0.02%)</title><rect x="536.5" y="85" width="0.2" height="15.0" fill="rgb(216,40,33)" rx="2" ry="2" />
<text  x="539.49" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_rehash_aux (139 samples, 0.16%)</title><rect x="921.8" y="533" width="1.9" height="15.0" fill="rgb(214,127,51)" rx="2" ry="2" />
<text  x="924.82" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (16 samples, 0.02%)</title><rect x="510.0" y="229" width="0.2" height="15.0" fill="rgb(221,86,47)" rx="2" ry="2" />
<text  x="513.03" y="239.5" ></text>
</g>
<g >
<title>__os_malloc (11 samples, 0.01%)</title><rect x="86.7" y="373" width="0.1" height="15.0" fill="rgb(237,71,24)" rx="2" ry="2" />
<text  x="89.68" y="383.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (165 samples, 0.19%)</title><rect x="410.0" y="629" width="2.2" height="15.0" fill="rgb(225,80,19)" rx="2" ry="2" />
<text  x="413.01" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (8 samples, 0.01%)</title><rect x="482.3" y="181" width="0.1" height="15.0" fill="rgb(241,203,12)" rx="2" ry="2" />
<text  x="485.27" y="191.5" ></text>
</g>
<g >
<title>__bam_defcmp (8 samples, 0.01%)</title><rect x="123.3" y="389" width="0.1" height="15.0" fill="rgb(245,29,42)" rx="2" ry="2" />
<text  x="126.25" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (398 samples, 0.45%)</title><rect x="735.5" y="629" width="5.3" height="15.0" fill="rgb(242,117,41)" rx="2" ry="2" />
<text  x="738.46" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (18 samples, 0.02%)</title><rect x="458.6" y="533" width="0.2" height="15.0" fill="rgb(216,66,38)" rx="2" ry="2" />
<text  x="461.58" y="543.5" ></text>
</g>
<g >
<title>__db_cursor (19 samples, 0.02%)</title><rect x="69.8" y="533" width="0.2" height="15.0" fill="rgb(223,67,8)" rx="2" ry="2" />
<text  x="72.75" y="543.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Unserialize&lt;CDataStream&gt; (1,115 samples, 1.27%)</title><rect x="636.1" y="645" width="15.1" height="15.0" fill="rgb(222,151,52)" rx="2" ry="2" />
<text  x="639.13" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::allocate (10 samples, 0.01%)</title><rect x="1083.6" y="501" width="0.2" height="15.0" fill="rgb(237,143,8)" rx="2" ry="2" />
<text  x="1086.63" y="511.5" ></text>
</g>
<g >
<title>__memp_fput (12 samples, 0.01%)</title><rect x="180.2" y="581" width="0.2" height="15.0" fill="rgb(250,113,14)" rx="2" ry="2" />
<text  x="183.23" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (80 samples, 0.09%)</title><rect x="1098.1" y="629" width="1.1" height="15.0" fill="rgb(254,32,3)" rx="2" ry="2" />
<text  x="1101.15" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_create_node&lt;unsigned long&amp;, char*&amp;&gt; (49 samples, 0.06%)</title><rect x="674.2" y="517" width="0.6" height="15.0" fill="rgb(236,188,16)" rx="2" ry="2" />
<text  x="677.19" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (9 samples, 0.01%)</title><rect x="581.1" y="533" width="0.2" height="15.0" fill="rgb(227,173,49)" rx="2" ry="2" />
<text  x="584.15" y="543.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (28 samples, 0.03%)</title><rect x="546.0" y="117" width="0.4" height="15.0" fill="rgb(230,73,9)" rx="2" ry="2" />
<text  x="549.03" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::emplace&lt;char*, unsigned long&amp;&gt; (164 samples, 0.19%)</title><rect x="615.2" y="517" width="2.2" height="15.0" fill="rgb(226,16,5)" rx="2" ry="2" />
<text  x="618.21" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::clear (35 samples, 0.04%)</title><rect x="498.0" y="325" width="0.5" height="15.0" fill="rgb(210,129,27)" rx="2" ry="2" />
<text  x="501.04" y="335.5" ></text>
</g>
<g >
<title>Arena::alloc (442 samples, 0.50%)</title><rect x="611.5" y="533" width="5.9" height="15.0" fill="rgb(226,105,39)" rx="2" ry="2" />
<text  x="614.47" y="543.5" ></text>
</g>
<g >
<title>__memp_bhfree (34 samples, 0.04%)</title><rect x="145.3" y="437" width="0.5" height="15.0" fill="rgb(249,148,18)" rx="2" ry="2" />
<text  x="148.31" y="447.5" ></text>
</g>
<g >
<title>[unknown] (48 samples, 0.05%)</title><rect x="146.4" y="405" width="0.6" height="15.0" fill="rgb(233,122,38)" rx="2" ry="2" />
<text  x="149.35" y="415.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt; (25 samples, 0.03%)</title><rect x="983.6" y="613" width="0.3" height="15.0" fill="rgb(214,216,50)" rx="2" ry="2" />
<text  x="986.57" y="623.5" ></text>
</g>
<g >
<title>uint256::uint256 (27 samples, 0.03%)</title><rect x="31.8" y="565" width="0.4" height="15.0" fill="rgb(211,124,27)" rx="2" ry="2" />
<text  x="34.79" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::allocate (522 samples, 0.60%)</title><rect x="611.3" y="581" width="7.0" height="15.0" fill="rgb(245,66,23)" rx="2" ry="2" />
<text  x="614.27" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (8 samples, 0.01%)</title><rect x="534.5" y="293" width="0.1" height="15.0" fill="rgb(215,17,24)" rx="2" ry="2" />
<text  x="537.48" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (8 samples, 0.01%)</title><rect x="663.1" y="501" width="0.1" height="15.0" fill="rgb(252,152,51)" rx="2" ry="2" />
<text  x="666.08" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::erase[abi:cxx11] (62 samples, 0.07%)</title><rect x="851.4" y="373" width="0.8" height="15.0" fill="rgb(249,220,12)" rx="2" ry="2" />
<text  x="854.41" y="383.5" ></text>
</g>
<g >
<title>UnserializeTransaction&lt;CDataStream, CMutableTransaction&gt; (14 samples, 0.02%)</title><rect x="27.5" y="757" width="0.2" height="15.0" fill="rgb(241,45,17)" rx="2" ry="2" />
<text  x="30.53" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, true&gt;::_M_next (43 samples, 0.05%)</title><rect x="889.0" y="581" width="0.6" height="15.0" fill="rgb(241,209,10)" rx="2" ry="2" />
<text  x="891.98" y="591.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, unsigned char  (20 samples, 0.02%)</title><rect x="398.6" y="517" width="0.3" height="15.0" fill="rgb(228,65,21)" rx="2" ry="2" />
<text  x="401.59" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::operator (60 samples, 0.07%)</title><rect x="847.6" y="389" width="0.8" height="15.0" fill="rgb(244,186,42)" rx="2" ry="2" />
<text  x="850.62" y="399.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (152 samples, 0.17%)</title><rect x="1123.5" y="581" width="2.1" height="15.0" fill="rgb(216,31,0)" rx="2" ry="2" />
<text  x="1126.54" y="591.5" ></text>
</g>
<g >
<title>CHashWriter::write (311 samples, 0.36%)</title><rect x="1135.8" y="229" width="4.2" height="15.0" fill="rgb(228,106,35)" rx="2" ry="2" />
<text  x="1138.80" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;COutPoint&gt;::_M_ptr (8 samples, 0.01%)</title><rect x="1040.5" y="565" width="0.1" height="15.0" fill="rgb(239,89,36)" rx="2" ry="2" />
<text  x="1043.52" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::vector (51 samples, 0.06%)</title><rect x="601.5" y="629" width="0.7" height="15.0" fill="rgb(205,141,46)" rx="2" ry="2" />
<text  x="604.52" y="639.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (82 samples, 0.09%)</title><rect x="835.7" y="629" width="1.1" height="15.0" fill="rgb(222,68,34)" rx="2" ry="2" />
<text  x="838.73" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (25 samples, 0.03%)</title><rect x="125.4" y="389" width="0.3" height="15.0" fill="rgb(241,179,4)" rx="2" ry="2" />
<text  x="128.36" y="399.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (14 samples, 0.02%)</title><rect x="72.5" y="453" width="0.2" height="15.0" fill="rgb(239,69,1)" rx="2" ry="2" />
<text  x="75.46" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;uint256*&gt; (24 samples, 0.03%)</title><rect x="604.3" y="597" width="0.4" height="15.0" fill="rgb(219,58,9)" rx="2" ry="2" />
<text  x="607.34" y="607.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, uint256&gt; (32 samples, 0.04%)</title><rect x="546.0" y="133" width="0.4" height="15.0" fill="rgb(238,77,5)" rx="2" ry="2" />
<text  x="548.97" y="143.5" ></text>
</g>
<g >
<title>__db_cursor_int (22 samples, 0.03%)</title><rect x="164.4" y="533" width="0.3" height="15.0" fill="rgb(214,73,18)" rx="2" ry="2" />
<text  x="167.40" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (72 samples, 0.08%)</title><rect x="508.2" y="325" width="0.9" height="15.0" fill="rgb(233,221,54)" rx="2" ry="2" />
<text  x="511.17" y="335.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::insert (110 samples, 0.13%)</title><rect x="809.7" y="453" width="1.5" height="15.0" fill="rgb(220,76,42)" rx="2" ry="2" />
<text  x="812.70" y="463.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (8 samples, 0.01%)</title><rect x="942.2" y="453" width="0.1" height="15.0" fill="rgb(223,209,34)" rx="2" ry="2" />
<text  x="945.17" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair&lt;void*&amp;, true&gt; (43 samples, 0.05%)</title><rect x="728.8" y="565" width="0.6" height="15.0" fill="rgb(254,57,48)" rx="2" ry="2" />
<text  x="731.85" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (160 samples, 0.18%)</title><rect x="452.6" y="485" width="2.2" height="15.0" fill="rgb(218,138,29)" rx="2" ry="2" />
<text  x="455.62" y="495.5" ></text>
</g>
<g >
<title>COutPoint::Serialize&lt;CHashWriter&gt; (102 samples, 0.12%)</title><rect x="545.9" y="197" width="1.3" height="15.0" fill="rgb(245,87,21)" rx="2" ry="2" />
<text  x="548.85" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (25 samples, 0.03%)</title><rect x="815.3" y="421" width="0.3" height="15.0" fill="rgb(253,175,29)" rx="2" ry="2" />
<text  x="818.30" y="431.5" ></text>
</g>
<g >
<title>__lock_get (14 samples, 0.02%)</title><rect x="153.8" y="453" width="0.1" height="15.0" fill="rgb(215,132,25)" rx="2" ry="2" />
<text  x="156.75" y="463.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (164 samples, 0.19%)</title><rect x="183.1" y="517" width="2.3" height="15.0" fill="rgb(230,173,47)" rx="2" ry="2" />
<text  x="186.14" y="527.5" ></text>
</g>
<g >
<title>CSipHasher::Write (52 samples, 0.06%)</title><rect x="890.2" y="597" width="0.7" height="15.0" fill="rgb(208,189,28)" rx="2" ry="2" />
<text  x="893.18" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (14 samples, 0.02%)</title><rect x="470.7" y="309" width="0.2" height="15.0" fill="rgb(233,85,19)" rx="2" ry="2" />
<text  x="473.70" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::max_size (10 samples, 0.01%)</title><rect x="1043.6" y="533" width="0.1" height="15.0" fill="rgb(251,8,54)" rx="2" ry="2" />
<text  x="1046.55" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::operator (30 samples, 0.03%)</title><rect x="611.7" y="517" width="0.4" height="15.0" fill="rgb(247,228,47)" rx="2" ry="2" />
<text  x="614.66" y="527.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.03%)</title><rect x="565.9" y="469" width="0.3" height="15.0" fill="rgb(238,135,33)" rx="2" ry="2" />
<text  x="568.88" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (24 samples, 0.03%)</title><rect x="355.2" y="565" width="0.3" height="15.0" fill="rgb(244,149,48)" rx="2" ry="2" />
<text  x="358.15" y="575.5" ></text>
</g>
<g >
<title>__bswap_32 (20 samples, 0.02%)</title><rect x="521.6" y="341" width="0.3" height="15.0" fill="rgb(228,222,25)" rx="2" ry="2" />
<text  x="524.58" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (44 samples, 0.05%)</title><rect x="990.9" y="565" width="0.6" height="15.0" fill="rgb(235,157,42)" rx="2" ry="2" />
<text  x="993.88" y="575.5" ></text>
</g>
<g >
<title>__memp_pgread (18 samples, 0.02%)</title><rect x="87.2" y="405" width="0.3" height="15.0" fill="rgb(231,51,8)" rx="2" ry="2" />
<text  x="90.22" y="415.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.04%)</title><rect x="179.8" y="485" width="0.4" height="15.0" fill="rgb(206,228,10)" rx="2" ry="2" />
<text  x="182.81" y="495.5" ></text>
</g>
<g >
<title>LoadBlockIndexDB (56 samples, 0.06%)</title><rect x="32.2" y="693" width="0.7" height="15.0" fill="rgb(238,126,48)" rx="2" ry="2" />
<text  x="35.20" y="703.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (24 samples, 0.03%)</title><rect x="548.2" y="101" width="0.3" height="15.0" fill="rgb(247,62,20)" rx="2" ry="2" />
<text  x="551.20" y="111.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, uint256&gt; (50 samples, 0.06%)</title><rect x="1028.0" y="405" width="0.7" height="15.0" fill="rgb(251,56,39)" rx="2" ry="2" />
<text  x="1031.00" y="415.5" ></text>
</g>
<g >
<title>CScript::operator= (55 samples, 0.06%)</title><rect x="785.9" y="613" width="0.7" height="15.0" fill="rgb(241,104,23)" rx="2" ry="2" />
<text  x="788.88" y="623.5" ></text>
</g>
<g >
<title>ser_readdata64&lt;CDataStream&gt; (13 samples, 0.01%)</title><rect x="403.0" y="565" width="0.1" height="15.0" fill="rgb(210,209,22)" rx="2" ry="2" />
<text  x="405.96" y="575.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (10 samples, 0.01%)</title><rect x="532.2" y="85" width="0.1" height="15.0" fill="rgb(246,35,30)" rx="2" ry="2" />
<text  x="535.21" y="95.5" ></text>
</g>
<g >
<title>QuadRound (128 samples, 0.15%)</title><rect x="183.3" y="149" width="1.7" height="15.0" fill="rgb(214,157,15)" rx="2" ry="2" />
<text  x="186.28" y="159.5" ></text>
</g>
<g >
<title>CChain::operator[] (9 samples, 0.01%)</title><rect x="34.2" y="581" width="0.1" height="15.0" fill="rgb(214,105,3)" rx="2" ry="2" />
<text  x="37.20" y="591.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (24 samples, 0.03%)</title><rect x="1106.8" y="357" width="0.3" height="15.0" fill="rgb(221,78,16)" rx="2" ry="2" />
<text  x="1109.83" y="367.5" ></text>
</g>
<g >
<title>__bswap_32 (9 samples, 0.01%)</title><rect x="725.2" y="565" width="0.1" height="15.0" fill="rgb(236,135,41)" rx="2" ry="2" />
<text  x="728.21" y="575.5" ></text>
</g>
<g >
<title>__lock_get (49 samples, 0.06%)</title><rect x="123.8" y="389" width="0.6" height="15.0" fill="rgb(243,157,42)" rx="2" ry="2" />
<text  x="126.78" y="399.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, unsigned int&gt; (12 samples, 0.01%)</title><rect x="1031.3" y="469" width="0.2" height="15.0" fill="rgb(234,16,9)" rx="2" ry="2" />
<text  x="1034.30" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::~_Vector_impl (15 samples, 0.02%)</title><rect x="515.1" y="341" width="0.2" height="15.0" fill="rgb(212,125,20)" rx="2" ry="2" />
<text  x="518.14" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20 samples, 0.02%)</title><rect x="898.9" y="549" width="0.3" height="15.0" fill="rgb(212,29,46)" rx="2" ry="2" />
<text  x="901.89" y="559.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (9 samples, 0.01%)</title><rect x="553.5" y="101" width="0.1" height="15.0" fill="rgb(233,173,38)" rx="2" ry="2" />
<text  x="556.49" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10 samples, 0.01%)</title><rect x="676.6" y="517" width="0.1" height="15.0" fill="rgb(244,35,24)" rx="2" ry="2" />
<text  x="679.61" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair&lt;void*&amp;, true&gt; (90 samples, 0.10%)</title><rect x="941.3" y="517" width="1.2" height="15.0" fill="rgb(228,32,47)" rx="2" ry="2" />
<text  x="944.26" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::find (18 samples, 0.02%)</title><rect x="1158.0" y="757" width="0.3" height="15.0" fill="rgb(209,11,41)" rx="2" ry="2" />
<text  x="1161.03" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::deallocate (1,047 samples, 1.20%)</title><rect x="1077.6" y="629" width="14.1" height="15.0" fill="rgb(249,48,45)" rx="2" ry="2" />
<text  x="1080.58" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl::_Vector_impl (19 samples, 0.02%)</title><rect x="1058.5" y="485" width="0.3" height="15.0" fill="rgb(240,100,39)" rx="2" ry="2" />
<text  x="1061.54" y="495.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::key_comp (8 samples, 0.01%)</title><rect x="582.5" y="597" width="0.1" height="15.0" fill="rgb(247,103,30)" rx="2" ry="2" />
<text  x="585.52" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (9 samples, 0.01%)</title><rect x="470.2" y="341" width="0.2" height="15.0" fill="rgb(245,29,43)" rx="2" ry="2" />
<text  x="473.24" y="351.5" ></text>
</g>
<g >
<title>__bam_defcmp (9 samples, 0.01%)</title><rect x="159.2" y="469" width="0.1" height="15.0" fill="rgb(243,16,48)" rx="2" ry="2" />
<text  x="162.17" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (14 samples, 0.02%)</title><rect x="735.0" y="581" width="0.1" height="15.0" fill="rgb(232,122,26)" rx="2" ry="2" />
<text  x="737.95" y="591.5" ></text>
</g>
<g >
<title>CSHA256::Write (386 samples, 0.44%)</title><rect x="1113.6" y="277" width="5.2" height="15.0" fill="rgb(213,80,17)" rx="2" ry="2" />
<text  x="1116.56" y="287.5" ></text>
</g>
<g >
<title>__memp_fget (24 samples, 0.03%)</title><rect x="170.7" y="469" width="0.3" height="15.0" fill="rgb(238,0,36)" rx="2" ry="2" />
<text  x="173.66" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_M_ptr (60 samples, 0.07%)</title><rect x="982.4" y="629" width="0.8" height="15.0" fill="rgb(242,213,25)" rx="2" ry="2" />
<text  x="985.39" y="639.5" ></text>
</g>
<g >
<title>WriteBE64 (12 samples, 0.01%)</title><rect x="1054.5" y="629" width="0.2" height="15.0" fill="rgb(220,223,13)" rx="2" ry="2" />
<text  x="1057.50" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (161 samples, 0.18%)</title><rect x="960.2" y="565" width="2.2" height="15.0" fill="rgb(220,53,16)" rx="2" ry="2" />
<text  x="963.20" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::~_Vector_base (24 samples, 0.03%)</title><rect x="685.4" y="629" width="0.3" height="15.0" fill="rgb(236,41,43)" rx="2" ry="2" />
<text  x="688.38" y="639.5" ></text>
</g>
<g >
<title>CBlockIndexWorkComparator::operator (8 samples, 0.01%)</title><rect x="33.0" y="677" width="0.1" height="15.0" fill="rgb(213,205,53)" rx="2" ry="2" />
<text  x="35.99" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::_M_v (11 samples, 0.01%)</title><rect x="857.5" y="293" width="0.2" height="15.0" fill="rgb(233,170,46)" rx="2" ry="2" />
<text  x="860.52" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt; (15 samples, 0.02%)</title><rect x="986.6" y="613" width="0.2" height="15.0" fill="rgb(211,28,52)" rx="2" ry="2" />
<text  x="989.56" y="623.5" ></text>
</g>
<g >
<title>CHashWriter::write (19 samples, 0.02%)</title><rect x="536.4" y="101" width="0.3" height="15.0" fill="rgb(251,71,50)" rx="2" ry="2" />
<text  x="539.43" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="516.4" y="357" width="0.2" height="15.0" fill="rgb(218,97,1)" rx="2" ry="2" />
<text  x="519.37" y="367.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*&gt; (67 samples, 0.08%)</title><rect x="1093.4" y="581" width="0.9" height="15.0" fill="rgb(225,100,9)" rx="2" ry="2" />
<text  x="1096.38" y="591.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;uint256&amp;&gt; (1,151 samples, 1.31%)</title><rect x="635.6" y="677" width="15.6" height="15.0" fill="rgb(247,7,12)" rx="2" ry="2" />
<text  x="638.64" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (57 samples, 0.07%)</title><rect x="634.8" y="565" width="0.8" height="15.0" fill="rgb(252,23,33)" rx="2" ry="2" />
<text  x="637.80" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="615.0" y="405" width="0.1" height="15.0" fill="rgb(253,144,30)" rx="2" ry="2" />
<text  x="617.97" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::begin (10 samples, 0.01%)</title><rect x="617.5" y="533" width="0.1" height="15.0" fill="rgb(241,61,27)" rx="2" ry="2" />
<text  x="620.47" y="543.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (11 samples, 0.01%)</title><rect x="1061.5" y="645" width="0.2" height="15.0" fill="rgb(251,114,49)" rx="2" ry="2" />
<text  x="1064.53" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (8 samples, 0.01%)</title><rect x="1003.1" y="501" width="0.1" height="15.0" fill="rgb(226,36,3)" rx="2" ry="2" />
<text  x="1006.09" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::~_Vector_base (36 samples, 0.04%)</title><rect x="602.7" y="613" width="0.5" height="15.0" fill="rgb(220,18,28)" rx="2" ry="2" />
<text  x="605.71" y="623.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (12 samples, 0.01%)</title><rect x="944.0" y="453" width="0.1" height="15.0" fill="rgb(248,229,15)" rx="2" ry="2" />
<text  x="946.97" y="463.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.03%)</title><rect x="480.9" y="277" width="0.3" height="15.0" fill="rgb(245,29,40)" rx="2" ry="2" />
<text  x="483.90" y="287.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="144.2" y="437" width="0.1" height="15.0" fill="rgb(210,210,41)" rx="2" ry="2" />
<text  x="147.16" y="447.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (261 samples, 0.30%)</title><rect x="74.3" y="517" width="3.5" height="15.0" fill="rgb(225,110,39)" rx="2" ry="2" />
<text  x="77.31" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt;::_M_next (8 samples, 0.01%)</title><rect x="1088.2" y="501" width="0.1" height="15.0" fill="rgb(254,66,25)" rx="2" ry="2" />
<text  x="1091.23" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (21 samples, 0.02%)</title><rect x="462.1" y="533" width="0.3" height="15.0" fill="rgb(218,108,34)" rx="2" ry="2" />
<text  x="465.10" y="543.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (20 samples, 0.02%)</title><rect x="1144.6" y="565" width="0.2" height="15.0" fill="rgb(237,177,6)" rx="2" ry="2" />
<text  x="1147.57" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::empty (13 samples, 0.01%)</title><rect x="562.7" y="309" width="0.2" height="15.0" fill="rgb(211,173,40)" rx="2" ry="2" />
<text  x="565.71" y="319.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (361 samples, 0.41%)</title><rect x="1130.9" y="677" width="4.8" height="15.0" fill="rgb(206,31,9)" rx="2" ry="2" />
<text  x="1133.88" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (67 samples, 0.08%)</title><rect x="932.8" y="613" width="0.9" height="15.0" fill="rgb(228,202,46)" rx="2" ry="2" />
<text  x="935.78" y="623.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (817 samples, 0.93%)</title><rect x="495.9" y="341" width="11.0" height="15.0" fill="rgb(243,181,46)" rx="2" ry="2" />
<text  x="498.90" y="351.5" ></text>
</g>
<g >
<title>ShiftMessageB (24 samples, 0.03%)</title><rect x="1108.6" y="373" width="0.3" height="15.0" fill="rgb(240,212,50)" rx="2" ry="2" />
<text  x="1111.60" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="828.1" y="565" width="0.1" height="15.0" fill="rgb(250,126,54)" rx="2" ry="2" />
<text  x="831.08" y="575.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (154 samples, 0.18%)</title><rect x="869.5" y="597" width="2.0" height="15.0" fill="rgb(238,198,12)" rx="2" ry="2" />
<text  x="872.47" y="607.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (89 samples, 0.10%)</title><rect x="547.9" y="117" width="1.2" height="15.0" fill="rgb(223,202,7)" rx="2" ry="2" />
<text  x="550.86" y="127.5" ></text>
</g>
<g >
<title>CSHA256::Write (31 samples, 0.04%)</title><rect x="1053.6" y="629" width="0.4" height="15.0" fill="rgb(223,93,24)" rx="2" ry="2" />
<text  x="1056.55" y="639.5" ></text>
</g>
<g >
<title>CTransaction::ComputeHash (311 samples, 0.36%)</title><rect x="1135.8" y="565" width="4.2" height="15.0" fill="rgb(230,185,31)" rx="2" ry="2" />
<text  x="1138.80" y="575.5" ></text>
</g>
<g >
<title>__memp_fget (966 samples, 1.10%)</title><rect x="344.5" y="597" width="13.0" height="15.0" fill="rgb(209,25,10)" rx="2" ry="2" />
<text  x="347.49" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (8 samples, 0.01%)</title><rect x="1161.0" y="741" width="0.1" height="15.0" fill="rgb(211,122,44)" rx="2" ry="2" />
<text  x="1163.97" y="751.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (322 samples, 0.37%)</title><rect x="158.2" y="533" width="4.3" height="15.0" fill="rgb(211,119,44)" rx="2" ry="2" />
<text  x="161.17" y="543.5" ></text>
</g>
<g >
<title>LeaveCritical (85 samples, 0.10%)</title><rect x="984.5" y="581" width="1.2" height="15.0" fill="rgb(234,56,36)" rx="2" ry="2" />
<text  x="987.53" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::__normal_iterator (54 samples, 0.06%)</title><rect x="197.1" y="629" width="0.7" height="15.0" fill="rgb(239,142,39)" rx="2" ry="2" />
<text  x="200.10" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (86 samples, 0.10%)</title><rect x="600.4" y="629" width="1.1" height="15.0" fill="rgb(249,205,47)" rx="2" ry="2" />
<text  x="603.36" y="639.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, uint256&amp;&gt; (1,133 samples, 1.29%)</title><rect x="635.9" y="661" width="15.3" height="15.0" fill="rgb(225,14,43)" rx="2" ry="2" />
<text  x="638.89" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::lower_bound (81 samples, 0.09%)</title><rect x="582.7" y="581" width="1.1" height="15.0" fill="rgb(210,201,5)" rx="2" ry="2" />
<text  x="585.70" y="591.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (279 samples, 0.32%)</title><rect x="117.5" y="453" width="3.7" height="15.0" fill="rgb(209,84,35)" rx="2" ry="2" />
<text  x="120.46" y="463.5" ></text>
</g>
<g >
<title>__lock_put (19 samples, 0.02%)</title><rect x="154.3" y="453" width="0.3" height="15.0" fill="rgb(210,67,15)" rx="2" ry="2" />
<text  x="157.32" y="463.5" ></text>
</g>
<g >
<title>__memp_fget (35 samples, 0.04%)</title><rect x="107.9" y="389" width="0.5" height="15.0" fill="rgb(216,64,11)" rx="2" ry="2" />
<text  x="110.90" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="1038.3" y="661" width="0.2" height="15.0" fill="rgb(240,42,20)" rx="2" ry="2" />
<text  x="1041.34" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, char*&gt;, unsigned long&amp;, char*&amp;&gt; (13 samples, 0.01%)</title><rect x="674.4" y="469" width="0.2" height="15.0" fill="rgb(227,132,27)" rx="2" ry="2" />
<text  x="677.42" y="479.5" ></text>
</g>
<g >
<title>boost::detail::variant::visitation_impl&lt;mpl_::int_&lt;0&gt;, boost::detail::variant::visitation_impl_step&lt;boost::mpl::l_iter&lt;boost::mpl::l_item&lt;mpl_::long_&lt;6l&gt;, CNoDestination, boost::mpl::l_item&lt;mpl_::long_&lt;5l&gt;, PKHash, boost::mpl::l_item&lt;mpl_::long_&lt;4l&gt;, ScriptHash, boost::mpl::l_item&lt;mpl_::long_&lt;3l&gt;, WitnessV0ScriptHash, boost::mpl::l_item&lt;mpl_::long_&lt;2l&gt;, WitnessV0KeyHash, boost::mpl::l_item&lt;mpl_::long_&lt;1l&gt;, WitnessUnknown, boost::mpl::l_end&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::mpl::l_iter&lt;boost::mpl::l_end&gt; &gt;, boost::detail::variant::destroyer, void*, boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::has_fallback_type_&gt; (28 samples, 0.03%)</title><rect x="818.2" y="549" width="0.4" height="15.0" fill="rgb(216,77,51)" rx="2" ry="2" />
<text  x="821.21" y="559.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (42 samples, 0.05%)</title><rect x="703.4" y="629" width="0.6" height="15.0" fill="rgb(221,69,24)" rx="2" ry="2" />
<text  x="706.40" y="639.5" ></text>
</g>
<g >
<title>__bam_split (32 samples, 0.04%)</title><rect x="120.8" y="437" width="0.4" height="15.0" fill="rgb(225,84,23)" rx="2" ry="2" />
<text  x="123.79" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (14 samples, 0.02%)</title><rect x="987.5" y="597" width="0.2" height="15.0" fill="rgb(249,184,51)" rx="2" ry="2" />
<text  x="990.49" y="607.5" ></text>
</g>
<g >
<title>CHash160::Finalize (1,318 samples, 1.51%)</title><rect x="787.4" y="581" width="17.7" height="15.0" fill="rgb(231,21,25)" rx="2" ry="2" />
<text  x="790.39" y="591.5" ></text>
</g>
<g >
<title>CWallet::AddToSpends (2,925 samples, 3.34%)</title><rect x="895.6" y="661" width="39.4" height="15.0" fill="rgb(219,79,46)" rx="2" ry="2" />
<text  x="898.57" y="671.5" >CWa..</text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (322 samples, 0.37%)</title><rect x="551.1" y="325" width="4.4" height="15.0" fill="rgb(222,210,36)" rx="2" ry="2" />
<text  x="554.12" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (9 samples, 0.01%)</title><rect x="582.4" y="581" width="0.1" height="15.0" fill="rgb(216,222,8)" rx="2" ry="2" />
<text  x="585.40" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (19 samples, 0.02%)</title><rect x="145.1" y="405" width="0.2" height="15.0" fill="rgb(233,73,46)" rx="2" ry="2" />
<text  x="148.06" y="415.5" ></text>
</g>
<g >
<title>__bam_ca_delete (26 samples, 0.03%)</title><rect x="126.3" y="421" width="0.4" height="15.0" fill="rgb(205,62,33)" rx="2" ry="2" />
<text  x="129.34" y="431.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (28 samples, 0.03%)</title><rect x="367.8" y="533" width="0.3" height="15.0" fill="rgb(243,53,38)" rx="2" ry="2" />
<text  x="370.77" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_S_max_size (30 samples, 0.03%)</title><rect x="493.8" y="309" width="0.4" height="15.0" fill="rgb(214,52,30)" rx="2" ry="2" />
<text  x="496.75" y="319.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.05%)</title><rect x="146.4" y="373" width="0.6" height="15.0" fill="rgb(222,139,20)" rx="2" ry="2" />
<text  x="149.43" y="383.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction (595 samples, 0.68%)</title><rect x="1135.8" y="581" width="8.0" height="15.0" fill="rgb(236,118,25)" rx="2" ry="2" />
<text  x="1138.80" y="591.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (13 samples, 0.01%)</title><rect x="57.0" y="469" width="0.2" height="15.0" fill="rgb(231,205,28)" rx="2" ry="2" />
<text  x="60.05" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (39 samples, 0.04%)</title><rect x="857.4" y="341" width="0.5" height="15.0" fill="rgb(254,186,53)" rx="2" ry="2" />
<text  x="860.35" y="351.5" ></text>
</g>
<g >
<title>__db_tas_mutex_trylock (20 samples, 0.02%)</title><rect x="175.9" y="549" width="0.3" height="15.0" fill="rgb(222,167,40)" rx="2" ry="2" />
<text  x="178.95" y="559.5" ></text>
</g>
<g >
<title>LockedPoolManager::Instance (18 samples, 0.02%)</title><rect x="863.8" y="421" width="0.3" height="15.0" fill="rgb(238,194,50)" rx="2" ry="2" />
<text  x="866.85" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::operator[] (377 samples, 0.43%)</title><rect x="1081.8" y="565" width="5.1" height="15.0" fill="rgb(240,138,3)" rx="2" ry="2" />
<text  x="1084.77" y="575.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (8 samples, 0.01%)</title><rect x="942.6" y="517" width="0.1" height="15.0" fill="rgb(241,147,42)" rx="2" ry="2" />
<text  x="945.56" y="527.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (8 samples, 0.01%)</title><rect x="586.3" y="629" width="0.1" height="15.0" fill="rgb(211,156,21)" rx="2" ry="2" />
<text  x="589.32" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, char* const&amp;&gt;::_Tuple_impl (17 samples, 0.02%)</title><rect x="1084.3" y="469" width="0.2" height="15.0" fill="rgb(225,131,2)" rx="2" ry="2" />
<text  x="1087.27" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="168.1" y="469" width="0.2" height="15.0" fill="rgb(228,210,32)" rx="2" ry="2" />
<text  x="171.14" y="479.5" ></text>
</g>
<g >
<title>CHash256::Write (12 samples, 0.01%)</title><rect x="549.4" y="165" width="0.2" height="15.0" fill="rgb(224,214,34)" rx="2" ry="2" />
<text  x="552.44" y="175.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="501" width="3.8" height="15.0" fill="rgb(234,46,31)" rx="2" ry="2" />
<text  x="1142.99" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (26 samples, 0.03%)</title><rect x="561.3" y="309" width="0.4" height="15.0" fill="rgb(222,99,25)" rx="2" ry="2" />
<text  x="564.31" y="319.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.04%)</title><rect x="508.7" y="277" width="0.4" height="15.0" fill="rgb(222,100,51)" rx="2" ry="2" />
<text  x="511.73" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="56.3" y="533" width="0.2" height="15.0" fill="rgb(225,169,33)" rx="2" ry="2" />
<text  x="59.30" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_S_key (15 samples, 0.02%)</title><rect x="52.1" y="629" width="0.2" height="15.0" fill="rgb(234,42,54)" rx="2" ry="2" />
<text  x="55.13" y="639.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (31 samples, 0.04%)</title><rect x="554.1" y="213" width="0.5" height="15.0" fill="rgb(227,29,47)" rx="2" ry="2" />
<text  x="557.14" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::cbegin (10 samples, 0.01%)</title><rect x="1100.4" y="661" width="0.1" height="15.0" fill="rgb(213,32,38)" rx="2" ry="2" />
<text  x="1103.38" y="671.5" ></text>
</g>
<g >
<title>__lock_put (19 samples, 0.02%)</title><rect x="70.1" y="485" width="0.2" height="15.0" fill="rgb(208,156,43)" rx="2" ry="2" />
<text  x="73.09" y="495.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (18 samples, 0.02%)</title><rect x="487.6" y="165" width="0.2" height="15.0" fill="rgb(228,222,24)" rx="2" ry="2" />
<text  x="490.58" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="921.7" y="517" width="0.1" height="15.0" fill="rgb(222,67,24)" rx="2" ry="2" />
<text  x="924.70" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (36 samples, 0.04%)</title><rect x="898.7" y="581" width="0.5" height="15.0" fill="rgb(237,69,32)" rx="2" ry="2" />
<text  x="901.67" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (19 samples, 0.02%)</title><rect x="837.3" y="597" width="0.3" height="15.0" fill="rgb(219,25,40)" rx="2" ry="2" />
<text  x="840.30" y="607.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, int&amp;&gt; (23 samples, 0.03%)</title><rect x="402.5" y="597" width="0.3" height="15.0" fill="rgb(235,211,19)" rx="2" ry="2" />
<text  x="405.48" y="607.5" ></text>
</g>
<g >
<title>__db_cursor (38 samples, 0.04%)</title><rect x="88.7" y="485" width="0.5" height="15.0" fill="rgb(237,226,4)" rx="2" ry="2" />
<text  x="91.66" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, uint256 const, CWalletTx&gt; (14 samples, 0.02%)</title><rect x="1003.6" y="597" width="0.2" height="15.0" fill="rgb(238,181,26)" rx="2" ry="2" />
<text  x="1006.62" y="607.5" ></text>
</g>
<g >
<title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="389" width="4.2" height="15.0" fill="rgb(215,127,6)" rx="2" ry="2" />
<text  x="1138.80" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_Vector_base (9 samples, 0.01%)</title><rect x="685.1" y="629" width="0.1" height="15.0" fill="rgb(216,72,11)" rx="2" ry="2" />
<text  x="688.12" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;CKeyID const, CKey&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,756 samples, 2.01%)</title><rect x="845.1" y="581" width="23.6" height="15.0" fill="rgb(249,78,37)" rx="2" ry="2" />
<text  x="848.06" y="591.5" >s..</text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (92 samples, 0.11%)</title><rect x="536.3" y="133" width="1.2" height="15.0" fill="rgb(251,152,26)" rx="2" ry="2" />
<text  x="539.27" y="143.5" ></text>
</g>
<g >
<title>std::map&lt;CKeyID, long, std::less&lt;CKeyID&gt;, std::allocator&lt;std::pair&lt;CKeyID const, long&gt; &gt; &gt;::lower_bound (8 samples, 0.01%)</title><rect x="894.1" y="645" width="0.2" height="15.0" fill="rgb(251,129,17)" rx="2" ry="2" />
<text  x="897.14" y="655.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, CScript&amp;&gt; (266 samples, 0.30%)</title><rect x="475.4" y="293" width="3.5" height="15.0" fill="rgb(234,161,38)" rx="2" ry="2" />
<text  x="478.36" y="303.5" ></text>
</g>
<g >
<title>CHash256::Write (14 samples, 0.02%)</title><rect x="536.9" y="53" width="0.2" height="15.0" fill="rgb(219,176,4)" rx="2" ry="2" />
<text  x="539.89" y="63.5" ></text>
</g>
<g >
<title>ShiftMessageB (9 samples, 0.01%)</title><rect x="1121.6" y="597" width="0.1" height="15.0" fill="rgb(242,107,17)" rx="2" ry="2" />
<text  x="1124.57" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (9 samples, 0.01%)</title><rect x="478.6" y="133" width="0.1" height="15.0" fill="rgb(209,127,40)" rx="2" ry="2" />
<text  x="481.57" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (12 samples, 0.01%)</title><rect x="1161.7" y="741" width="0.2" height="15.0" fill="rgb(231,124,3)" rx="2" ry="2" />
<text  x="1164.73" y="751.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (10 samples, 0.01%)</title><rect x="477.6" y="133" width="0.1" height="15.0" fill="rgb(205,99,33)" rx="2" ry="2" />
<text  x="480.56" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (1,047 samples, 1.20%)</title><rect x="636.8" y="597" width="14.1" height="15.0" fill="rgb(251,152,33)" rx="2" ry="2" />
<text  x="639.82" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::begin (12 samples, 0.01%)</title><rect x="955.4" y="613" width="0.1" height="15.0" fill="rgb(225,107,29)" rx="2" ry="2" />
<text  x="958.38" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (36 samples, 0.04%)</title><rect x="682.8" y="501" width="0.4" height="15.0" fill="rgb(230,6,22)" rx="2" ry="2" />
<text  x="685.76" y="511.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (178 samples, 0.20%)</title><rect x="70.6" y="517" width="2.4" height="15.0" fill="rgb(212,187,21)" rx="2" ry="2" />
<text  x="73.60" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::begin (8 samples, 0.01%)</title><rect x="539.7" y="293" width="0.1" height="15.0" fill="rgb(235,118,1)" rx="2" ry="2" />
<text  x="542.71" y="303.5" ></text>
</g>
<g >
<title>__memp_fget (34 samples, 0.04%)</title><rect x="149.8" y="453" width="0.4" height="15.0" fill="rgb(224,177,20)" rx="2" ry="2" />
<text  x="152.76" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::_S_destroy&lt;secure_allocator&lt;unsigned char&gt;, unsigned char&gt; (268 samples, 0.31%)</title><rect x="1073.9" y="629" width="3.6" height="15.0" fill="rgb(225,51,2)" rx="2" ry="2" />
<text  x="1076.86" y="639.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;unsigned char*, unsigned char*, secure_allocator&lt;unsigned char&gt; &gt; (11 samples, 0.01%)</title><rect x="867.1" y="437" width="0.2" height="15.0" fill="rgb(221,67,22)" rx="2" ry="2" />
<text  x="870.11" y="447.5" ></text>
</g>
<g >
<title>COutPoint::COutPoint (19 samples, 0.02%)</title><rect x="469.0" y="357" width="0.3" height="15.0" fill="rgb(223,148,39)" rx="2" ry="2" />
<text  x="472.03" y="367.5" ></text>
</g>
<g >
<title>GetSerializeSize&lt;CTransaction&gt; (1,038 samples, 1.19%)</title><rect x="1023.2" y="661" width="14.0" height="15.0" fill="rgb(240,76,10)" rx="2" ry="2" />
<text  x="1026.21" y="671.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (15 samples, 0.02%)</title><rect x="683.6" y="565" width="0.2" height="15.0" fill="rgb(247,58,41)" rx="2" ry="2" />
<text  x="686.61" y="575.5" ></text>
</g>
<g >
<title>__db_verify_internal (9,097 samples, 10.39%)</title><rect x="57.8" y="613" width="122.6" height="15.0" fill="rgb(251,216,27)" rx="2" ry="2" />
<text  x="60.80" y="623.5" >__db_verify_int..</text>
</g>
<g >
<title>__memp_fget (31 samples, 0.04%)</title><rect x="102.7" y="389" width="0.4" height="15.0" fill="rgb(254,54,16)" rx="2" ry="2" />
<text  x="105.72" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, false, true&gt;::operator (13 samples, 0.01%)</title><rect x="893.2" y="629" width="0.1" height="15.0" fill="rgb(247,158,49)" rx="2" ry="2" />
<text  x="896.16" y="639.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, CBlockIndex*&gt;*, std::vector&lt;std::pair&lt;int, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;int, CBlockIndex*&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (19 samples, 0.02%)</title><rect x="52.6" y="645" width="0.3" height="15.0" fill="rgb(219,194,21)" rx="2" ry="2" />
<text  x="55.64" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (13 samples, 0.01%)</title><rect x="573.4" y="581" width="0.2" height="15.0" fill="rgb(214,62,50)" rx="2" ry="2" />
<text  x="576.38" y="591.5" ></text>
</g>
<g >
<title>__db_cursor (25 samples, 0.03%)</title><rect x="147.7" y="533" width="0.3" height="15.0" fill="rgb(219,209,19)" rx="2" ry="2" />
<text  x="150.69" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (15 samples, 0.02%)</title><rect x="661.2" y="501" width="0.2" height="15.0" fill="rgb(213,161,6)" rx="2" ry="2" />
<text  x="664.20" y="511.5" ></text>
</g>
<g >
<title>__db_lget (9 samples, 0.01%)</title><rect x="163.9" y="469" width="0.1" height="15.0" fill="rgb(247,185,25)" rx="2" ry="2" />
<text  x="166.91" y="479.5" ></text>
</g>
<g >
<title>leveldb::port::AcceleratedCRC32C (11 samples, 0.01%)</title><rect x="45.4" y="437" width="0.2" height="15.0" fill="rgb(254,220,27)" rx="2" ry="2" />
<text  x="48.40" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (15 samples, 0.02%)</title><rect x="88.1" y="437" width="0.2" height="15.0" fill="rgb(220,19,10)" rx="2" ry="2" />
<text  x="91.07" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (8 samples, 0.01%)</title><rect x="659.9" y="501" width="0.1" height="15.0" fill="rgb(219,203,20)" rx="2" ry="2" />
<text  x="662.94" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (20 samples, 0.02%)</title><rect x="544.5" y="277" width="0.3" height="15.0" fill="rgb(220,223,38)" rx="2" ry="2" />
<text  x="547.51" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (43 samples, 0.05%)</title><rect x="677.4" y="501" width="0.5" height="15.0" fill="rgb(243,12,24)" rx="2" ry="2" />
<text  x="680.35" y="511.5" ></text>
</g>
<g >
<title>CHash256::Write (21 samples, 0.02%)</title><rect x="549.9" y="245" width="0.3" height="15.0" fill="rgb(236,61,49)" rx="2" ry="2" />
<text  x="552.92" y="255.5" ></text>
</g>
<g >
<title>LeaveCritical (47 samples, 0.05%)</title><rect x="835.8" y="613" width="0.6" height="15.0" fill="rgb(233,31,37)" rx="2" ry="2" />
<text  x="838.78" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (60 samples, 0.07%)</title><rect x="962.4" y="597" width="0.8" height="15.0" fill="rgb(214,125,49)" rx="2" ry="2" />
<text  x="965.37" y="607.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (15 samples, 0.02%)</title><rect x="543.7" y="309" width="0.2" height="15.0" fill="rgb(227,59,44)" rx="2" ry="2" />
<text  x="546.66" y="319.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (78 samples, 0.09%)</title><rect x="598.3" y="565" width="1.1" height="15.0" fill="rgb(241,13,15)" rx="2" ry="2" />
<text  x="601.32" y="575.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::base_uint (9 samples, 0.01%)</title><rect x="32.5" y="645" width="0.1" height="15.0" fill="rgb(243,35,32)" rx="2" ry="2" />
<text  x="35.46" y="655.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (29 samples, 0.03%)</title><rect x="549.8" y="277" width="0.4" height="15.0" fill="rgb(240,152,30)" rx="2" ry="2" />
<text  x="552.81" y="287.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (83 samples, 0.09%)</title><rect x="1129.4" y="629" width="1.1" height="15.0" fill="rgb(254,133,3)" rx="2" ry="2" />
<text  x="1132.38" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (48 samples, 0.05%)</title><rect x="30.6" y="597" width="0.7" height="15.0" fill="rgb(211,180,9)" rx="2" ry="2" />
<text  x="33.61" y="607.5" ></text>
</g>
<g >
<title>std::advance&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned long&gt; (10 samples, 0.01%)</title><rect x="1094.6" y="629" width="0.2" height="15.0" fill="rgb(214,105,31)" rx="2" ry="2" />
<text  x="1097.64" y="639.5" ></text>
</g>
<g >
<title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (181 samples, 0.21%)</title><rect x="552.1" y="261" width="2.5" height="15.0" fill="rgb(247,56,16)" rx="2" ry="2" />
<text  x="555.15" y="271.5" ></text>
</g>
<g >
<title>CKeyMetadata::SetNull (21 samples, 0.02%)</title><rect x="892.2" y="533" width="0.2" height="15.0" fill="rgb(222,29,15)" rx="2" ry="2" />
<text  x="895.16" y="543.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (391 samples, 0.45%)</title><rect x="1113.6" y="453" width="5.2" height="15.0" fill="rgb(220,80,13)" rx="2" ry="2" />
<text  x="1116.56" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator+ (8 samples, 0.01%)</title><rect x="1092.4" y="661" width="0.1" height="15.0" fill="rgb(238,178,19)" rx="2" ry="2" />
<text  x="1095.39" y="671.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (28 samples, 0.03%)</title><rect x="533.0" y="197" width="0.3" height="15.0" fill="rgb(247,7,54)" rx="2" ry="2" />
<text  x="535.97" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (9 samples, 0.01%)</title><rect x="585.0" y="613" width="0.1" height="15.0" fill="rgb(236,44,22)" rx="2" ry="2" />
<text  x="588.00" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (8 samples, 0.01%)</title><rect x="587.8" y="581" width="0.1" height="15.0" fill="rgb(231,216,50)" rx="2" ry="2" />
<text  x="590.82" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (10 samples, 0.01%)</title><rect x="586.8" y="597" width="0.2" height="15.0" fill="rgb(210,105,13)" rx="2" ry="2" />
<text  x="589.82" y="607.5" ></text>
</g>
<g >
<title>CDataStream::read (10 samples, 0.01%)</title><rect x="486.1" y="325" width="0.1" height="15.0" fill="rgb(245,207,10)" rx="2" ry="2" />
<text  x="489.09" y="335.5" ></text>
</g>
<g >
<title>__lock_get (76 samples, 0.09%)</title><rect x="108.4" y="389" width="1.1" height="15.0" fill="rgb(224,173,0)" rx="2" ry="2" />
<text  x="111.44" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::lower_bound (58 samples, 0.07%)</title><rect x="600.7" y="597" width="0.8" height="15.0" fill="rgb(230,61,24)" rx="2" ry="2" />
<text  x="603.71" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, unsigned int&gt; (28 samples, 0.03%)</title><rect x="1028.8" y="389" width="0.4" height="15.0" fill="rgb(243,86,13)" rx="2" ry="2" />
<text  x="1031.78" y="399.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.01%)</title><rect x="456.2" y="469" width="0.1" height="15.0" fill="rgb(247,137,54)" rx="2" ry="2" />
<text  x="459.18" y="479.5" ></text>
</g>
<g >
<title>CDataStream::CDataStream (15 samples, 0.02%)</title><rect x="13.8" y="757" width="0.2" height="15.0" fill="rgb(244,32,5)" rx="2" ry="2" />
<text  x="16.81" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (363 samples, 0.41%)</title><rect x="404.3" y="613" width="4.9" height="15.0" fill="rgb(230,203,50)" rx="2" ry="2" />
<text  x="407.31" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (36 samples, 0.04%)</title><rect x="1089.8" y="485" width="0.5" height="15.0" fill="rgb(212,39,14)" rx="2" ry="2" />
<text  x="1092.79" y="495.5" ></text>
</g>
<g >
<title>std::__addressof&lt;unsigned char&gt; (23 samples, 0.03%)</title><rect x="864.5" y="453" width="0.3" height="15.0" fill="rgb(248,153,45)" rx="2" ry="2" />
<text  x="867.52" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (37 samples, 0.04%)</title><rect x="614.6" y="453" width="0.5" height="15.0" fill="rgb(217,15,5)" rx="2" ry="2" />
<text  x="617.64" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (16 samples, 0.02%)</title><rect x="45.4" y="533" width="0.2" height="15.0" fill="rgb(219,194,21)" rx="2" ry="2" />
<text  x="48.36" y="543.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;unsigned int*, unsigned int*, std::allocator&lt;unsigned int&gt; &gt; (13 samples, 0.01%)</title><rect x="397.9" y="405" width="0.2" height="15.0" fill="rgb(248,216,21)" rx="2" ry="2" />
<text  x="400.90" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::lower_bound (50 samples, 0.06%)</title><rect x="654.8" y="533" width="0.6" height="15.0" fill="rgb(229,113,54)" rx="2" ry="2" />
<text  x="657.77" y="543.5" ></text>
</g>
<g >
<title>_int_free (14 samples, 0.02%)</title><rect x="59.3" y="549" width="0.2" height="15.0" fill="rgb(246,61,44)" rx="2" ry="2" />
<text  x="62.35" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::operator[] (10 samples, 0.01%)</title><rect x="507.1" y="357" width="0.2" height="15.0" fill="rgb(220,227,40)" rx="2" ry="2" />
<text  x="510.14" y="367.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="581" width="13.8" height="15.0" fill="rgb(241,69,5)" rx="2" ry="2" />
<text  x="1107.95" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="122.1" y="389" width="0.1" height="15.0" fill="rgb(241,18,1)" rx="2" ry="2" />
<text  x="125.08" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;void*&amp;&gt; (11 samples, 0.01%)</title><rect x="941.1" y="517" width="0.2" height="15.0" fill="rgb(247,17,1)" rx="2" ry="2" />
<text  x="944.11" y="527.5" ></text>
</g>
<g >
<title>LeaveCritical (10 samples, 0.01%)</title><rect x="882.0" y="629" width="0.1" height="15.0" fill="rgb(211,59,8)" rx="2" ry="2" />
<text  x="885.00" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::resize (489 samples, 0.56%)</title><rect x="507.3" y="357" width="6.6" height="15.0" fill="rgb(235,205,18)" rx="2" ry="2" />
<text  x="510.27" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::cend (22 samples, 0.03%)</title><rect x="930.5" y="581" width="0.3" height="15.0" fill="rgb(215,124,49)" rx="2" ry="2" />
<text  x="933.53" y="591.5" ></text>
</g>
<g >
<title>arith_uint256::arith_uint256 (10 samples, 0.01%)</title><rect x="32.5" y="661" width="0.1" height="15.0" fill="rgb(207,179,11)" rx="2" ry="2" />
<text  x="35.45" y="671.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt;*&gt;::pointer_to (12 samples, 0.01%)</title><rect x="1088.7" y="469" width="0.1" height="15.0" fill="rgb(250,36,23)" rx="2" ry="2" />
<text  x="1091.67" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (46 samples, 0.05%)</title><rect x="590.3" y="549" width="0.6" height="15.0" fill="rgb(221,153,4)" rx="2" ry="2" />
<text  x="593.32" y="559.5" ></text>
</g>
<g >
<title>StartWallets (350 samples, 0.40%)</title><rect x="33.5" y="693" width="4.7" height="15.0" fill="rgb(227,127,20)" rx="2" ry="2" />
<text  x="36.52" y="703.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_lock (13 samples, 0.01%)</title><rect x="734.3" y="581" width="0.2" height="15.0" fill="rgb(237,41,27)" rx="2" ry="2" />
<text  x="737.32" y="591.5" ></text>
</g>
<g >
<title>__db_get (55 samples, 0.06%)</title><rect x="103.2" y="469" width="0.7" height="15.0" fill="rgb(220,72,10)" rx="2" ry="2" />
<text  x="106.19" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::begin (10 samples, 0.01%)</title><rect x="1040.7" y="613" width="0.1" height="15.0" fill="rgb(217,93,12)" rx="2" ry="2" />
<text  x="1043.67" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (328 samples, 0.37%)</title><rect x="180.9" y="661" width="4.5" height="15.0" fill="rgb(246,159,35)" rx="2" ry="2" />
<text  x="183.93" y="671.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (145 samples, 0.17%)</title><rect x="547.3" y="245" width="1.9" height="15.0" fill="rgb(236,131,5)" rx="2" ry="2" />
<text  x="550.27" y="255.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (14 samples, 0.02%)</title><rect x="828.8" y="549" width="0.2" height="15.0" fill="rgb(229,84,32)" rx="2" ry="2" />
<text  x="831.84" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::operator[] (19 samples, 0.02%)</title><rect x="42.7" y="629" width="0.3" height="15.0" fill="rgb(232,108,5)" rx="2" ry="2" />
<text  x="45.72" y="639.5" ></text>
</g>
<g >
<title>CBlockIndex::BuildSkip (8 samples, 0.01%)</title><rect x="38.4" y="677" width="0.1" height="15.0" fill="rgb(244,47,34)" rx="2" ry="2" />
<text  x="41.43" y="687.5" ></text>
</g>
<g >
<title>std::mutex::unlock (14 samples, 0.02%)</title><rect x="664.2" y="549" width="0.2" height="15.0" fill="rgb(218,121,35)" rx="2" ry="2" />
<text  x="667.17" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.01%)</title><rect x="1081.4" y="517" width="0.2" height="15.0" fill="rgb(224,114,43)" rx="2" ry="2" />
<text  x="1084.41" y="527.5" ></text>
</g>
<g >
<title>CHashWriter::write (21 samples, 0.02%)</title><rect x="46.8" y="485" width="0.3" height="15.0" fill="rgb(230,25,54)" rx="2" ry="2" />
<text  x="49.82" y="495.5" ></text>
</g>
<g >
<title>CChainState::CheckBlockIndex (10 samples, 0.01%)</title><rect x="33.3" y="677" width="0.2" height="15.0" fill="rgb(206,143,41)" rx="2" ry="2" />
<text  x="36.34" y="687.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned char const*&gt; (13 samples, 0.01%)</title><rect x="1099.6" y="597" width="0.1" height="15.0" fill="rgb(222,137,19)" rx="2" ry="2" />
<text  x="1102.56" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (36 samples, 0.04%)</title><rect x="857.4" y="325" width="0.5" height="15.0" fill="rgb(229,7,11)" rx="2" ry="2" />
<text  x="860.39" y="335.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::Enter (932 samples, 1.06%)</title><rect x="869.3" y="629" width="12.5" height="15.0" fill="rgb(232,220,54)" rx="2" ry="2" />
<text  x="872.27" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt;::_M_next (8 samples, 0.01%)</title><rect x="860.8" y="293" width="0.2" height="15.0" fill="rgb(214,112,39)" rx="2" ry="2" />
<text  x="863.84" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (10 samples, 0.01%)</title><rect x="43.0" y="629" width="0.1" height="15.0" fill="rgb(243,72,39)" rx="2" ry="2" />
<text  x="45.98" y="639.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&gt; (35 samples, 0.04%)</title><rect x="509.8" y="277" width="0.4" height="15.0" fill="rgb(237,13,40)" rx="2" ry="2" />
<text  x="512.78" y="287.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;int&gt; (75 samples, 0.09%)</title><rect x="523.6" y="341" width="1.0" height="15.0" fill="rgb(249,13,41)" rx="2" ry="2" />
<text  x="526.58" y="351.5" ></text>
</g>
<g >
<title>__memp_fput (34 samples, 0.04%)</title><rect x="125.7" y="405" width="0.5" height="15.0" fill="rgb(208,192,15)" rx="2" ry="2" />
<text  x="128.69" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_v (12 samples, 0.01%)</title><rect x="923.8" y="549" width="0.1" height="15.0" fill="rgb(207,97,47)" rx="2" ry="2" />
<text  x="926.78" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (88 samples, 0.10%)</title><rect x="580.1" y="581" width="1.2" height="15.0" fill="rgb(213,90,15)" rx="2" ry="2" />
<text  x="583.08" y="591.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (9 samples, 0.01%)</title><rect x="1127.4" y="629" width="0.2" height="15.0" fill="rgb(246,73,38)" rx="2" ry="2" />
<text  x="1130.43" y="639.5" ></text>
</g>
<g >
<title>QuadRound (235 samples, 0.27%)</title><rect x="1105.4" y="373" width="3.2" height="15.0" fill="rgb(243,97,49)" rx="2" ry="2" />
<text  x="1108.42" y="383.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="27.0" y="757" width="0.2" height="15.0" fill="rgb(249,61,52)" rx="2" ry="2" />
<text  x="30.01" y="767.5" ></text>
</g>
<g >
<title>__bam_search (661 samples, 0.75%)</title><rect x="138.6" y="485" width="8.9" height="15.0" fill="rgb(220,115,44)" rx="2" ry="2" />
<text  x="141.62" y="495.5" ></text>
</g>
<g >
<title>__dbc_cleanup (36 samples, 0.04%)</title><rect x="87.8" y="469" width="0.5" height="15.0" fill="rgb(216,20,12)" rx="2" ry="2" />
<text  x="90.81" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (23 samples, 0.03%)</title><rect x="681.4" y="485" width="0.3" height="15.0" fill="rgb(252,36,28)" rx="2" ry="2" />
<text  x="684.42" y="495.5" ></text>
</g>
<g >
<title>EnterCritical (882 samples, 1.01%)</title><rect x="869.3" y="613" width="11.9" height="15.0" fill="rgb(206,195,43)" rx="2" ry="2" />
<text  x="872.35" y="623.5" ></text>
</g>
<g >
<title>BerkeleyEnvironment::~BerkeleyEnvironment (11 samples, 0.01%)</title><rect x="180.8" y="517" width="0.1" height="15.0" fill="rgb(207,218,4)" rx="2" ry="2" />
<text  x="183.78" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;COutPoint&gt;::_Rb_tree_const_iterator (13 samples, 0.01%)</title><rect x="909.2" y="597" width="0.2" height="15.0" fill="rgb(239,5,12)" rx="2" ry="2" />
<text  x="912.21" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (25 samples, 0.03%)</title><rect x="110.5" y="389" width="0.4" height="15.0" fill="rgb(227,209,47)" rx="2" ry="2" />
<text  x="113.53" y="399.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (84 samples, 0.10%)</title><rect x="999.0" y="533" width="1.2" height="15.0" fill="rgb(222,118,1)" rx="2" ry="2" />
<text  x="1002.03" y="543.5" ></text>
</g>
<g >
<title>__dbc_close (663 samples, 0.76%)</title><rect x="363.2" y="613" width="8.9" height="15.0" fill="rgb(222,94,45)" rx="2" ry="2" />
<text  x="366.16" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (41 samples, 0.05%)</title><rect x="820.7" y="549" width="0.6" height="15.0" fill="rgb(230,4,40)" rx="2" ry="2" />
<text  x="823.73" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (208 samples, 0.24%)</title><rect x="113.6" y="437" width="2.8" height="15.0" fill="rgb(242,59,26)" rx="2" ry="2" />
<text  x="116.60" y="447.5" ></text>
</g>
<g >
<title>__libc_pwrite64 (41 samples, 0.05%)</title><rect x="178.9" y="501" width="0.5" height="15.0" fill="rgb(244,42,22)" rx="2" ry="2" />
<text  x="181.90" y="511.5" ></text>
</g>
<g >
<title>CHash256::Write (8 samples, 0.01%)</title><rect x="554.7" y="245" width="0.1" height="15.0" fill="rgb(230,76,19)" rx="2" ry="2" />
<text  x="557.73" y="255.5" ></text>
</g>
<g >
<title>__bam_get_root (32 samples, 0.04%)</title><rect x="114.4" y="405" width="0.4" height="15.0" fill="rgb(213,83,48)" rx="2" ry="2" />
<text  x="117.37" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_M_deleter (16 samples, 0.02%)</title><rect x="986.6" y="629" width="0.2" height="15.0" fill="rgb(236,218,30)" rx="2" ry="2" />
<text  x="989.55" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="1089.3" y="533" width="0.2" height="15.0" fill="rgb(231,40,54)" rx="2" ry="2" />
<text  x="1092.31" y="543.5" ></text>
</g>
<g >
<title>KeyOriginInfo::Unserialize&lt;CDataStream&gt; (247 samples, 0.28%)</title><rect x="395.5" y="565" width="3.4" height="15.0" fill="rgb(242,54,33)" rx="2" ry="2" />
<text  x="398.53" y="575.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (117 samples, 0.13%)</title><rect x="547.6" y="197" width="1.6" height="15.0" fill="rgb(254,166,1)" rx="2" ry="2" />
<text  x="550.60" y="207.5" ></text>
</g>
<g >
<title>local_Rb_tree_increment (18 samples, 0.02%)</title><rect x="593.7" y="549" width="0.2" height="15.0" fill="rgb(206,112,30)" rx="2" ry="2" />
<text  x="596.69" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::allocate (14 samples, 0.02%)</title><rect x="1079.8" y="501" width="0.2" height="15.0" fill="rgb(214,107,9)" rx="2" ry="2" />
<text  x="1082.78" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::clear (20 samples, 0.02%)</title><rect x="907.5" y="581" width="0.3" height="15.0" fill="rgb(228,73,19)" rx="2" ry="2" />
<text  x="910.50" y="591.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::variant&lt;WitnessV0KeyHash&gt; (40 samples, 0.05%)</title><rect x="817.3" y="613" width="0.5" height="15.0" fill="rgb(243,175,14)" rx="2" ry="2" />
<text  x="820.28" y="623.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (13 samples, 0.01%)</title><rect x="505.0" y="245" width="0.1" height="15.0" fill="rgb(244,124,12)" rx="2" ry="2" />
<text  x="507.95" y="255.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (25 samples, 0.03%)</title><rect x="89.9" y="405" width="0.4" height="15.0" fill="rgb(226,224,54)" rx="2" ry="2" />
<text  x="92.91" y="415.5" ></text>
</g>
<g >
<title>__bam_ca_delete (26 samples, 0.03%)</title><rect x="172.4" y="501" width="0.4" height="15.0" fill="rgb(231,213,53)" rx="2" ry="2" />
<text  x="175.44" y="511.5" ></text>
</g>
<g >
<title>__subvdi3 (8 samples, 0.01%)</title><rect x="42.6" y="597" width="0.1" height="15.0" fill="rgb(252,224,19)" rx="2" ry="2" />
<text  x="45.56" y="607.5" ></text>
</g>
<g >
<title>LockedPool::alloc (928 samples, 1.06%)</title><rect x="651.9" y="581" width="12.5" height="15.0" fill="rgb(240,84,22)" rx="2" ry="2" />
<text  x="654.87" y="591.5" ></text>
</g>
<g >
<title>ChainActive (8 samples, 0.01%)</title><rect x="34.7" y="597" width="0.1" height="15.0" fill="rgb(221,111,31)" rx="2" ry="2" />
<text  x="37.73" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (29 samples, 0.03%)</title><rect x="591.9" y="581" width="0.4" height="15.0" fill="rgb(251,8,49)" rx="2" ry="2" />
<text  x="594.86" y="591.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CPubKey&amp;&gt; (444 samples, 0.51%)</title><rect x="403.8" y="677" width="6.0" height="15.0" fill="rgb(243,141,33)" rx="2" ry="2" />
<text  x="406.80" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;uint256 const, CWalletTx&gt;::pair&lt;uint256&amp;, CWalletTx&amp;, true&gt; (373 samples, 0.43%)</title><rect x="998.3" y="565" width="5.1" height="15.0" fill="rgb(228,152,15)" rx="2" ry="2" />
<text  x="1001.33" y="575.5" ></text>
</g>
<g >
<title>__bamc_refresh (64 samples, 0.07%)</title><rect x="378.7" y="597" width="0.9" height="15.0" fill="rgb(210,52,10)" rx="2" ry="2" />
<text  x="381.75" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_deallocate (14 samples, 0.02%)</title><rect x="685.4" y="613" width="0.2" height="15.0" fill="rgb(248,127,38)" rx="2" ry="2" />
<text  x="688.44" y="623.5" ></text>
</g>
<g >
<title>__dbc_cleanup (12 samples, 0.01%)</title><rect x="77.8" y="517" width="0.2" height="15.0" fill="rgb(253,190,26)" rx="2" ry="2" />
<text  x="80.83" y="527.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CPubKey&amp;&gt; (425 samples, 0.49%)</title><rect x="404.1" y="661" width="5.7" height="15.0" fill="rgb(208,186,44)" rx="2" ry="2" />
<text  x="407.06" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*, unsigned char&gt; (19 samples, 0.02%)</title><rect x="514.7" y="357" width="0.2" height="15.0" fill="rgb(211,42,6)" rx="2" ry="2" />
<text  x="517.68" y="367.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="1146.4" y="693" width="0.2" height="15.0" fill="rgb(232,34,33)" rx="2" ry="2" />
<text  x="1149.42" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (25 samples, 0.03%)</title><rect x="1003.5" y="613" width="0.3" height="15.0" fill="rgb(233,91,38)" rx="2" ry="2" />
<text  x="1006.48" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_Tp_allocator (9 samples, 0.01%)</title><rect x="1001.5" y="517" width="0.1" height="15.0" fill="rgb(206,157,53)" rx="2" ry="2" />
<text  x="1004.48" y="527.5" ></text>
</g>
<g >
<title>CScriptID::CScriptID (137 samples, 0.16%)</title><rect x="1125.6" y="661" width="1.8" height="15.0" fill="rgb(233,120,9)" rx="2" ry="2" />
<text  x="1128.58" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (11 samples, 0.01%)</title><rect x="1100.9" y="629" width="0.2" height="15.0" fill="rgb(218,28,42)" rx="2" ry="2" />
<text  x="1103.92" y="639.5" ></text>
</g>
<g >
<title>LockedPool::free (1,002 samples, 1.14%)</title><rect x="1077.8" y="597" width="13.5" height="15.0" fill="rgb(246,170,43)" rx="2" ry="2" />
<text  x="1080.84" y="607.5" ></text>
</g>
<g >
<title>__db_cursor_int (17 samples, 0.02%)</title><rect x="157.4" y="533" width="0.2" height="15.0" fill="rgb(233,103,27)" rx="2" ry="2" />
<text  x="160.40" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::~_Vector_impl (13 samples, 0.01%)</title><rect x="471.3" y="309" width="0.1" height="15.0" fill="rgb(205,90,40)" rx="2" ry="2" />
<text  x="474.26" y="319.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (85 samples, 0.10%)</title><rect x="447.0" y="565" width="1.2" height="15.0" fill="rgb(241,222,18)" rx="2" ry="2" />
<text  x="450.01" y="575.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (25 samples, 0.03%)</title><rect x="356.6" y="549" width="0.3" height="15.0" fill="rgb(215,125,5)" rx="2" ry="2" />
<text  x="359.59" y="559.5" ></text>
</g>
<g >
<title>COutPoint::Serialize&lt;CSizeComputer&gt; (110 samples, 0.13%)</title><rect x="1027.7" y="437" width="1.5" height="15.0" fill="rgb(241,115,14)" rx="2" ry="2" />
<text  x="1030.72" y="447.5" ></text>
</g>
<g >
<title>[unknown] (32 samples, 0.04%)</title><rect x="179.8" y="517" width="0.4" height="15.0" fill="rgb(250,64,31)" rx="2" ry="2" />
<text  x="182.80" y="527.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::DBIter::Next (70 samples, 0.08%)</title><rect x="44.8" y="645" width="1.0" height="15.0" fill="rgb(219,164,23)" rx="2" ry="2" />
<text  x="47.84" y="655.5" ></text>
</g>
<g >
<title>__memp_fget (65 samples, 0.07%)</title><rect x="150.9" y="469" width="0.8" height="15.0" fill="rgb(215,219,42)" rx="2" ry="2" />
<text  x="153.85" y="479.5" ></text>
</g>
<g >
<title>CWallet::ReacceptWalletTransactions (205 samples, 0.23%)</title><rect x="55.0" y="677" width="2.8" height="15.0" fill="rgb(230,82,51)" rx="2" ry="2" />
<text  x="58.01" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (105 samples, 0.12%)</title><rect x="856.6" y="357" width="1.4" height="15.0" fill="rgb(247,162,2)" rx="2" ry="2" />
<text  x="859.56" y="367.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer&gt; (28 samples, 0.03%)</title><rect x="1024.5" y="565" width="0.3" height="15.0" fill="rgb(248,200,24)" rx="2" ry="2" />
<text  x="1027.46" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (15 samples, 0.02%)</title><rect x="449.0" y="597" width="0.2" height="15.0" fill="rgb(238,16,15)" rx="2" ry="2" />
<text  x="452.01" y="607.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (36 samples, 0.04%)</title><rect x="468.0" y="373" width="0.4" height="15.0" fill="rgb(236,192,37)" rx="2" ry="2" />
<text  x="470.96" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::deallocate (827 samples, 0.94%)</title><rect x="673.2" y="613" width="11.1" height="15.0" fill="rgb(227,80,19)" rx="2" ry="2" />
<text  x="676.19" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (49 samples, 0.06%)</title><rect x="97.1" y="373" width="0.6" height="15.0" fill="rgb(238,179,1)" rx="2" ry="2" />
<text  x="100.08" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_value (9 samples, 0.01%)</title><rect x="979.9" y="597" width="0.2" height="15.0" fill="rgb(237,82,50)" rx="2" ry="2" />
<text  x="982.95" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_right (11 samples, 0.01%)</title><rect x="877.7" y="533" width="0.1" height="15.0" fill="rgb(211,203,7)" rx="2" ry="2" />
<text  x="880.68" y="543.5" ></text>
</g>
<g >
<title>std::_Construct&lt;uint256&gt; (35 samples, 0.04%)</title><rect x="30.8" y="581" width="0.4" height="15.0" fill="rgb(250,100,47)" rx="2" ry="2" />
<text  x="33.75" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (8 samples, 0.01%)</title><rect x="1157.9" y="757" width="0.1" height="15.0" fill="rgb(243,53,19)" rx="2" ry="2" />
<text  x="1160.89" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10 samples, 0.01%)</title><rect x="854.3" y="341" width="0.1" height="15.0" fill="rgb(247,221,5)" rx="2" ry="2" />
<text  x="857.27" y="351.5" ></text>
</g>
<g >
<title>__bam_cmp (46 samples, 0.05%)</title><rect x="158.7" y="485" width="0.6" height="15.0" fill="rgb(210,39,34)" rx="2" ry="2" />
<text  x="161.67" y="495.5" ></text>
</g>
<g >
<title>ReadLE32 (14 samples, 0.02%)</title><rect x="47.3" y="629" width="0.2" height="15.0" fill="rgb(228,155,1)" rx="2" ry="2" />
<text  x="50.29" y="639.5" ></text>
</g>
<g >
<title>_int_free (58 samples, 0.07%)</title><rect x="134.8" y="453" width="0.8" height="15.0" fill="rgb(239,24,10)" rx="2" ry="2" />
<text  x="137.82" y="463.5" ></text>
</g>
<g >
<title>do_lookup_x (10 samples, 0.01%)</title><rect x="1189.9" y="661" width="0.1" height="15.0" fill="rgb(253,2,39)" rx="2" ry="2" />
<text  x="1192.87" y="671.5" ></text>
</g>
<g >
<title>Arena::free (915 samples, 1.04%)</title><rect x="1078.2" y="581" width="12.3" height="15.0" fill="rgb(241,125,29)" rx="2" ry="2" />
<text  x="1081.17" y="591.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (257 samples, 0.29%)</title><rect x="445.5" y="597" width="3.5" height="15.0" fill="rgb(205,102,40)" rx="2" ry="2" />
<text  x="448.55" y="607.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (68 samples, 0.08%)</title><rect x="102.3" y="437" width="0.9" height="15.0" fill="rgb(221,26,34)" rx="2" ry="2" />
<text  x="105.26" y="447.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (14 samples, 0.02%)</title><rect x="159.9" y="437" width="0.2" height="15.0" fill="rgb(247,92,31)" rx="2" ry="2" />
<text  x="162.88" y="447.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut&gt; (164 samples, 0.19%)</title><rect x="180.9" y="405" width="2.2" height="15.0" fill="rgb(239,50,27)" rx="2" ry="2" />
<text  x="183.93" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (31 samples, 0.04%)</title><rect x="469.6" y="325" width="0.4" height="15.0" fill="rgb(242,191,52)" rx="2" ry="2" />
<text  x="472.63" y="335.5" ></text>
</g>
<g >
<title>__lock_get (9 samples, 0.01%)</title><rect x="163.9" y="453" width="0.1" height="15.0" fill="rgb(216,55,37)" rx="2" ry="2" />
<text  x="166.91" y="463.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (73 samples, 0.08%)</title><rect x="458.8" y="549" width="1.0" height="15.0" fill="rgb(229,123,39)" rx="2" ry="2" />
<text  x="461.82" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (30 samples, 0.03%)</title><rect x="148.0" y="517" width="0.5" height="15.0" fill="rgb(223,96,33)" rx="2" ry="2" />
<text  x="151.05" y="527.5" ></text>
</g>
<g >
<title>__memp_fput (15 samples, 0.02%)</title><rect x="72.8" y="469" width="0.2" height="15.0" fill="rgb(239,176,25)" rx="2" ry="2" />
<text  x="75.80" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt;::allocate (61 samples, 0.07%)</title><rect x="825.8" y="549" width="0.8" height="15.0" fill="rgb(228,140,48)" rx="2" ry="2" />
<text  x="828.79" y="559.5" ></text>
</g>
<g >
<title>__bam_copy (8 samples, 0.01%)</title><rect x="120.8" y="405" width="0.1" height="15.0" fill="rgb(243,70,44)" rx="2" ry="2" />
<text  x="123.80" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, unsigned long&gt; (87 samples, 0.10%)</title><rect x="509.4" y="293" width="1.2" height="15.0" fill="rgb(254,2,45)" rx="2" ry="2" />
<text  x="512.44" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt; &gt;::_M_node_allocator (22 samples, 0.03%)</title><rect x="927.9" y="549" width="0.3" height="15.0" fill="rgb(248,27,3)" rx="2" ry="2" />
<text  x="930.88" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_S_max_size (14 samples, 0.02%)</title><rect x="398.3" y="421" width="0.2" height="15.0" fill="rgb(251,161,51)" rx="2" ry="2" />
<text  x="401.28" y="431.5" ></text>
</g>
<g >
<title>CDiskBlockIndex::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (121 samples, 0.14%)</title><rect x="43.1" y="597" width="1.6" height="15.0" fill="rgb(216,227,15)" rx="2" ry="2" />
<text  x="46.11" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (27 samples, 0.03%)</title><rect x="517.9" y="437" width="0.4" height="15.0" fill="rgb(222,208,23)" rx="2" ry="2" />
<text  x="520.93" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::vector (34 samples, 0.04%)</title><rect x="669.0" y="661" width="0.5" height="15.0" fill="rgb(249,154,7)" rx="2" ry="2" />
<text  x="672.04" y="671.5" ></text>
</g>
<g >
<title>std::less&lt;long&gt;::operator (655 samples, 0.75%)</title><rect x="970.7" y="613" width="8.8" height="15.0" fill="rgb(215,101,27)" rx="2" ry="2" />
<text  x="973.68" y="623.5" ></text>
</g>
<g >
<title>CHash160::Write (9 samples, 0.01%)</title><rect x="785.5" y="581" width="0.2" height="15.0" fill="rgb(209,40,32)" rx="2" ry="2" />
<text  x="788.54" y="591.5" ></text>
</g>
<g >
<title>push_lock (453 samples, 0.52%)</title><rect x="829.4" y="581" width="6.1" height="15.0" fill="rgb(244,53,27)" rx="2" ry="2" />
<text  x="832.39" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~vector (71 samples, 0.08%)</title><rect x="1020.6" y="661" width="1.0" height="15.0" fill="rgb(230,148,47)" rx="2" ry="2" />
<text  x="1023.62" y="671.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (22 samples, 0.03%)</title><rect x="84.4" y="389" width="0.3" height="15.0" fill="rgb(242,34,24)" rx="2" ry="2" />
<text  x="87.37" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, char* const&amp;&gt; (8 samples, 0.01%)</title><rect x="679.7" y="421" width="0.1" height="15.0" fill="rgb(240,70,11)" rx="2" ry="2" />
<text  x="682.66" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="735.5" y="613" width="0.2" height="15.0" fill="rgb(206,124,27)" rx="2" ry="2" />
<text  x="738.54" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (17 samples, 0.02%)</title><rect x="513.6" y="341" width="0.3" height="15.0" fill="rgb(218,198,37)" rx="2" ry="2" />
<text  x="516.63" y="351.5" ></text>
</g>
<g >
<title>CTransaction::ComputeHash (315 samples, 0.36%)</title><rect x="1105.0" y="485" width="4.2" height="15.0" fill="rgb(228,134,39)" rx="2" ry="2" />
<text  x="1107.95" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_Rb_tree_iterator (11 samples, 0.01%)</title><rect x="612.1" y="485" width="0.2" height="15.0" fill="rgb(229,18,10)" rx="2" ry="2" />
<text  x="615.14" y="495.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (57 samples, 0.07%)</title><rect x="104.9" y="437" width="0.8" height="15.0" fill="rgb(217,4,11)" rx="2" ry="2" />
<text  x="107.93" y="447.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reverse_iterator (8 samples, 0.01%)</title><rect x="1052.4" y="597" width="0.1" height="15.0" fill="rgb(233,137,43)" rx="2" ry="2" />
<text  x="1055.39" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_Vector_base (95 samples, 0.11%)</title><rect x="384.0" y="661" width="1.3" height="15.0" fill="rgb(227,197,11)" rx="2" ry="2" />
<text  x="387.04" y="671.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (75 samples, 0.09%)</title><rect x="369.4" y="597" width="1.1" height="15.0" fill="rgb(239,70,7)" rx="2" ry="2" />
<text  x="372.45" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="460.8" y="501" width="0.1" height="15.0" fill="rgb(234,216,50)" rx="2" ry="2" />
<text  x="463.78" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt; &gt;::allocate (74 samples, 0.08%)</title><rect x="996.8" y="597" width="1.0" height="15.0" fill="rgb(220,51,11)" rx="2" ry="2" />
<text  x="999.83" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (37 samples, 0.04%)</title><rect x="888.0" y="597" width="0.5" height="15.0" fill="rgb(231,75,33)" rx="2" ry="2" />
<text  x="890.96" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;char const*, char*, zero_after_free_allocator&lt;char&gt; &gt; (8,160 samples, 9.32%)</title><rect x="204.6" y="613" width="109.9" height="15.0" fill="rgb(232,124,3)" rx="2" ry="2" />
<text  x="207.58" y="623.5" >std::__uninit..</text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*, unsigned char&gt; (15 samples, 0.02%)</title><rect x="1102.7" y="661" width="0.2" height="15.0" fill="rgb(238,204,42)" rx="2" ry="2" />
<text  x="1105.70" y="671.5" ></text>
</g>
<g >
<title>CWallet::AddToSpends (25 samples, 0.03%)</title><rect x="18.8" y="757" width="0.3" height="15.0" fill="rgb(252,126,44)" rx="2" ry="2" />
<text  x="21.76" y="767.5" ></text>
</g>
<g >
<title>uint256::uint256 (8 samples, 0.01%)</title><rect x="1025.3" y="517" width="0.1" height="15.0" fill="rgb(227,131,39)" rx="2" ry="2" />
<text  x="1028.28" y="527.5" ></text>
</g>
<g >
<title>__db_lput (30 samples, 0.03%)</title><rect x="89.8" y="437" width="0.5" height="15.0" fill="rgb(248,9,43)" rx="2" ry="2" />
<text  x="92.85" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="675.9" y="549" width="0.1" height="15.0" fill="rgb(252,38,29)" rx="2" ry="2" />
<text  x="678.86" y="559.5" ></text>
</g>
<g >
<title>__dbc_iput (46 samples, 0.05%)</title><rect x="104.1" y="453" width="0.7" height="15.0" fill="rgb(230,119,47)" rx="2" ry="2" />
<text  x="107.14" y="463.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (31 samples, 0.04%)</title><rect x="940.5" y="501" width="0.4" height="15.0" fill="rgb(226,197,18)" rx="2" ry="2" />
<text  x="943.52" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (22 samples, 0.03%)</title><rect x="558.3" y="245" width="0.3" height="15.0" fill="rgb(219,100,51)" rx="2" ry="2" />
<text  x="561.28" y="255.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::destroy_content (52 samples, 0.06%)</title><rect x="818.0" y="597" width="0.7" height="15.0" fill="rgb(247,87,1)" rx="2" ry="2" />
<text  x="820.96" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_S_value (9 samples, 0.01%)</title><rect x="52.2" y="613" width="0.1" height="15.0" fill="rgb(208,102,10)" rx="2" ry="2" />
<text  x="55.21" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (15 samples, 0.02%)</title><rect x="593.0" y="581" width="0.2" height="15.0" fill="rgb(216,107,13)" rx="2" ry="2" />
<text  x="595.98" y="591.5" ></text>
</g>
<g >
<title>CHash256::Write (52 samples, 0.06%)</title><rect x="556.6" y="245" width="0.7" height="15.0" fill="rgb(221,154,10)" rx="2" ry="2" />
<text  x="559.55" y="255.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (21 samples, 0.02%)</title><rect x="1059.8" y="581" width="0.3" height="15.0" fill="rgb(215,59,12)" rx="2" ry="2" />
<text  x="1062.81" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl_data::_Vector_impl_data (9 samples, 0.01%)</title><rect x="1102.3" y="629" width="0.1" height="15.0" fill="rgb(252,7,44)" rx="2" ry="2" />
<text  x="1105.32" y="639.5" ></text>
</g>
<g >
<title>TLS wrapper function for g_lockstack (10 samples, 0.01%)</title><rect x="727.7" y="581" width="0.2" height="15.0" fill="rgb(207,196,42)" rx="2" ry="2" />
<text  x="730.74" y="591.5" ></text>
</g>
<g >
<title>util::ThreadGetInternalName[abi:cxx11] (30 samples, 0.03%)</title><rect x="944.2" y="549" width="0.4" height="15.0" fill="rgb(228,65,34)" rx="2" ry="2" />
<text  x="947.19" y="559.5" ></text>
</g>
<g >
<title>QuadRound (289 samples, 0.33%)</title><rect x="1114.1" y="245" width="3.9" height="15.0" fill="rgb(247,175,45)" rx="2" ry="2" />
<text  x="1117.12" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (9 samples, 0.01%)</title><rect x="885.0" y="613" width="0.1" height="15.0" fill="rgb(222,112,14)" rx="2" ry="2" />
<text  x="887.95" y="623.5" ></text>
</g>
<g >
<title>__memp_fget (36 samples, 0.04%)</title><rect x="119.3" y="405" width="0.4" height="15.0" fill="rgb(251,113,51)" rx="2" ry="2" />
<text  x="122.25" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (8 samples, 0.01%)</title><rect x="525.3" y="277" width="0.1" height="15.0" fill="rgb(217,85,21)" rx="2" ry="2" />
<text  x="528.30" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::insert&lt;char const*, void&gt; (14 samples, 0.02%)</title><rect x="1179.2" y="757" width="0.2" height="15.0" fill="rgb(239,26,9)" rx="2" ry="2" />
<text  x="1182.23" y="767.5" ></text>
</g>
<g >
<title>CTxOut::SetNull (18 samples, 0.02%)</title><rect x="551.4" y="293" width="0.2" height="15.0" fill="rgb(212,25,23)" rx="2" ry="2" />
<text  x="554.39" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_Vector_impl_data::_Vector_impl_data (8 samples, 0.01%)</title><rect x="603.5" y="581" width="0.1" height="15.0" fill="rgb(205,216,50)" rx="2" ry="2" />
<text  x="606.50" y="591.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (23 samples, 0.03%)</title><rect x="80.9" y="453" width="0.3" height="15.0" fill="rgb(252,37,6)" rx="2" ry="2" />
<text  x="83.87" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="858.1" y="357" width="0.1" height="15.0" fill="rgb(235,219,49)" rx="2" ry="2" />
<text  x="861.14" y="367.5" ></text>
</g>
<g >
<title>memory_cleanse (64 samples, 0.07%)</title><rect x="389.8" y="597" width="0.8" height="15.0" fill="rgb(222,169,43)" rx="2" ry="2" />
<text  x="392.77" y="607.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (16 samples, 0.02%)</title><rect x="16.5" y="757" width="0.2" height="15.0" fill="rgb(231,151,41)" rx="2" ry="2" />
<text  x="19.51" y="767.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_lock (32 samples, 0.04%)</title><rect x="881.4" y="581" width="0.4" height="15.0" fill="rgb(238,99,35)" rx="2" ry="2" />
<text  x="884.38" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (14 samples, 0.02%)</title><rect x="583.2" y="549" width="0.2" height="15.0" fill="rgb(224,131,45)" rx="2" ry="2" />
<text  x="586.22" y="559.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (315 samples, 0.36%)</title><rect x="1105.0" y="389" width="4.2" height="15.0" fill="rgb(207,30,49)" rx="2" ry="2" />
<text  x="1107.95" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (24 samples, 0.03%)</title><rect x="596.1" y="565" width="0.3" height="15.0" fill="rgb(229,210,19)" rx="2" ry="2" />
<text  x="599.11" y="575.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.01%)</title><rect x="1093.8" y="517" width="0.1" height="15.0" fill="rgb(232,32,20)" rx="2" ry="2" />
<text  x="1096.79" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (248 samples, 0.28%)</title><rect x="399.1" y="533" width="3.3" height="15.0" fill="rgb(227,9,52)" rx="2" ry="2" />
<text  x="402.06" y="543.5" ></text>
</g>
<g >
<title>CHashWriter::write (386 samples, 0.44%)</title><rect x="1113.6" y="309" width="5.2" height="15.0" fill="rgb(244,215,16)" rx="2" ry="2" />
<text  x="1116.56" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::end (20 samples, 0.02%)</title><rect x="879.1" y="549" width="0.2" height="15.0" fill="rgb(209,14,47)" rx="2" ry="2" />
<text  x="882.06" y="559.5" ></text>
</g>
<g >
<title>CWallet::LoadKey (416 samples, 0.48%)</title><rect x="1121.8" y="725" width="5.6" height="15.0" fill="rgb(249,137,47)" rx="2" ry="2" />
<text  x="1124.82" y="735.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (26 samples, 0.03%)</title><rect x="881.5" y="565" width="0.3" height="15.0" fill="rgb(252,20,42)" rx="2" ry="2" />
<text  x="884.46" y="575.5" ></text>
</g>
<g >
<title>CWallet::UpdateTimeFirstKey (29 samples, 0.03%)</title><rect x="885.1" y="661" width="0.4" height="15.0" fill="rgb(235,62,31)" rx="2" ry="2" />
<text  x="888.07" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::destroy&lt;unsigned char&gt; (9 samples, 0.01%)</title><rect x="672.9" y="597" width="0.1" height="15.0" fill="rgb(208,166,28)" rx="2" ry="2" />
<text  x="675.92" y="607.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (39 samples, 0.04%)</title><rect x="1143.9" y="549" width="0.5" height="15.0" fill="rgb(237,122,19)" rx="2" ry="2" />
<text  x="1146.88" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_right (10 samples, 0.01%)</title><rect x="731.9" y="533" width="0.2" height="15.0" fill="rgb(214,142,0)" rx="2" ry="2" />
<text  x="734.93" y="543.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (17 samples, 0.02%)</title><rect x="581.0" y="549" width="0.3" height="15.0" fill="rgb(219,131,12)" rx="2" ry="2" />
<text  x="584.04" y="559.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="1020.8" y="645" width="0.2" height="15.0" fill="rgb(224,107,28)" rx="2" ry="2" />
<text  x="1023.79" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_get_Tp_allocator (18 samples, 0.02%)</title><rect x="505.6" y="277" width="0.3" height="15.0" fill="rgb(209,179,5)" rx="2" ry="2" />
<text  x="508.64" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (12 samples, 0.01%)</title><rect x="586.8" y="613" width="0.2" height="15.0" fill="rgb(235,95,50)" rx="2" ry="2" />
<text  x="589.79" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;COutPoint&gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (13 samples, 0.01%)</title><rect x="1041.6" y="613" width="0.1" height="15.0" fill="rgb(236,213,44)" rx="2" ry="2" />
<text  x="1044.56" y="623.5" ></text>
</g>
<g >
<title>std::less&lt;COutPoint&gt;::operator (45 samples, 0.05%)</title><rect x="1040.9" y="613" width="0.6" height="15.0" fill="rgb(228,214,13)" rx="2" ry="2" />
<text  x="1043.94" y="623.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (33 samples, 0.04%)</title><rect x="449.2" y="597" width="0.5" height="15.0" fill="rgb(229,36,24)" rx="2" ry="2" />
<text  x="452.22" y="607.5" ></text>
</g>
<g >
<title>CSHA256::Write (24 samples, 0.03%)</title><rect x="557.6" y="197" width="0.3" height="15.0" fill="rgb(232,144,36)" rx="2" ry="2" />
<text  x="560.56" y="207.5" ></text>
</g>
<g >
<title>__dbc_close (23 samples, 0.03%)</title><rect x="127.1" y="501" width="0.3" height="15.0" fill="rgb(236,140,46)" rx="2" ry="2" />
<text  x="130.08" y="511.5" ></text>
</g>
<g >
<title>CMutableTransaction::~CMutableTransaction (75 samples, 0.09%)</title><rect x="517.8" y="453" width="1.0" height="15.0" fill="rgb(220,26,9)" rx="2" ry="2" />
<text  x="520.84" y="463.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, unsigned int&amp;&gt; (36 samples, 0.04%)</title><rect x="478.9" y="309" width="0.5" height="15.0" fill="rgb(208,125,16)" rx="2" ry="2" />
<text  x="481.94" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;BerkeleyEnvironment&gt;::destroy&lt;BerkeleyEnvironment&gt; (11 samples, 0.01%)</title><rect x="180.8" y="533" width="0.1" height="15.0" fill="rgb(205,43,48)" rx="2" ry="2" />
<text  x="183.78" y="543.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (164 samples, 0.19%)</title><rect x="180.9" y="277" width="2.2" height="15.0" fill="rgb(218,125,29)" rx="2" ry="2" />
<text  x="183.93" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;uint256, CBlockIndex*&gt; &gt; (35 samples, 0.04%)</title><rect x="49.0" y="565" width="0.4" height="15.0" fill="rgb(215,35,0)" rx="2" ry="2" />
<text  x="51.97" y="575.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (13 samples, 0.01%)</title><rect x="764.8" y="581" width="0.1" height="15.0" fill="rgb(253,191,11)" rx="2" ry="2" />
<text  x="767.77" y="591.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, uint256, std::allocator&lt;uint256&gt; &gt; (76 samples, 0.09%)</title><rect x="573.9" y="613" width="1.0" height="15.0" fill="rgb(242,99,14)" rx="2" ry="2" />
<text  x="576.86" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_get_Tp_allocator (11 samples, 0.01%)</title><rect x="503.1" y="261" width="0.1" height="15.0" fill="rgb(207,22,30)" rx="2" ry="2" />
<text  x="506.05" y="271.5" ></text>
</g>
<g >
<title>__memp_bhfree (96 samples, 0.11%)</title><rect x="177.5" y="549" width="1.3" height="15.0" fill="rgb(222,42,39)" rx="2" ry="2" />
<text  x="180.47" y="559.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, true&gt; (25 samples, 0.03%)</title><rect x="599.4" y="581" width="0.3" height="15.0" fill="rgb(250,77,43)" rx="2" ry="2" />
<text  x="602.37" y="591.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (20 samples, 0.02%)</title><rect x="1144.6" y="533" width="0.2" height="15.0" fill="rgb(219,172,42)" rx="2" ry="2" />
<text  x="1147.57" y="543.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CSizeComputer&gt; (24 samples, 0.03%)</title><rect x="1024.5" y="549" width="0.3" height="15.0" fill="rgb(241,201,54)" rx="2" ry="2" />
<text  x="1027.51" y="559.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (245 samples, 0.28%)</title><rect x="1127.6" y="661" width="3.3" height="15.0" fill="rgb(222,80,40)" rx="2" ry="2" />
<text  x="1130.58" y="671.5" ></text>
</g>
<g >
<title>CSHA256::Write (152 samples, 0.17%)</title><rect x="1123.5" y="597" width="2.1" height="15.0" fill="rgb(245,133,29)" rx="2" ry="2" />
<text  x="1126.54" y="607.5" ></text>
</g>
<g >
<title>boost::detail::variant::visitation_impl&lt;mpl_::int_&lt;0&gt;, boost::detail::variant::visitation_impl_step&lt;boost::mpl::l_iter&lt;boost::mpl::l_item&lt;mpl_::long_&lt;6l&gt;, CNoDestination, boost::mpl::l_item&lt;mpl_::long_&lt;5l&gt;, PKHash, boost::mpl::l_item&lt;mpl_::long_&lt;4l&gt;, ScriptHash, boost::mpl::l_item&lt;mpl_::long_&lt;3l&gt;, WitnessV0ScriptHash, boost::mpl::l_item&lt;mpl_::long_&lt;2l&gt;, WitnessV0KeyHash, boost::mpl::l_item&lt;mpl_::long_&lt;1l&gt;, WitnessUnknown, boost::mpl::l_end&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::mpl::l_iter&lt;boost::mpl::l_end&gt; &gt;, boost::detail::variant::invoke_visitor&lt;(anonymous namespace)::CScriptVisitor const, false&gt;, void const*, boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::has_fallback_type_&gt; (717 samples, 0.82%)</title><rect x="807.5" y="533" width="9.6" height="15.0" fill="rgb(224,103,35)" rx="2" ry="2" />
<text  x="810.47" y="543.5" ></text>
</g>
<g >
<title>CScript::~CScript (12 samples, 0.01%)</title><rect x="704.7" y="677" width="0.1" height="15.0" fill="rgb(212,223,26)" rx="2" ry="2" />
<text  x="707.68" y="687.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::internal_apply_visitor&lt;boost::detail::variant::invoke_visitor&lt;boost::detail::variant::comparer&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;, boost::detail::variant::less_comp&gt;, false&gt; &gt; (8 samples, 0.01%)</title><rect x="1062.1" y="565" width="0.1" height="15.0" fill="rgb(231,195,18)" rx="2" ry="2" />
<text  x="1065.10" y="575.5" ></text>
</g>
<g >
<title>CDataStream::CDataStream (135 samples, 0.15%)</title><rect x="39.8" y="645" width="1.9" height="15.0" fill="rgb(242,20,26)" rx="2" ry="2" />
<text  x="42.84" y="655.5" ></text>
</g>
<g >
<title>std::allocator&lt;CTransaction&gt;::allocator (10 samples, 0.01%)</title><rect x="1060.1" y="581" width="0.1" height="15.0" fill="rgb(209,30,7)" rx="2" ry="2" />
<text  x="1063.09" y="591.5" ></text>
</g>
<g >
<title>[libboost_thread.so.1.69.0] (56 samples, 0.06%)</title><rect x="1145.6" y="725" width="0.7" height="15.0" fill="rgb(232,150,19)" rx="2" ry="2" />
<text  x="1148.56" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (59 samples, 0.07%)</title><rect x="812.9" y="421" width="0.8" height="15.0" fill="rgb(245,92,18)" rx="2" ry="2" />
<text  x="815.86" y="431.5" ></text>
</g>
<g >
<title>__lock_get_internal (8 samples, 0.01%)</title><rect x="103.6" y="357" width="0.1" height="15.0" fill="rgb(252,109,52)" rx="2" ry="2" />
<text  x="106.58" y="367.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;CTransaction const, std::allocator&lt;CTransaction&gt;&gt; (356 samples, 0.41%)</title><rect x="1055.8" y="645" width="4.8" height="15.0" fill="rgb(216,219,34)" rx="2" ry="2" />
<text  x="1058.82" y="655.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (26 samples, 0.03%)</title><rect x="93.5" y="357" width="0.3" height="15.0" fill="rgb(205,36,7)" rx="2" ry="2" />
<text  x="96.48" y="367.5" ></text>
</g>
<g >
<title>WalletBatch::LoadWallet (68,218 samples, 77.91%)</title><rect x="185.4" y="709" width="919.3" height="15.0" fill="rgb(213,82,45)" rx="2" ry="2" />
<text  x="188.37" y="719.5" >WalletBatch::LoadWallet</text>
</g>
<g >
<title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="183.9" y="133" width="0.1" height="15.0" fill="rgb(205,214,38)" rx="2" ry="2" />
<text  x="186.94" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size (14 samples, 0.02%)</title><rect x="667.7" y="597" width="0.2" height="15.0" fill="rgb(243,157,24)" rx="2" ry="2" />
<text  x="670.69" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (99 samples, 0.11%)</title><rect x="501.1" y="277" width="1.3" height="15.0" fill="rgb(225,191,33)" rx="2" ry="2" />
<text  x="504.06" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_value (18 samples, 0.02%)</title><rect x="834.3" y="517" width="0.2" height="15.0" fill="rgb(252,89,26)" rx="2" ry="2" />
<text  x="837.30" y="527.5" ></text>
</g>
<g >
<title>__dbc_close (10 samples, 0.01%)</title><rect x="104.0" y="453" width="0.1" height="15.0" fill="rgb(247,184,46)" rx="2" ry="2" />
<text  x="107.01" y="463.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; (31 samples, 0.04%)</title><rect x="897.7" y="613" width="0.4" height="15.0" fill="rgb(251,94,33)" rx="2" ry="2" />
<text  x="900.66" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (18 samples, 0.02%)</title><rect x="599.5" y="565" width="0.2" height="15.0" fill="rgb(232,37,27)" rx="2" ry="2" />
<text  x="602.46" y="575.5" ></text>
</g>
<g >
<title>ser_writedata64&lt;CSizeComputer&gt; (21 samples, 0.02%)</title><rect x="1035.5" y="437" width="0.3" height="15.0" fill="rgb(239,159,41)" rx="2" ry="2" />
<text  x="1038.55" y="447.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (15 samples, 0.02%)</title><rect x="634.6" y="565" width="0.2" height="15.0" fill="rgb(254,167,33)" rx="2" ry="2" />
<text  x="637.59" y="575.5" ></text>
</g>
<g >
<title>CScript::operator= (203 samples, 0.23%)</title><rect x="705.5" y="645" width="2.7" height="15.0" fill="rgb(219,159,49)" rx="2" ry="2" />
<text  x="708.49" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_construct&lt;char, char const&amp;&gt; (65 samples, 0.07%)</title><rect x="40.5" y="565" width="0.9" height="15.0" fill="rgb(205,85,8)" rx="2" ry="2" />
<text  x="43.50" y="575.5" ></text>
</g>
<g >
<title>std::map&lt;CKeyID, long, std::less&lt;CKeyID&gt;, std::allocator&lt;std::pair&lt;CKeyID const, long&gt; &gt; &gt;::operator[] (12 samples, 0.01%)</title><rect x="894.1" y="661" width="0.2" height="15.0" fill="rgb(242,44,1)" rx="2" ry="2" />
<text  x="897.09" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::empty (60 samples, 0.07%)</title><rect x="1049.0" y="661" width="0.8" height="15.0" fill="rgb(231,6,44)" rx="2" ry="2" />
<text  x="1052.00" y="671.5" ></text>
</g>
<g >
<title>__bam_search (242 samples, 0.28%)</title><rect x="148.9" y="485" width="3.3" height="15.0" fill="rgb(216,51,19)" rx="2" ry="2" />
<text  x="151.93" y="495.5" ></text>
</g>
<g >
<title>CTxIn::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (498 samples, 0.57%)</title><rect x="472.7" y="325" width="6.7" height="15.0" fill="rgb(227,224,26)" rx="2" ry="2" />
<text  x="475.72" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (10 samples, 0.01%)</title><rect x="1179.0" y="757" width="0.2" height="15.0" fill="rgb(217,143,28)" rx="2" ry="2" />
<text  x="1182.04" y="767.5" ></text>
</g>
<g >
<title>CTransaction::IsCoinBase (100 samples, 0.11%)</title><rect x="35.8" y="629" width="1.4" height="15.0" fill="rgb(225,158,26)" rx="2" ry="2" />
<text  x="38.81" y="639.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (117 samples, 0.13%)</title><rect x="536.1" y="213" width="1.6" height="15.0" fill="rgb(216,12,53)" rx="2" ry="2" />
<text  x="539.08" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_drop_node (43 samples, 0.05%)</title><rect x="653.7" y="501" width="0.6" height="15.0" fill="rgb(215,177,15)" rx="2" ry="2" />
<text  x="656.70" y="511.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="502.7" y="277" width="0.1" height="15.0" fill="rgb(215,204,9)" rx="2" ry="2" />
<text  x="505.70" y="287.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (14 samples, 0.02%)</title><rect x="809.1" y="437" width="0.2" height="15.0" fill="rgb(243,72,19)" rx="2" ry="2" />
<text  x="812.11" y="447.5" ></text>
</g>
<g >
<title>__dbc_cleanup (9 samples, 0.01%)</title><rect x="157.1" y="517" width="0.2" height="15.0" fill="rgb(218,146,54)" rx="2" ry="2" />
<text  x="160.15" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt;::_Hash_node (10 samples, 0.01%)</title><rect x="844.0" y="581" width="0.2" height="15.0" fill="rgb(227,65,4)" rx="2" ry="2" />
<text  x="847.04" y="591.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, 28u, unsigned char&gt; (200 samples, 0.23%)</title><rect x="476.1" y="181" width="2.7" height="15.0" fill="rgb(253,161,39)" rx="2" ry="2" />
<text  x="479.06" y="191.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (273 samples, 0.31%)</title><rect x="122.5" y="437" width="3.7" height="15.0" fill="rgb(247,215,44)" rx="2" ry="2" />
<text  x="125.47" y="447.5" ></text>
</g>
<g >
<title>operator== (9 samples, 0.01%)</title><rect x="911.4" y="501" width="0.1" height="15.0" fill="rgb(246,22,15)" rx="2" ry="2" />
<text  x="914.42" y="511.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, 28u, unsigned char&gt; (203 samples, 0.23%)</title><rect x="476.0" y="197" width="2.8" height="15.0" fill="rgb(247,56,24)" rx="2" ry="2" />
<text  x="479.02" y="207.5" ></text>
</g>
<g >
<title>__bamc_dup (18 samples, 0.02%)</title><rect x="375.9" y="613" width="0.2" height="15.0" fill="rgb(227,26,54)" rx="2" ry="2" />
<text  x="378.88" y="623.5" ></text>
</g>
<g >
<title>EnterCritical (585 samples, 0.67%)</title><rect x="726.3" y="613" width="7.9" height="15.0" fill="rgb(215,135,32)" rx="2" ry="2" />
<text  x="729.33" y="623.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (15 samples, 0.02%)</title><rect x="554.6" y="293" width="0.2" height="15.0" fill="rgb(230,62,24)" rx="2" ry="2" />
<text  x="557.64" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;char*, unsigned long&amp;&gt; (313 samples, 0.36%)</title><rect x="659.4" y="533" width="4.2" height="15.0" fill="rgb(227,76,14)" rx="2" ry="2" />
<text  x="662.36" y="543.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, CScript&gt; (149 samples, 0.17%)</title><rect x="1029.3" y="485" width="2.0" height="15.0" fill="rgb(213,181,29)" rx="2" ry="2" />
<text  x="1032.27" y="495.5" ></text>
</g>
<g >
<title>CHash160::Finalize (137 samples, 0.16%)</title><rect x="1125.6" y="629" width="1.8" height="15.0" fill="rgb(246,138,16)" rx="2" ry="2" />
<text  x="1128.58" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (20 samples, 0.02%)</title><rect x="835.2" y="533" width="0.3" height="15.0" fill="rgb(208,143,12)" rx="2" ry="2" />
<text  x="838.21" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.01%)</title><rect x="1053.8" y="613" width="0.2" height="15.0" fill="rgb(233,139,7)" rx="2" ry="2" />
<text  x="1056.82" y="623.5" ></text>
</g>
<g >
<title>__bam_get_root (29 samples, 0.03%)</title><rect x="170.6" y="485" width="0.4" height="15.0" fill="rgb(233,40,36)" rx="2" ry="2" />
<text  x="173.60" y="495.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (4,413 samples, 5.04%)</title><rect x="78.0" y="549" width="59.5" height="15.0" fill="rgb(205,167,38)" rx="2" ry="2" />
<text  x="81.01" y="559.5" >__bam_..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_v (10 samples, 0.01%)</title><rect x="933.2" y="549" width="0.1" height="15.0" fill="rgb(244,216,17)" rx="2" ry="2" />
<text  x="936.17" y="559.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (11 samples, 0.01%)</title><rect x="454.4" y="453" width="0.1" height="15.0" fill="rgb(228,36,30)" rx="2" ry="2" />
<text  x="457.39" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::~_Vector_impl (8 samples, 0.01%)</title><rect x="563.8" y="309" width="0.1" height="15.0" fill="rgb(205,6,26)" rx="2" ry="2" />
<text  x="566.76" y="319.5" ></text>
</g>
<g >
<title>ProcRand (398 samples, 0.45%)</title><rect x="1184.2" y="661" width="5.4" height="15.0" fill="rgb(207,46,7)" rx="2" ry="2" />
<text  x="1187.21" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt; &gt;::allocate (47 samples, 0.05%)</title><rect x="844.4" y="581" width="0.7" height="15.0" fill="rgb(217,75,28)" rx="2" ry="2" />
<text  x="847.43" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (16 samples, 0.02%)</title><rect x="1162.4" y="757" width="0.2" height="15.0" fill="rgb(251,129,8)" rx="2" ry="2" />
<text  x="1165.41" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, unsigned long, true&gt;::_S_equals (96 samples, 0.11%)</title><rect x="737.8" y="565" width="1.3" height="15.0" fill="rgb(220,29,20)" rx="2" ry="2" />
<text  x="740.83" y="575.5" ></text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (1,142 samples, 1.30%)</title><rect x="290.4" y="565" width="15.4" height="15.0" fill="rgb(218,69,18)" rx="2" ry="2" />
<text  x="293.37" y="575.5" ></text>
</g>
<g >
<title>CTxIn::~CTxIn (103 samples, 0.12%)</title><rect x="470.0" y="373" width="1.4" height="15.0" fill="rgb(252,19,37)" rx="2" ry="2" />
<text  x="473.05" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::end (22 samples, 0.03%)</title><rect x="875.0" y="565" width="0.3" height="15.0" fill="rgb(225,229,40)" rx="2" ry="2" />
<text  x="877.99" y="575.5" ></text>
</g>
<g >
<title>_mm_sha256msg2_epu32 (13 samples, 0.01%)</title><rect x="1143.3" y="133" width="0.2" height="15.0" fill="rgb(233,216,5)" rx="2" ry="2" />
<text  x="1146.31" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTransaction&gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (7,380 samples, 8.43%)</title><rect x="466.1" y="485" width="99.5" height="15.0" fill="rgb(221,70,42)" rx="2" ry="2" />
<text  x="469.10" y="495.5" >__gnu_cxx::n..</text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (593 samples, 0.68%)</title><rect x="498.7" y="309" width="8.0" height="15.0" fill="rgb(211,12,5)" rx="2" ry="2" />
<text  x="501.69" y="319.5" ></text>
</g>
<g >
<title>CDataStream::read (16 samples, 0.02%)</title><rect x="479.1" y="245" width="0.2" height="15.0" fill="rgb(218,56,24)" rx="2" ry="2" />
<text  x="482.11" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (31 samples, 0.04%)</title><rect x="830.8" y="517" width="0.5" height="15.0" fill="rgb(206,58,24)" rx="2" ry="2" />
<text  x="833.85" y="527.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (8 samples, 0.01%)</title><rect x="726.0" y="613" width="0.1" height="15.0" fill="rgb(219,54,12)" rx="2" ry="2" />
<text  x="728.99" y="623.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::~LockImpl (155 samples, 0.18%)</title><rect x="984.3" y="613" width="2.1" height="15.0" fill="rgb(220,156,53)" rx="2" ry="2" />
<text  x="987.30" y="623.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (12 samples, 0.01%)</title><rect x="169.2" y="533" width="0.2" height="15.0" fill="rgb(235,0,18)" rx="2" ry="2" />
<text  x="172.25" y="543.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (20 samples, 0.02%)</title><rect x="586.4" y="629" width="0.3" height="15.0" fill="rgb(223,86,23)" rx="2" ry="2" />
<text  x="589.44" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (35 samples, 0.04%)</title><rect x="728.9" y="533" width="0.5" height="15.0" fill="rgb(214,209,14)" rx="2" ry="2" />
<text  x="731.94" y="543.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (39 samples, 0.04%)</title><rect x="786.1" y="597" width="0.5" height="15.0" fill="rgb(214,132,44)" rx="2" ry="2" />
<text  x="789.09" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (247 samples, 0.28%)</title><rect x="529.4" y="229" width="3.4" height="15.0" fill="rgb(207,79,15)" rx="2" ry="2" />
<text  x="532.44" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char* const&amp;, 0ul&gt; (12 samples, 0.01%)</title><rect x="679.6" y="453" width="0.2" height="15.0" fill="rgb(218,132,23)" rx="2" ry="2" />
<text  x="682.60" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_v (8 samples, 0.01%)</title><rect x="682.9" y="453" width="0.1" height="15.0" fill="rgb(226,223,54)" rx="2" ry="2" />
<text  x="685.91" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::emplace&lt;uint256&amp;, CWalletTx&amp;&gt; (1,331 samples, 1.52%)</title><rect x="986.8" y="661" width="17.9" height="15.0" fill="rgb(235,96,41)" rx="2" ry="2" />
<text  x="989.77" y="671.5" ></text>
</g>
<g >
<title>start_thread (154 samples, 0.18%)</title><rect x="1145.3" y="741" width="2.0" height="15.0" fill="rgb(221,125,45)" rx="2" ry="2" />
<text  x="1148.27" y="751.5" ></text>
</g>
<g >
<title>Dbt::Dbt (20 samples, 0.02%)</title><rect x="187.9" y="661" width="0.3" height="15.0" fill="rgb(211,104,39)" rx="2" ry="2" />
<text  x="190.94" y="671.5" ></text>
</g>
<g >
<title>__lock_get_internal (36 samples, 0.04%)</title><rect x="75.7" y="437" width="0.4" height="15.0" fill="rgb(227,171,9)" rx="2" ry="2" />
<text  x="78.66" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (23 samples, 0.03%)</title><rect x="677.6" y="469" width="0.3" height="15.0" fill="rgb(208,226,25)" rx="2" ry="2" />
<text  x="680.58" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (33 samples, 0.04%)</title><rect x="635.1" y="549" width="0.5" height="15.0" fill="rgb(209,62,34)" rx="2" ry="2" />
<text  x="638.12" y="559.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CWalletTx&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="725" width="13.8" height="15.0" fill="rgb(229,194,52)" rx="2" ry="2" />
<text  x="1107.95" y="735.5" ></text>
</g>
<g >
<title>__db_tas_mutex_trylock (22 samples, 0.03%)</title><rect x="131.0" y="469" width="0.3" height="15.0" fill="rgb(220,53,33)" rx="2" ry="2" />
<text  x="133.99" y="479.5" ></text>
</g>
<g >
<title>__bam_iitem (44 samples, 0.05%)</title><rect x="77.2" y="501" width="0.6" height="15.0" fill="rgb(224,92,24)" rx="2" ry="2" />
<text  x="80.23" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_right (8 samples, 0.01%)</title><rect x="598.0" y="581" width="0.1" height="15.0" fill="rgb(222,139,49)" rx="2" ry="2" />
<text  x="600.95" y="591.5" ></text>
</g>
<g >
<title>CHashWriter::write (22 samples, 0.03%)</title><rect x="553.0" y="101" width="0.3" height="15.0" fill="rgb(226,88,35)" rx="2" ry="2" />
<text  x="555.95" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::erase (160 samples, 0.18%)</title><rect x="1087.0" y="565" width="2.1" height="15.0" fill="rgb(251,136,53)" rx="2" ry="2" />
<text  x="1089.99" y="575.5" ></text>
</g>
<g >
<title>__lock_get_internal (16 samples, 0.02%)</title><rect x="71.9" y="437" width="0.2" height="15.0" fill="rgb(247,82,41)" rx="2" ry="2" />
<text  x="74.87" y="447.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (18 samples, 0.02%)</title><rect x="1137.5" y="149" width="0.2" height="15.0" fill="rgb(212,74,13)" rx="2" ry="2" />
<text  x="1140.48" y="159.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (42 samples, 0.05%)</title><rect x="46.0" y="549" width="0.6" height="15.0" fill="rgb(215,97,10)" rx="2" ry="2" />
<text  x="49.02" y="559.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (55 samples, 0.06%)</title><rect x="1119.5" y="613" width="0.8" height="15.0" fill="rgb(214,13,30)" rx="2" ry="2" />
<text  x="1122.52" y="623.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (81 samples, 0.09%)</title><rect x="339.1" y="549" width="1.1" height="15.0" fill="rgb(239,227,1)" rx="2" ry="2" />
<text  x="342.13" y="559.5" ></text>
</g>
<g >
<title>__bam_iitem (10 samples, 0.01%)</title><rect x="65.9" y="485" width="0.1" height="15.0" fill="rgb(244,155,46)" rx="2" ry="2" />
<text  x="68.90" y="495.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (54 samples, 0.06%)</title><rect x="66.3" y="485" width="0.8" height="15.0" fill="rgb(232,32,42)" rx="2" ry="2" />
<text  x="69.34" y="495.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::operator bool (11 samples, 0.01%)</title><rect x="741.2" y="629" width="0.2" height="15.0" fill="rgb(223,199,5)" rx="2" ry="2" />
<text  x="744.22" y="639.5" ></text>
</g>
<g >
<title>_mm_sha256msg2_epu32 (9 samples, 0.01%)</title><rect x="1135.5" y="629" width="0.2" height="15.0" fill="rgb(211,190,13)" rx="2" ry="2" />
<text  x="1138.54" y="639.5" ></text>
</g>
<g >
<title>__uint32_identity (15 samples, 0.02%)</title><rect x="702.8" y="581" width="0.2" height="15.0" fill="rgb(254,169,48)" rx="2" ry="2" />
<text  x="705.81" y="591.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, long&amp;&gt; (27 samples, 0.03%)</title><rect x="402.8" y="613" width="0.4" height="15.0" fill="rgb(209,229,10)" rx="2" ry="2" />
<text  x="405.79" y="623.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="511.9" y="277" width="0.2" height="15.0" fill="rgb(239,180,16)" rx="2" ry="2" />
<text  x="514.89" y="287.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (40 samples, 0.05%)</title><rect x="173.7" y="565" width="0.6" height="15.0" fill="rgb(246,222,14)" rx="2" ry="2" />
<text  x="176.72" y="575.5" ></text>
</g>
<g >
<title>operator== (52 samples, 0.06%)</title><rect x="1011.6" y="549" width="0.7" height="15.0" fill="rgb(243,0,42)" rx="2" ry="2" />
<text  x="1014.64" y="559.5" ></text>
</g>
<g >
<title>LockAssertion::LockAssertion&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt; (11 samples, 0.01%)</title><rect x="57.6" y="613" width="0.2" height="15.0" fill="rgb(232,90,37)" rx="2" ry="2" />
<text  x="60.62" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;::base (9 samples, 0.01%)</title><rect x="939.3" y="517" width="0.1" height="15.0" fill="rgb(239,26,51)" rx="2" ry="2" />
<text  x="942.30" y="527.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (12 samples, 0.01%)</title><rect x="173.5" y="565" width="0.2" height="15.0" fill="rgb(254,225,25)" rx="2" ry="2" />
<text  x="176.52" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20 samples, 0.02%)</title><rect x="1000.7" y="485" width="0.3" height="15.0" fill="rgb(233,10,30)" rx="2" ry="2" />
<text  x="1003.69" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char&gt; (10 samples, 0.01%)</title><rect x="874.3" y="517" width="0.1" height="15.0" fill="rgb(232,121,14)" rx="2" ry="2" />
<text  x="877.28" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (10 samples, 0.01%)</title><rect x="41.1" y="533" width="0.1" height="15.0" fill="rgb(241,117,20)" rx="2" ry="2" />
<text  x="44.06" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;CTransaction const,  (12 samples, 0.01%)</title><rect x="1061.8" y="661" width="0.1" height="15.0" fill="rgb(211,172,53)" rx="2" ry="2" />
<text  x="1064.79" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (27 samples, 0.03%)</title><rect x="682.0" y="485" width="0.4" height="15.0" fill="rgb(251,165,44)" rx="2" ry="2" />
<text  x="685.04" y="495.5" ></text>
</g>
<g >
<title>BerkeleyBatch::SafeDbt::get_size (41 samples, 0.05%)</title><rect x="189.5" y="677" width="0.5" height="15.0" fill="rgb(238,222,14)" rx="2" ry="2" />
<text  x="192.48" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, secure_allocator&lt;unsigned char&gt; &gt; (201 samples, 0.23%)</title><rect x="864.1" y="469" width="2.7" height="15.0" fill="rgb(229,130,17)" rx="2" ry="2" />
<text  x="867.12" y="479.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::GetUint64 (27 samples, 0.03%)</title><rect x="926.2" y="517" width="0.4" height="15.0" fill="rgb(230,36,31)" rx="2" ry="2" />
<text  x="929.22" y="527.5" ></text>
</g>
<g >
<title>CPubKey::size (11 samples, 0.01%)</title><rect x="744.0" y="613" width="0.2" height="15.0" fill="rgb(231,228,9)" rx="2" ry="2" />
<text  x="747.05" y="623.5" ></text>
</g>
<g >
<title>GetBlockProof (112 samples, 0.13%)</title><rect x="49.6" y="677" width="1.5" height="15.0" fill="rgb(213,76,9)" rx="2" ry="2" />
<text  x="52.61" y="687.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::getBlockHeight (858 samples, 0.98%)</title><rect x="951.7" y="661" width="11.6" height="15.0" fill="rgb(242,60,44)" rx="2" ry="2" />
<text  x="954.74" y="671.5" ></text>
</g>
<g >
<title>__os_id (8 samples, 0.01%)</title><rect x="368.4" y="517" width="0.1" height="15.0" fill="rgb(237,18,16)" rx="2" ry="2" />
<text  x="371.40" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (159 samples, 0.18%)</title><rect x="841.5" y="597" width="2.2" height="15.0" fill="rgb(220,166,41)" rx="2" ry="2" />
<text  x="844.55" y="607.5" ></text>
</g>
<g >
<title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (180 samples, 0.21%)</title><rect x="1046.4" y="661" width="2.4" height="15.0" fill="rgb(244,12,43)" rx="2" ry="2" />
<text  x="1049.38" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;, std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt;, std::_Select1st&lt;std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt; &gt;, std::less&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; &gt;, std::allocator&lt;std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt; &gt; &gt;::lower_bound (14 samples, 0.02%)</title><rect x="1062.0" y="645" width="0.2" height="15.0" fill="rgb(217,187,36)" rx="2" ry="2" />
<text  x="1065.02" y="655.5" ></text>
</g>
<g >
<title>std::equal_to&lt;uint256&gt;::operator (22 samples, 0.03%)</title><rect x="962.0" y="533" width="0.3" height="15.0" fill="rgb(225,73,42)" rx="2" ry="2" />
<text  x="964.98" y="543.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="355.0" y="565" width="0.2" height="15.0" fill="rgb(233,159,12)" rx="2" ry="2" />
<text  x="358.03" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_S_max_size (8 samples, 0.01%)</title><rect x="483.3" y="293" width="0.1" height="15.0" fill="rgb(205,28,49)" rx="2" ry="2" />
<text  x="486.26" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (102 samples, 0.12%)</title><rect x="859.7" y="341" width="1.3" height="15.0" fill="rgb(254,48,1)" rx="2" ry="2" />
<text  x="862.66" y="351.5" ></text>
</g>
<g >
<title>__bam_get_root (36 samples, 0.04%)</title><rect x="149.7" y="469" width="0.5" height="15.0" fill="rgb(243,101,23)" rx="2" ry="2" />
<text  x="152.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt;::_M_next (39 samples, 0.04%)</title><rect x="840.6" y="549" width="0.6" height="15.0" fill="rgb(228,229,14)" rx="2" ry="2" />
<text  x="843.64" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (86 samples, 0.10%)</title><rect x="584.4" y="629" width="1.2" height="15.0" fill="rgb(218,16,19)" rx="2" ry="2" />
<text  x="587.41" y="639.5" ></text>
</g>
<g >
<title>std::mutex::unlock (11 samples, 0.01%)</title><rect x="830.4" y="549" width="0.1" height="15.0" fill="rgb(237,128,45)" rx="2" ry="2" />
<text  x="833.39" y="559.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 0.01%)</title><rect x="99.4" y="261" width="0.1" height="15.0" fill="rgb(224,169,33)" rx="2" ry="2" />
<text  x="102.37" y="271.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;char, std::move_iterator&lt;char*&gt; &gt; (165 samples, 0.19%)</title><rect x="315.1" y="597" width="2.3" height="15.0" fill="rgb(239,141,8)" rx="2" ry="2" />
<text  x="318.14" y="607.5" ></text>
</g>
<g >
<title>std::recursive_mutex::unlock (26 samples, 0.03%)</title><rect x="986.0" y="549" width="0.3" height="15.0" fill="rgb(206,26,42)" rx="2" ry="2" />
<text  x="988.96" y="559.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::shared_ptr&lt;CTransaction const&gt;&amp;&gt; (328 samples, 0.37%)</title><rect x="180.9" y="741" width="4.5" height="15.0" fill="rgb(217,88,16)" rx="2" ry="2" />
<text  x="183.93" y="751.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (18 samples, 0.02%)</title><rect x="1129.1" y="629" width="0.3" height="15.0" fill="rgb(226,79,11)" rx="2" ry="2" />
<text  x="1132.14" y="639.5" ></text>
</g>
<g >
<title>CHashWriter::write (14 samples, 0.02%)</title><rect x="553.3" y="69" width="0.2" height="15.0" fill="rgb(235,9,23)" rx="2" ry="2" />
<text  x="556.31" y="79.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (92 samples, 0.11%)</title><rect x="552.7" y="165" width="1.2" height="15.0" fill="rgb(247,163,45)" rx="2" ry="2" />
<text  x="555.66" y="175.5" ></text>
</g>
<g >
<title>__db_lget (78 samples, 0.09%)</title><rect x="108.4" y="405" width="1.1" height="15.0" fill="rgb(215,173,30)" rx="2" ry="2" />
<text  x="111.42" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (11 samples, 0.01%)</title><rect x="79.1" y="453" width="0.2" height="15.0" fill="rgb(210,58,47)" rx="2" ry="2" />
<text  x="82.12" y="463.5" ></text>
</g>
<g >
<title>CDataStream::read (14 samples, 0.02%)</title><rect x="572.4" y="549" width="0.1" height="15.0" fill="rgb(250,43,0)" rx="2" ry="2" />
<text  x="575.36" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10 samples, 0.01%)</title><rect x="1081.6" y="533" width="0.2" height="15.0" fill="rgb(239,208,6)" rx="2" ry="2" />
<text  x="1084.64" y="543.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (69 samples, 0.08%)</title><rect x="330.2" y="629" width="1.0" height="15.0" fill="rgb(251,10,21)" rx="2" ry="2" />
<text  x="333.22" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (8 samples, 0.01%)</title><rect x="882.0" y="581" width="0.1" height="15.0" fill="rgb(223,125,4)" rx="2" ry="2" />
<text  x="885.03" y="591.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="325" width="3.8" height="15.0" fill="rgb(251,29,38)" rx="2" ry="2" />
<text  x="1142.99" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTransaction&gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="533" width="13.8" height="15.0" fill="rgb(252,227,52)" rx="2" ry="2" />
<text  x="1107.95" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_equals (78 samples, 0.09%)</title><rect x="920.5" y="533" width="1.1" height="15.0" fill="rgb(230,195,54)" rx="2" ry="2" />
<text  x="923.54" y="543.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (386 samples, 0.44%)</title><rect x="1113.6" y="325" width="5.2" height="15.0" fill="rgb(230,144,50)" rx="2" ry="2" />
<text  x="1116.56" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (13 samples, 0.01%)</title><rect x="888.6" y="613" width="0.1" height="15.0" fill="rgb(248,172,11)" rx="2" ry="2" />
<text  x="891.55" y="623.5" ></text>
</g>
<g >
<title>CDataStream::read (56 samples, 0.06%)</title><rect x="43.9" y="517" width="0.7" height="15.0" fill="rgb(227,173,31)" rx="2" ry="2" />
<text  x="46.85" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (8 samples, 0.01%)</title><rect x="860.6" y="277" width="0.1" height="15.0" fill="rgb(214,71,20)" rx="2" ry="2" />
<text  x="863.59" y="287.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (10 samples, 0.01%)</title><rect x="100.3" y="389" width="0.2" height="15.0" fill="rgb(231,78,3)" rx="2" ry="2" />
<text  x="103.34" y="399.5" ></text>
</g>
<g >
<title>ChainActive (13 samples, 0.01%)</title><rect x="57.4" y="613" width="0.2" height="15.0" fill="rgb(247,201,48)" rx="2" ry="2" />
<text  x="60.45" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_impl::~_Vector_impl (20 samples, 0.02%)</title><rect x="1091.7" y="645" width="0.3" height="15.0" fill="rgb(244,124,22)" rx="2" ry="2" />
<text  x="1094.69" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (33 samples, 0.04%)</title><rect x="1037.9" y="661" width="0.4" height="15.0" fill="rgb(206,113,18)" rx="2" ry="2" />
<text  x="1040.89" y="671.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (11 samples, 0.01%)</title><rect x="155.0" y="453" width="0.2" height="15.0" fill="rgb(231,13,43)" rx="2" ry="2" />
<text  x="158.03" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty (32 samples, 0.04%)</title><rect x="1104.2" y="693" width="0.4" height="15.0" fill="rgb(254,159,35)" rx="2" ry="2" />
<text  x="1107.17" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (1,030 samples, 1.18%)</title><rect x="1105.0" y="565" width="13.8" height="15.0" fill="rgb(236,77,47)" rx="2" ry="2" />
<text  x="1107.95" y="575.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, COutPoint&gt; (122 samples, 0.14%)</title><rect x="1027.6" y="453" width="1.6" height="15.0" fill="rgb(242,175,36)" rx="2" ry="2" />
<text  x="1030.56" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (12 samples, 0.01%)</title><rect x="1082.3" y="533" width="0.2" height="15.0" fill="rgb(213,78,51)" rx="2" ry="2" />
<text  x="1085.30" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (32 samples, 0.04%)</title><rect x="898.7" y="565" width="0.5" height="15.0" fill="rgb(205,120,33)" rx="2" ry="2" />
<text  x="901.73" y="575.5" ></text>
</g>
<g >
<title>CKeyMetadata::Unserialize&lt;CDataStream&gt; (643 samples, 0.73%)</title><rect x="395.0" y="645" width="8.7" height="15.0" fill="rgb(222,68,7)" rx="2" ry="2" />
<text  x="397.99" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_Vector_impl::_Vector_impl (9 samples, 0.01%)</title><rect x="685.1" y="613" width="0.1" height="15.0" fill="rgb(245,3,17)" rx="2" ry="2" />
<text  x="688.12" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::end (9 samples, 0.01%)</title><rect x="884.7" y="613" width="0.1" height="15.0" fill="rgb(224,210,8)" rx="2" ry="2" />
<text  x="887.66" y="623.5" ></text>
</g>
<g >
<title>CSHA256::Write (16 samples, 0.02%)</title><rect x="522.2" y="373" width="0.3" height="15.0" fill="rgb(251,119,51)" rx="2" ry="2" />
<text  x="525.24" y="383.5" ></text>
</g>
<g >
<title>CDataStream::write (11 samples, 0.01%)</title><rect x="14.7" y="757" width="0.2" height="15.0" fill="rgb(239,89,46)" rx="2" ry="2" />
<text  x="17.70" y="767.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (59 samples, 0.07%)</title><rect x="523.8" y="309" width="0.8" height="15.0" fill="rgb(207,162,36)" rx="2" ry="2" />
<text  x="526.79" y="319.5" ></text>
</g>
<g >
<title>CScriptWitness::IsNull (49 samples, 0.06%)</title><rect x="516.2" y="389" width="0.7" height="15.0" fill="rgb(248,63,24)" rx="2" ry="2" />
<text  x="519.19" y="399.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.04%)</title><rect x="928.7" y="517" width="0.4" height="15.0" fill="rgb(222,61,11)" rx="2" ry="2" />
<text  x="931.70" y="527.5" ></text>
</g>
<g >
<title>EnterCritical (534 samples, 0.61%)</title><rect x="828.3" y="597" width="7.2" height="15.0" fill="rgb(249,188,18)" rx="2" ry="2" />
<text  x="831.33" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (16 samples, 0.02%)</title><rect x="1063.3" y="661" width="0.3" height="15.0" fill="rgb(225,26,22)" rx="2" ry="2" />
<text  x="1066.34" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (51 samples, 0.06%)</title><rect x="43.9" y="469" width="0.7" height="15.0" fill="rgb(231,153,12)" rx="2" ry="2" />
<text  x="46.92" y="479.5" ></text>
</g>
<g >
<title>__bswap_64 (10 samples, 0.01%)</title><rect x="1189.2" y="549" width="0.2" height="15.0" fill="rgb(246,139,17)" rx="2" ry="2" />
<text  x="1192.25" y="559.5" ></text>
</g>
<g >
<title>__db_cursor_int (26 samples, 0.03%)</title><rect x="137.7" y="517" width="0.3" height="15.0" fill="rgb(237,15,15)" rx="2" ry="2" />
<text  x="140.66" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (8 samples, 0.01%)</title><rect x="1032.1" y="533" width="0.1" height="15.0" fill="rgb(253,57,26)" rx="2" ry="2" />
<text  x="1035.06" y="543.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt; (39 samples, 0.04%)</title><rect x="982.7" y="597" width="0.5" height="15.0" fill="rgb(218,167,31)" rx="2" ry="2" />
<text  x="985.67" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (119 samples, 0.14%)</title><rect x="552.4" y="229" width="1.6" height="15.0" fill="rgb(237,137,38)" rx="2" ry="2" />
<text  x="555.40" y="239.5" ></text>
</g>
<g >
<title>__subvdi3 (9 samples, 0.01%)</title><rect x="499.4" y="293" width="0.1" height="15.0" fill="rgb(239,37,13)" rx="2" ry="2" />
<text  x="502.40" y="303.5" ></text>
</g>
<g >
<title>CSHA256::Write (15 samples, 0.02%)</title><rect x="546.2" y="69" width="0.2" height="15.0" fill="rgb(253,101,31)" rx="2" ry="2" />
<text  x="549.20" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (49 samples, 0.06%)</title><rect x="499.9" y="261" width="0.6" height="15.0" fill="rgb(246,212,29)" rx="2" ry="2" />
<text  x="502.87" y="271.5" ></text>
</g>
<g >
<title>__dbc_close (52 samples, 0.06%)</title><rect x="116.7" y="469" width="0.7" height="15.0" fill="rgb(226,56,27)" rx="2" ry="2" />
<text  x="119.74" y="479.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::operator/= (63 samples, 0.07%)</title><rect x="50.3" y="645" width="0.8" height="15.0" fill="rgb(230,154,3)" rx="2" ry="2" />
<text  x="53.27" y="655.5" ></text>
</g>
<g >
<title>util::ThreadGetInternalName[abi:cxx11] (29 samples, 0.03%)</title><rect x="880.8" y="597" width="0.4" height="15.0" fill="rgb(229,195,39)" rx="2" ry="2" />
<text  x="883.84" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (62 samples, 0.07%)</title><rect x="888.7" y="597" width="0.9" height="15.0" fill="rgb(254,64,34)" rx="2" ry="2" />
<text  x="891.73" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20 samples, 0.02%)</title><rect x="987.4" y="613" width="0.3" height="15.0" fill="rgb(221,128,15)" rx="2" ry="2" />
<text  x="990.41" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (53 samples, 0.06%)</title><rect x="43.9" y="485" width="0.7" height="15.0" fill="rgb(240,210,4)" rx="2" ry="2" />
<text  x="46.89" y="495.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (8 samples, 0.01%)</title><rect x="1146.0" y="597" width="0.1" height="15.0" fill="rgb(250,91,42)" rx="2" ry="2" />
<text  x="1148.99" y="607.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::GetUint64 (29 samples, 0.03%)</title><rect x="913.4" y="549" width="0.4" height="15.0" fill="rgb(219,153,34)" rx="2" ry="2" />
<text  x="916.39" y="559.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (127 samples, 0.15%)</title><rect x="1121.8" y="629" width="1.7" height="15.0" fill="rgb(208,131,18)" rx="2" ry="2" />
<text  x="1124.82" y="639.5" ></text>
</g>
<g >
<title>__db_lput (311 samples, 0.36%)</title><rect x="365.3" y="581" width="4.1" height="15.0" fill="rgb(225,139,18)" rx="2" ry="2" />
<text  x="368.26" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_M_valptr (18 samples, 0.02%)</title><rect x="611.8" y="501" width="0.3" height="15.0" fill="rgb(209,188,24)" rx="2" ry="2" />
<text  x="614.82" y="511.5" ></text>
</g>
<g >
<title>std::multimap&lt;CBlockIndex*, CBlockIndex*, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::equal_range (74 samples, 0.08%)</title><rect x="53.2" y="677" width="1.0" height="15.0" fill="rgb(235,213,32)" rx="2" ry="2" />
<text  x="56.19" y="687.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, COutPoint&gt; (108 samples, 0.12%)</title><rect x="545.8" y="213" width="1.4" height="15.0" fill="rgb(214,117,9)" rx="2" ry="2" />
<text  x="548.77" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (18 samples, 0.02%)</title><rect x="1005.1" y="613" width="0.2" height="15.0" fill="rgb(249,101,10)" rx="2" ry="2" />
<text  x="1008.05" y="623.5" ></text>
</g>
<g >
<title>__GI_strtoll (17 samples, 0.02%)</title><rect x="577.4" y="597" width="0.2" height="15.0" fill="rgb(249,46,51)" rx="2" ry="2" />
<text  x="580.37" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_Hash_node_value_base (9 samples, 0.01%)</title><rect x="996.0" y="581" width="0.1" height="15.0" fill="rgb(230,13,14)" rx="2" ry="2" />
<text  x="999.02" y="591.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (164 samples, 0.19%)</title><rect x="183.1" y="325" width="2.3" height="15.0" fill="rgb(246,155,32)" rx="2" ry="2" />
<text  x="186.14" y="335.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, unsigned int, std::allocator&lt;unsigned int&gt; &gt; (200 samples, 0.23%)</title><rect x="395.8" y="501" width="2.7" height="15.0" fill="rgb(222,214,9)" rx="2" ry="2" />
<text  x="398.80" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (9 samples, 0.01%)</title><rect x="386.4" y="661" width="0.2" height="15.0" fill="rgb(211,40,29)" rx="2" ry="2" />
<text  x="389.44" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, unsigned long&gt;, char*, unsigned long&amp;&gt; (10 samples, 0.01%)</title><rect x="616.9" y="453" width="0.2" height="15.0" fill="rgb(231,83,33)" rx="2" ry="2" />
<text  x="619.94" y="463.5" ></text>
</g>
<g >
<title>push_lock (490 samples, 0.56%)</title><rect x="727.5" y="597" width="6.6" height="15.0" fill="rgb(227,153,34)" rx="2" ry="2" />
<text  x="730.46" y="607.5" ></text>
</g>
<g >
<title>__memp_fget (18 samples, 0.02%)</title><rect x="159.3" y="469" width="0.3" height="15.0" fill="rgb(247,169,0)" rx="2" ry="2" />
<text  x="162.34" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (13 samples, 0.01%)</title><rect x="497.8" y="277" width="0.2" height="15.0" fill="rgb(218,71,42)" rx="2" ry="2" />
<text  x="500.82" y="287.5" ></text>
</g>
<g >
<title>CPubKey::GetID (1,402 samples, 1.60%)</title><rect x="766.9" y="613" width="18.9" height="15.0" fill="rgb(207,63,37)" rx="2" ry="2" />
<text  x="769.88" y="623.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (9 samples, 0.01%)</title><rect x="542.8" y="373" width="0.1" height="15.0" fill="rgb(240,51,36)" rx="2" ry="2" />
<text  x="545.81" y="383.5" ></text>
</g>
<g >
<title>__db_vrfy_ccset (541 samples, 0.62%)</title><rect x="81.4" y="501" width="7.3" height="15.0" fill="rgb(214,148,44)" rx="2" ry="2" />
<text  x="84.37" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::end (11 samples, 0.01%)</title><rect x="516.7" y="357" width="0.2" height="15.0" fill="rgb(249,150,28)" rx="2" ry="2" />
<text  x="519.70" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (88 samples, 0.10%)</title><rect x="730.6" y="533" width="1.1" height="15.0" fill="rgb(252,87,19)" rx="2" ry="2" />
<text  x="733.56" y="543.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (28 samples, 0.03%)</title><rect x="1097.7" y="565" width="0.4" height="15.0" fill="rgb(250,97,39)" rx="2" ry="2" />
<text  x="1100.70" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (8 samples, 0.01%)</title><rect x="116.9" y="389" width="0.1" height="15.0" fill="rgb(221,72,53)" rx="2" ry="2" />
<text  x="119.89" y="399.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::WalletClientImpl::verify (9,138 samples, 10.44%)</title><rect x="57.8" y="725" width="123.1" height="15.0" fill="rgb(234,77,23)" rx="2" ry="2" />
<text  x="60.79" y="735.5" >interfaces::(an..</text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (445 samples, 0.51%)</title><rect x="106.7" y="437" width="6.0" height="15.0" fill="rgb(231,131,12)" rx="2" ry="2" />
<text  x="109.70" y="447.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (40 samples, 0.05%)</title><rect x="538.2" y="213" width="0.5" height="15.0" fill="rgb(239,110,22)" rx="2" ry="2" />
<text  x="541.20" y="223.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::IsNull (71 samples, 0.08%)</title><rect x="35.9" y="597" width="1.0" height="15.0" fill="rgb(243,67,35)" rx="2" ry="2" />
<text  x="38.94" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="495.6" y="309" width="0.1" height="15.0" fill="rgb(244,197,22)" rx="2" ry="2" />
<text  x="498.60" y="319.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, uint256&gt; (22 samples, 0.03%)</title><rect x="1028.3" y="373" width="0.3" height="15.0" fill="rgb(252,129,4)" rx="2" ry="2" />
<text  x="1031.34" y="383.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (12 samples, 0.01%)</title><rect x="1124.4" y="549" width="0.2" height="15.0" fill="rgb(254,31,26)" rx="2" ry="2" />
<text  x="1127.44" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned char&gt;::~allocator (9 samples, 0.01%)</title><rect x="1091.8" y="613" width="0.2" height="15.0" fill="rgb(234,192,32)" rx="2" ry="2" />
<text  x="1094.84" y="623.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (29 samples, 0.03%)</title><rect x="546.8" y="117" width="0.3" height="15.0" fill="rgb(242,77,31)" rx="2" ry="2" />
<text  x="549.76" y="127.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (31 samples, 0.04%)</title><rect x="163.7" y="501" width="0.4" height="15.0" fill="rgb(215,191,32)" rx="2" ry="2" />
<text  x="166.71" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_addr (9 samples, 0.01%)</title><rect x="927.8" y="517" width="0.1" height="15.0" fill="rgb(213,139,28)" rx="2" ry="2" />
<text  x="930.75" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (83 samples, 0.09%)</title><rect x="587.0" y="613" width="1.1" height="15.0" fill="rgb(247,144,11)" rx="2" ry="2" />
<text  x="589.96" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (53 samples, 0.06%)</title><rect x="203.9" y="613" width="0.7" height="15.0" fill="rgb(244,119,17)" rx="2" ry="2" />
<text  x="206.87" y="623.5" ></text>
</g>
<g >
<title>CSHA256::Write (11 samples, 0.01%)</title><rect x="549.5" y="149" width="0.1" height="15.0" fill="rgb(209,61,7)" rx="2" ry="2" />
<text  x="552.45" y="159.5" ></text>
</g>
<g >
<title>__memp_fget (58 samples, 0.07%)</title><rect x="76.1" y="469" width="0.8" height="15.0" fill="rgb(219,128,47)" rx="2" ry="2" />
<text  x="79.14" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator* (11 samples, 0.01%)</title><rect x="582.0" y="597" width="0.2" height="15.0" fill="rgb(250,146,31)" rx="2" ry="2" />
<text  x="585.04" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,863 samples, 2.13%)</title><rect x="843.7" y="597" width="25.1" height="15.0" fill="rgb(208,134,53)" rx="2" ry="2" />
<text  x="846.69" y="607.5" >s..</text>
</g>
<g >
<title>SerializeTransaction&lt;CSizeComputer, CTransaction&gt; (981 samples, 1.12%)</title><rect x="1023.9" y="597" width="13.2" height="15.0" fill="rgb(252,214,13)" rx="2" ry="2" />
<text  x="1026.91" y="607.5" ></text>
</g>
<g >
<title>CDBIterator::Next (70 samples, 0.08%)</title><rect x="44.8" y="661" width="1.0" height="15.0" fill="rgb(233,148,18)" rx="2" ry="2" />
<text  x="47.84" y="671.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.01%)</title><rect x="146.9" y="293" width="0.1" height="15.0" fill="rgb(245,104,16)" rx="2" ry="2" />
<text  x="149.86" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (87 samples, 0.10%)</title><rect x="410.5" y="517" width="1.2" height="15.0" fill="rgb(245,76,2)" rx="2" ry="2" />
<text  x="413.53" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (53 samples, 0.06%)</title><rect x="1102.5" y="677" width="0.7" height="15.0" fill="rgb(222,204,34)" rx="2" ry="2" />
<text  x="1105.51" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::_S_destroy&lt;secure_allocator&lt;unsigned char&gt;, unsigned char&gt; (45 samples, 0.05%)</title><rect x="672.4" y="613" width="0.6" height="15.0" fill="rgb(205,198,34)" rx="2" ry="2" />
<text  x="675.43" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;, true&gt; (8 samples, 0.01%)</title><rect x="855.7" y="293" width="0.1" height="15.0" fill="rgb(245,93,45)" rx="2" ry="2" />
<text  x="858.67" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (354 samples, 0.40%)</title><rect x="957.6" y="597" width="4.8" height="15.0" fill="rgb(231,48,15)" rx="2" ry="2" />
<text  x="960.60" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (29 samples, 0.03%)</title><rect x="1059.4" y="549" width="0.4" height="15.0" fill="rgb(242,108,36)" rx="2" ry="2" />
<text  x="1062.42" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_M_valptr (14 samples, 0.02%)</title><rect x="652.6" y="533" width="0.2" height="15.0" fill="rgb(252,112,35)" rx="2" ry="2" />
<text  x="655.64" y="543.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (15 samples, 0.02%)</title><rect x="562.2" y="325" width="0.2" height="15.0" fill="rgb(216,114,1)" rx="2" ry="2" />
<text  x="565.19" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.01%)</title><rect x="1164.1" y="757" width="0.1" height="15.0" fill="rgb(245,81,8)" rx="2" ry="2" />
<text  x="1167.07" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (9 samples, 0.01%)</title><rect x="461.5" y="549" width="0.2" height="15.0" fill="rgb(235,141,7)" rx="2" ry="2" />
<text  x="464.53" y="559.5" ></text>
</g>
<g >
<title>CHash256::Write (8 samples, 0.01%)</title><rect x="562.3" y="277" width="0.1" height="15.0" fill="rgb(227,140,41)" rx="2" ry="2" />
<text  x="565.28" y="287.5" ></text>
</g>
<g >
<title>__dbc_cleanup (11 samples, 0.01%)</title><rect x="121.2" y="453" width="0.2" height="15.0" fill="rgb(228,107,45)" rx="2" ry="2" />
<text  x="124.22" y="463.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;char*&gt;::base (45 samples, 0.05%)</title><rect x="318.5" y="549" width="0.6" height="15.0" fill="rgb(236,201,48)" rx="2" ry="2" />
<text  x="321.50" y="559.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (9 samples, 0.01%)</title><rect x="1126.5" y="549" width="0.1" height="15.0" fill="rgb(229,131,37)" rx="2" ry="2" />
<text  x="1129.51" y="559.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::emplace&lt;unsigned long&amp;, char*&amp;&gt; (129 samples, 0.15%)</title><rect x="674.0" y="549" width="1.8" height="15.0" fill="rgb(209,134,31)" rx="2" ry="2" />
<text  x="677.04" y="559.5" ></text>
</g>
<g >
<title>DecodeBase58 (181 samples, 0.21%)</title><rect x="1050.4" y="629" width="2.5" height="15.0" fill="rgb(235,43,4)" rx="2" ry="2" />
<text  x="1053.41" y="639.5" ></text>
</g>
<g >
<title>std::operator== (12 samples, 0.01%)</title><rect x="853.7" y="389" width="0.2" height="15.0" fill="rgb(241,195,9)" rx="2" ry="2" />
<text  x="856.70" y="399.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (21 samples, 0.02%)</title><rect x="1167.0" y="741" width="0.3" height="15.0" fill="rgb(207,226,39)" rx="2" ry="2" />
<text  x="1170.00" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::end (20 samples, 0.02%)</title><rect x="558.8" y="245" width="0.3" height="15.0" fill="rgb(216,144,12)" rx="2" ry="2" />
<text  x="561.79" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="533.8" y="293" width="0.2" height="15.0" fill="rgb(213,170,26)" rx="2" ry="2" />
<text  x="536.85" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::~vector (992 samples, 1.13%)</title><rect x="671.1" y="661" width="13.4" height="15.0" fill="rgb(249,16,5)" rx="2" ry="2" />
<text  x="674.09" y="671.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (19 samples, 0.02%)</title><rect x="806.0" y="597" width="0.2" height="15.0" fill="rgb(227,1,12)" rx="2" ry="2" />
<text  x="808.98" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;COutPoint const&amp;&gt; (9 samples, 0.01%)</title><rect x="1045.0" y="629" width="0.1" height="15.0" fill="rgb(254,9,36)" rx="2" ry="2" />
<text  x="1048.01" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (31 samples, 0.04%)</title><rect x="563.5" y="341" width="0.4" height="15.0" fill="rgb(212,176,23)" rx="2" ry="2" />
<text  x="566.45" y="351.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock (21 samples, 0.02%)</title><rect x="734.2" y="613" width="0.3" height="15.0" fill="rgb(252,91,18)" rx="2" ry="2" />
<text  x="737.21" y="623.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;&amp;&gt; (207 samples, 0.24%)</title><rect x="395.7" y="517" width="2.8" height="15.0" fill="rgb(226,193,54)" rx="2" ry="2" />
<text  x="398.74" y="527.5" ></text>
</g>
<g >
<title>__db_retcopy (8 samples, 0.01%)</title><rect x="73.0" y="517" width="0.1" height="15.0" fill="rgb(216,59,22)" rx="2" ry="2" />
<text  x="76.04" y="527.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (391 samples, 0.45%)</title><rect x="1113.6" y="389" width="5.2" height="15.0" fill="rgb(221,106,42)" rx="2" ry="2" />
<text  x="1116.56" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (110 samples, 0.13%)</title><rect x="899.3" y="565" width="1.5" height="15.0" fill="rgb(222,45,17)" rx="2" ry="2" />
<text  x="902.31" y="575.5" ></text>
</g>
<g >
<title>CWallet::LoadKey (10,496 samples, 11.99%)</title><rect x="740.9" y="677" width="141.4" height="15.0" fill="rgb(222,39,39)" rx="2" ry="2" />
<text  x="743.87" y="687.5" >CWallet::LoadKey</text>
</g>
<g >
<title>__os_io (35 samples, 0.04%)</title><rect x="357.0" y="565" width="0.5" height="15.0" fill="rgb(215,15,44)" rx="2" ry="2" />
<text  x="360.04" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_valptr (10 samples, 0.01%)</title><rect x="900.0" y="501" width="0.1" height="15.0" fill="rgb(250,180,22)" rx="2" ry="2" />
<text  x="902.97" y="511.5" ></text>
</g>
<g >
<title>std::__distance&lt;char const*&gt; (14 samples, 0.02%)</title><rect x="585.3" y="597" width="0.2" height="15.0" fill="rgb(243,104,11)" rx="2" ry="2" />
<text  x="588.30" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (172 samples, 0.20%)</title><rect x="932.5" y="629" width="2.3" height="15.0" fill="rgb(230,168,11)" rx="2" ry="2" />
<text  x="935.50" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::vector (68 samples, 0.08%)</title><rect x="1018.4" y="661" width="0.9" height="15.0" fill="rgb(245,193,47)" rx="2" ry="2" />
<text  x="1021.42" y="671.5" ></text>
</g>
<g >
<title>__memp_bhfree (44 samples, 0.05%)</title><rect x="356.3" y="565" width="0.6" height="15.0" fill="rgb(236,10,5)" rx="2" ry="2" />
<text  x="359.34" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="616.8" y="405" width="0.1" height="15.0" fill="rgb(241,43,43)" rx="2" ry="2" />
<text  x="619.83" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator+ (12 samples, 0.01%)</title><rect x="1099.8" y="581" width="0.2" height="15.0" fill="rgb(231,45,47)" rx="2" ry="2" />
<text  x="1102.82" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (13 samples, 0.01%)</title><rect x="1000.8" y="469" width="0.2" height="15.0" fill="rgb(235,141,36)" rx="2" ry="2" />
<text  x="1003.78" y="479.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (17 samples, 0.02%)</title><rect x="537.3" y="101" width="0.2" height="15.0" fill="rgb(208,52,21)" rx="2" ry="2" />
<text  x="540.28" y="111.5" ></text>
</g>
<g >
<title>__uint32_identity (16 samples, 0.02%)</title><rect x="724.5" y="549" width="0.2" height="15.0" fill="rgb(215,209,11)" rx="2" ry="2" />
<text  x="727.45" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt; &gt; (71 samples, 0.08%)</title><rect x="883.5" y="613" width="1.0" height="15.0" fill="rgb(213,50,46)" rx="2" ry="2" />
<text  x="886.54" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_check_len (62 samples, 0.07%)</title><rect x="492.6" y="325" width="0.9" height="15.0" fill="rgb(248,190,11)" rx="2" ry="2" />
<text  x="495.64" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (43 samples, 0.05%)</title><rect x="597.0" y="549" width="0.5" height="15.0" fill="rgb(218,23,39)" rx="2" ry="2" />
<text  x="599.95" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (26 samples, 0.03%)</title><rect x="891.4" y="565" width="0.4" height="15.0" fill="rgb(237,125,14)" rx="2" ry="2" />
<text  x="894.41" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool, true&gt; (12 samples, 0.01%)</title><rect x="1045.1" y="629" width="0.2" height="15.0" fill="rgb(225,195,47)" rx="2" ry="2" />
<text  x="1048.13" y="639.5" ></text>
</g>
<g >
<title>CHash160::Finalize (152 samples, 0.17%)</title><rect x="1123.5" y="629" width="2.1" height="15.0" fill="rgb(250,70,34)" rx="2" ry="2" />
<text  x="1126.54" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (14 samples, 0.02%)</title><rect x="349.9" y="581" width="0.2" height="15.0" fill="rgb(254,222,46)" rx="2" ry="2" />
<text  x="352.92" y="591.5" ></text>
</g>
<g >
<title>CHashWriter::write (44 samples, 0.05%)</title><rect x="530.7" y="101" width="0.6" height="15.0" fill="rgb(205,228,17)" rx="2" ry="2" />
<text  x="533.69" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_emplace&lt;std::pair&lt;COutPoint, uint256&gt; &gt; (1,151 samples, 1.31%)</title><rect x="915.0" y="581" width="15.5" height="15.0" fill="rgb(222,35,43)" rx="2" ry="2" />
<text  x="918.02" y="591.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction (3,452 samples, 3.94%)</title><rect x="518.8" y="453" width="46.6" height="15.0" fill="rgb(236,45,38)" rx="2" ry="2" />
<text  x="521.85" y="463.5" >CTra..</text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="357" width="4.2" height="15.0" fill="rgb(214,148,34)" rx="2" ry="2" />
<text  x="1138.80" y="367.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (33 samples, 0.04%)</title><rect x="477.2" y="165" width="0.5" height="15.0" fill="rgb(241,160,31)" rx="2" ry="2" />
<text  x="480.25" y="175.5" ></text>
</g>
<g >
<title>__dbc_close (37 samples, 0.04%)</title><rect x="70.0" y="533" width="0.5" height="15.0" fill="rgb(252,226,18)" rx="2" ry="2" />
<text  x="73.01" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_ptr (16 samples, 0.02%)</title><rect x="996.3" y="581" width="0.2" height="15.0" fill="rgb(218,123,53)" rx="2" ry="2" />
<text  x="999.27" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;COutPoint const, uint256&gt;::pair&lt;COutPoint, uint256, true&gt; (40 samples, 0.05%)</title><rect x="929.4" y="517" width="0.5" height="15.0" fill="rgb(226,0,52)" rx="2" ry="2" />
<text  x="932.40" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_M_upper_bound (10 samples, 0.01%)</title><rect x="53.6" y="645" width="0.1" height="15.0" fill="rgb(223,156,40)" rx="2" ry="2" />
<text  x="56.55" y="655.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CSizeComputer, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (293 samples, 0.33%)</title><rect x="1033.0" y="549" width="4.0" height="15.0" fill="rgb(218,151,51)" rx="2" ry="2" />
<text  x="1036.03" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt;::construct&lt;std::pair&lt;uint256 const, CWalletTx&gt;, uint256&amp;, CWalletTx&amp;&gt; (399 samples, 0.46%)</title><rect x="998.0" y="581" width="5.4" height="15.0" fill="rgb(225,85,4)" rx="2" ry="2" />
<text  x="1000.98" y="591.5" ></text>
</g>
<g >
<title>__lock_get_internal (14 samples, 0.02%)</title><rect x="155.2" y="437" width="0.2" height="15.0" fill="rgb(214,212,53)" rx="2" ry="2" />
<text  x="158.21" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="1003.0" y="517" width="0.2" height="15.0" fill="rgb(210,23,1)" rx="2" ry="2" />
<text  x="1006.02" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr (59 samples, 0.07%)</title><rect x="1000.2" y="533" width="0.8" height="15.0" fill="rgb(230,181,6)" rx="2" ry="2" />
<text  x="1003.16" y="543.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned char const*, unsigned char*&gt; (16 samples, 0.02%)</title><rect x="816.0" y="373" width="0.2" height="15.0" fill="rgb(235,185,23)" rx="2" ry="2" />
<text  x="819.02" y="383.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (1,321 samples, 1.51%)</title><rect x="522.7" y="405" width="17.8" height="15.0" fill="rgb(251,15,2)" rx="2" ry="2" />
<text  x="525.69" y="415.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;char*&gt;::move_iterator (99 samples, 0.11%)</title><rect x="316.0" y="581" width="1.4" height="15.0" fill="rgb(250,3,18)" rx="2" ry="2" />
<text  x="319.03" y="591.5" ></text>
</g>
<g >
<title>CHash256::Write (13 samples, 0.01%)</title><rect x="528.0" y="85" width="0.2" height="15.0" fill="rgb(241,64,49)" rx="2" ry="2" />
<text  x="531.00" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10 samples, 0.01%)</title><rect x="675.9" y="533" width="0.1" height="15.0" fill="rgb(250,10,3)" rx="2" ry="2" />
<text  x="678.90" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (51 samples, 0.06%)</title><rect x="856.7" y="341" width="0.7" height="15.0" fill="rgb(208,195,16)" rx="2" ry="2" />
<text  x="859.67" y="351.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*&gt; (74 samples, 0.08%)</title><rect x="1093.3" y="613" width="1.0" height="15.0" fill="rgb(212,8,5)" rx="2" ry="2" />
<text  x="1096.28" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (13 samples, 0.01%)</title><rect x="201.4" y="613" width="0.2" height="15.0" fill="rgb(208,62,5)" rx="2" ry="2" />
<text  x="204.44" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (71 samples, 0.08%)</title><rect x="679.9" y="517" width="1.0" height="15.0" fill="rgb(205,41,38)" rx="2" ry="2" />
<text  x="682.94" y="527.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, char&gt; (27 samples, 0.03%)</title><rect x="403.3" y="581" width="0.3" height="15.0" fill="rgb(249,189,44)" rx="2" ry="2" />
<text  x="406.27" y="591.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (311 samples, 0.36%)</title><rect x="1135.8" y="181" width="4.2" height="15.0" fill="rgb(222,205,44)" rx="2" ry="2" />
<text  x="1138.80" y="191.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, COutPoint&gt; (115 samples, 0.13%)</title><rect x="545.7" y="245" width="1.6" height="15.0" fill="rgb(252,151,25)" rx="2" ry="2" />
<text  x="548.72" y="255.5" ></text>
</g>
<g >
<title>__db_vrfy_ccnext (38 samples, 0.04%)</title><rect x="80.9" y="501" width="0.5" height="15.0" fill="rgb(209,157,30)" rx="2" ry="2" />
<text  x="83.86" y="511.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (17 samples, 0.02%)</title><rect x="152.7" y="469" width="0.2" height="15.0" fill="rgb(220,53,49)" rx="2" ry="2" />
<text  x="155.67" y="479.5" ></text>
</g>
<g >
<title>CScript::~CScript (13 samples, 0.01%)</title><rect x="470.2" y="357" width="0.2" height="15.0" fill="rgb(251,211,11)" rx="2" ry="2" />
<text  x="473.18" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_base (35 samples, 0.04%)</title><rect x="564.9" y="421" width="0.5" height="15.0" fill="rgb(235,55,26)" rx="2" ry="2" />
<text  x="567.89" y="431.5" ></text>
</g>
<g >
<title>uint256::uint256 (10 samples, 0.01%)</title><rect x="469.1" y="341" width="0.2" height="15.0" fill="rgb(208,173,36)" rx="2" ry="2" />
<text  x="472.15" y="351.5" ></text>
</g>
<g >
<title>_int_free (20 samples, 0.02%)</title><rect x="59.1" y="533" width="0.2" height="15.0" fill="rgb(250,95,23)" rx="2" ry="2" />
<text  x="62.08" y="543.5" ></text>
</g>
<g >
<title>boost::detail::variant::visitation_impl_invoke_impl&lt;boost::detail::variant::destroyer, void*, WitnessV0KeyHash&gt; (15 samples, 0.02%)</title><rect x="818.4" y="517" width="0.2" height="15.0" fill="rgb(241,171,14)" rx="2" ry="2" />
<text  x="821.38" y="527.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (32 samples, 0.04%)</title><rect x="448.4" y="533" width="0.4" height="15.0" fill="rgb(232,222,41)" rx="2" ry="2" />
<text  x="451.35" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;char*, char*, zero_after_free_allocator&lt;char&gt; &gt; (338 samples, 0.39%)</title><rect x="314.5" y="613" width="4.6" height="15.0" fill="rgb(251,175,18)" rx="2" ry="2" />
<text  x="317.55" y="623.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_Tuple_impl (9 samples, 0.01%)</title><rect x="947.1" y="549" width="0.1" height="15.0" fill="rgb(226,41,7)" rx="2" ry="2" />
<text  x="950.08" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (15 samples, 0.02%)</title><rect x="1100.9" y="645" width="0.2" height="15.0" fill="rgb(209,2,1)" rx="2" ry="2" />
<text  x="1103.87" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_addr (19 samples, 0.02%)</title><rect x="969.6" y="549" width="0.3" height="15.0" fill="rgb(241,87,40)" rx="2" ry="2" />
<text  x="972.62" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (23 samples, 0.03%)</title><rect x="449.3" y="581" width="0.4" height="15.0" fill="rgb(205,175,38)" rx="2" ry="2" />
<text  x="452.35" y="591.5" ></text>
</g>
<g >
<title>CHash256::Finalize (245 samples, 0.28%)</title><rect x="1127.6" y="709" width="3.3" height="15.0" fill="rgb(240,146,26)" rx="2" ry="2" />
<text  x="1130.58" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_Rb_tree_iterator (32 samples, 0.04%)</title><rect x="853.2" y="341" width="0.4" height="15.0" fill="rgb(242,226,25)" rx="2" ry="2" />
<text  x="856.18" y="351.5" ></text>
</g>
<g >
<title>WriteLE32 (22 samples, 0.03%)</title><rect x="764.3" y="565" width="0.3" height="15.0" fill="rgb(252,112,2)" rx="2" ry="2" />
<text  x="767.34" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_put_node (12 samples, 0.01%)</title><rect x="851.9" y="325" width="0.1" height="15.0" fill="rgb(232,11,37)" rx="2" ry="2" />
<text  x="854.86" y="335.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (11 samples, 0.01%)</title><rect x="706.1" y="549" width="0.1" height="15.0" fill="rgb(230,226,43)" rx="2" ry="2" />
<text  x="709.08" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (17 samples, 0.02%)</title><rect x="544.5" y="261" width="0.3" height="15.0" fill="rgb(232,150,43)" rx="2" ry="2" />
<text  x="547.55" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (10 samples, 0.01%)</title><rect x="841.4" y="581" width="0.1" height="15.0" fill="rgb(242,221,48)" rx="2" ry="2" />
<text  x="844.41" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="613" width="13.8" height="15.0" fill="rgb(244,28,8)" rx="2" ry="2" />
<text  x="1107.95" y="623.5" ></text>
</g>
<g >
<title>ShiftMessageB (14 samples, 0.02%)</title><rect x="185.0" y="149" width="0.2" height="15.0" fill="rgb(219,54,50)" rx="2" ry="2" />
<text  x="188.00" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (13 samples, 0.01%)</title><rect x="580.6" y="533" width="0.1" height="15.0" fill="rgb(206,92,4)" rx="2" ry="2" />
<text  x="583.55" y="543.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (13 samples, 0.01%)</title><rect x="1147.2" y="677" width="0.1" height="15.0" fill="rgb(249,170,10)" rx="2" ry="2" />
<text  x="1150.17" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_valptr (10 samples, 0.01%)</title><rect x="860.0" y="261" width="0.2" height="15.0" fill="rgb(219,88,38)" rx="2" ry="2" />
<text  x="863.05" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_default_append (1,621 samples, 1.85%)</title><rect x="845.9" y="485" width="21.8" height="15.0" fill="rgb(216,148,2)" rx="2" ry="2" />
<text  x="848.86" y="495.5" >s..</text>
</g>
<g >
<title>__lock_get (39 samples, 0.04%)</title><rect x="75.6" y="453" width="0.5" height="15.0" fill="rgb(230,151,23)" rx="2" ry="2" />
<text  x="78.62" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (8 samples, 0.01%)</title><rect x="544.6" y="229" width="0.1" height="15.0" fill="rgb(246,77,52)" rx="2" ry="2" />
<text  x="547.64" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="1148.8" y="757" width="0.1" height="15.0" fill="rgb(235,128,36)" rx="2" ry="2" />
<text  x="1151.82" y="767.5" ></text>
</g>
<g >
<title>__dbc_iget (16 samples, 0.02%)</title><rect x="1143.9" y="501" width="0.2" height="15.0" fill="rgb(248,210,11)" rx="2" ry="2" />
<text  x="1146.88" y="511.5" ></text>
</g>
<g >
<title>__lock_get_internal (14 samples, 0.02%)</title><rect x="153.8" y="437" width="0.1" height="15.0" fill="rgb(254,145,37)" rx="2" ry="2" />
<text  x="156.75" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (121 samples, 0.14%)</title><rect x="370.5" y="597" width="1.6" height="15.0" fill="rgb(217,195,53)" rx="2" ry="2" />
<text  x="373.46" y="607.5" ></text>
</g>
<g >
<title>BerkeleyBatch::SafeDbt::get_data (69 samples, 0.08%)</title><rect x="188.5" y="677" width="1.0" height="15.0" fill="rgb(229,169,44)" rx="2" ry="2" />
<text  x="191.55" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (8 samples, 0.01%)</title><rect x="1058.9" y="485" width="0.2" height="15.0" fill="rgb(228,177,54)" rx="2" ry="2" />
<text  x="1061.94" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::~pair (35 samples, 0.04%)</title><rect x="985.2" y="501" width="0.5" height="15.0" fill="rgb(235,42,38)" rx="2" ry="2" />
<text  x="988.20" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_destroy_node (62 samples, 0.07%)</title><rect x="589.5" y="549" width="0.8" height="15.0" fill="rgb(222,104,42)" rx="2" ry="2" />
<text  x="592.49" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (132 samples, 0.15%)</title><rect x="1046.8" y="629" width="1.8" height="15.0" fill="rgb(252,182,28)" rx="2" ry="2" />
<text  x="1049.78" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (11 samples, 0.01%)</title><rect x="133.1" y="453" width="0.2" height="15.0" fill="rgb(250,139,38)" rx="2" ry="2" />
<text  x="136.13" y="463.5" ></text>
</g>
<g >
<title>memory_cleanse (10 samples, 0.01%)</title><rect x="1091.6" y="597" width="0.1" height="15.0" fill="rgb(211,132,31)" rx="2" ry="2" />
<text  x="1094.56" y="607.5" ></text>
</g>
<g >
<title>__strlen_avx2 (20 samples, 0.02%)</title><rect x="937.6" y="501" width="0.3" height="15.0" fill="rgb(236,40,14)" rx="2" ry="2" />
<text  x="940.59" y="511.5" ></text>
</g>
<g >
<title>__db_get (62 samples, 0.07%)</title><rect x="162.7" y="549" width="0.8" height="15.0" fill="rgb(205,62,53)" rx="2" ry="2" />
<text  x="165.71" y="559.5" ></text>
</g>
<g >
<title>__memp_fput (37 samples, 0.04%)</title><rect x="147.0" y="469" width="0.5" height="15.0" fill="rgb(211,54,22)" rx="2" ry="2" />
<text  x="150.03" y="479.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (15 samples, 0.02%)</title><rect x="962.1" y="501" width="0.2" height="15.0" fill="rgb(244,86,17)" rx="2" ry="2" />
<text  x="965.08" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;CTxIn*, CTxIn&gt; (11 samples, 0.01%)</title><rect x="480.4" y="325" width="0.2" height="15.0" fill="rgb(251,102,18)" rx="2" ry="2" />
<text  x="483.44" y="335.5" ></text>
</g>
<g >
<title>__db_lget (40 samples, 0.05%)</title><rect x="166.9" y="485" width="0.5" height="15.0" fill="rgb(251,125,50)" rx="2" ry="2" />
<text  x="169.88" y="495.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="1094.3" y="565" width="0.2" height="15.0" fill="rgb(244,94,38)" rx="2" ry="2" />
<text  x="1097.35" y="575.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (8 samples, 0.01%)</title><rect x="1151.8" y="741" width="0.1" height="15.0" fill="rgb(252,222,32)" rx="2" ry="2" />
<text  x="1154.82" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;CKeyID const, CKey&gt;::pair&lt;CKeyID&amp;&amp;&gt; (9 samples, 0.01%)</title><rect x="1148.3" y="741" width="0.1" height="15.0" fill="rgb(212,138,19)" rx="2" ry="2" />
<text  x="1151.30" y="751.5" ></text>
</g>
<g >
<title>CSHA256::Write (361 samples, 0.41%)</title><rect x="1130.9" y="693" width="4.8" height="15.0" fill="rgb(208,120,3)" rx="2" ry="2" />
<text  x="1133.88" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (9 samples, 0.01%)</title><rect x="562.9" y="341" width="0.1" height="15.0" fill="rgb(228,30,37)" rx="2" ry="2" />
<text  x="565.93" y="351.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (284 samples, 0.32%)</title><rect x="1140.0" y="469" width="3.8" height="15.0" fill="rgb(210,36,2)" rx="2" ry="2" />
<text  x="1142.99" y="479.5" ></text>
</g>
<g >
<title>CWallet::LoadWallet (68,238 samples, 77.93%)</title><rect x="185.4" y="725" width="919.6" height="15.0" fill="rgb(225,136,42)" rx="2" ry="2" />
<text  x="188.37" y="735.5" >CWallet::LoadWallet</text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_const_cast (32 samples, 0.04%)</title><rect x="458.4" y="549" width="0.4" height="15.0" fill="rgb(219,55,50)" rx="2" ry="2" />
<text  x="461.39" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_find_before_node (406 samples, 0.46%)</title><rect x="916.1" y="549" width="5.5" height="15.0" fill="rgb(211,33,42)" rx="2" ry="2" />
<text  x="919.12" y="559.5" ></text>
</g>
<g >
<title>__os_io (16 samples, 0.02%)</title><rect x="1143.9" y="373" width="0.2" height="15.0" fill="rgb(227,110,45)" rx="2" ry="2" />
<text  x="1146.88" y="383.5" ></text>
</g>
<g >
<title>__db_cursor (21 samples, 0.02%)</title><rect x="116.5" y="469" width="0.2" height="15.0" fill="rgb(238,93,17)" rx="2" ry="2" />
<text  x="119.46" y="479.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CWalletTx&amp;&gt; (14,312 samples, 16.34%)</title><rect x="412.2" y="677" width="192.9" height="15.0" fill="rgb(237,144,52)" rx="2" ry="2" />
<text  x="415.24" y="687.5" >CDataStream::operator&gt;&gt;&lt;C..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (39 samples, 0.04%)</title><rect x="585.6" y="629" width="0.5" height="15.0" fill="rgb(217,214,47)" rx="2" ry="2" />
<text  x="588.57" y="639.5" ></text>
</g>
<g >
<title>SipHashUint256 (294 samples, 0.34%)</title><rect x="901.0" y="549" width="4.0" height="15.0" fill="rgb(219,223,27)" rx="2" ry="2" />
<text  x="904.00" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_begin (9 samples, 0.01%)</title><rect x="1039.9" y="613" width="0.1" height="15.0" fill="rgb(235,221,14)" rx="2" ry="2" />
<text  x="1042.89" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;CMerkleTx*&gt; (13 samples, 0.01%)</title><rect x="602.5" y="597" width="0.2" height="15.0" fill="rgb(244,150,49)" rx="2" ry="2" />
<text  x="605.48" y="607.5" ></text>
</g>
<g >
<title>std::mutex::lock (10 samples, 0.01%)</title><rect x="830.2" y="549" width="0.1" height="15.0" fill="rgb(242,17,41)" rx="2" ry="2" />
<text  x="833.21" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*, unsigned char&gt; (57 samples, 0.07%)</title><rect x="1098.3" y="613" width="0.7" height="15.0" fill="rgb(213,145,2)" rx="2" ry="2" />
<text  x="1101.25" y="623.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.04%)</title><rect x="500.1" y="245" width="0.4" height="15.0" fill="rgb(207,67,33)" rx="2" ry="2" />
<text  x="503.06" y="255.5" ></text>
</g>
<g >
<title>CSHA256::Write (14 samples, 0.02%)</title><rect x="703.5" y="613" width="0.2" height="15.0" fill="rgb(222,179,31)" rx="2" ry="2" />
<text  x="706.47" y="623.5" ></text>
</g>
<g >
<title>CHash256::Finalize (8 samples, 0.01%)</title><rect x="14.9" y="757" width="0.2" height="15.0" fill="rgb(209,147,44)" rx="2" ry="2" />
<text  x="17.95" y="767.5" ></text>
</g>
<g >
<title>__dbc_close (29 samples, 0.03%)</title><rect x="169.2" y="549" width="0.4" height="15.0" fill="rgb(224,180,38)" rx="2" ry="2" />
<text  x="172.22" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;LockedPool::LockedPageArena&gt;::_M_addr (10 samples, 0.01%)</title><rect x="862.9" y="357" width="0.1" height="15.0" fill="rgb(207,126,17)" rx="2" ry="2" />
<text  x="865.89" y="367.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (398 samples, 0.45%)</title><rect x="1184.2" y="693" width="5.4" height="15.0" fill="rgb(207,164,45)" rx="2" ry="2" />
<text  x="1187.21" y="703.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (14 samples, 0.02%)</title><rect x="76.7" y="453" width="0.2" height="15.0" fill="rgb(210,119,49)" rx="2" ry="2" />
<text  x="79.73" y="463.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, COutPoint&amp;&gt; (170 samples, 0.19%)</title><rect x="472.9" y="293" width="2.3" height="15.0" fill="rgb(206,49,3)" rx="2" ry="2" />
<text  x="475.95" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;CTxIn*, CTxIn*, std::allocator&lt;CTxIn&gt; &gt; (36 samples, 0.04%)</title><rect x="482.5" y="325" width="0.4" height="15.0" fill="rgb(239,165,28)" rx="2" ry="2" />
<text  x="485.46" y="335.5" ></text>
</g>
<g >
<title>ReadLE64 (13 samples, 0.01%)</title><rect x="962.6" y="565" width="0.2" height="15.0" fill="rgb(240,18,40)" rx="2" ry="2" />
<text  x="965.62" y="575.5" ></text>
</g>
<g >
<title>__lock_get_internal (84 samples, 0.10%)</title><rect x="140.0" y="437" width="1.1" height="15.0" fill="rgb(217,176,22)" rx="2" ry="2" />
<text  x="143.00" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (106 samples, 0.12%)</title><rect x="856.5" y="373" width="1.5" height="15.0" fill="rgb(209,132,53)" rx="2" ry="2" />
<text  x="859.55" y="383.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, unsigned char&gt; (38 samples, 0.04%)</title><rect x="501.8" y="229" width="0.5" height="15.0" fill="rgb(221,179,10)" rx="2" ry="2" />
<text  x="504.76" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;uint256 const, CWalletTx&gt;, uint256&amp;, CWalletTx&amp;&gt; (415 samples, 0.47%)</title><rect x="997.8" y="597" width="5.6" height="15.0" fill="rgb(229,20,16)" rx="2" ry="2" />
<text  x="1000.83" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_erase_at_end (9 samples, 0.01%)</title><rect x="517.0" y="389" width="0.1" height="15.0" fill="rgb(236,102,14)" rx="2" ry="2" />
<text  x="519.99" y="399.5" ></text>
</g>
<g >
<title>boost::detail::variant::visitation_impl_invoke&lt;boost::detail::variant::invoke_visitor&lt;(anonymous namespace)::CScriptVisitor const, false&gt;, void const*, WitnessV0KeyHash, boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::has_fallback_type_&gt; (708 samples, 0.81%)</title><rect x="807.6" y="517" width="9.5" height="15.0" fill="rgb(206,86,5)" rx="2" ry="2" />
<text  x="810.59" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;COutPoint const, uint256&gt;, std::pair&lt;COutPoint, uint256&gt; &gt; (63 samples, 0.07%)</title><rect x="929.1" y="549" width="0.9" height="15.0" fill="rgb(208,142,45)" rx="2" ry="2" />
<text  x="932.13" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (10 samples, 0.01%)</title><rect x="1002.1" y="501" width="0.1" height="15.0" fill="rgb(228,200,41)" rx="2" ry="2" />
<text  x="1005.06" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_do_relocate (16 samples, 0.02%)</title><rect x="668.1" y="613" width="0.2" height="15.0" fill="rgb(208,102,43)" rx="2" ry="2" />
<text  x="671.05" y="623.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.01%)</title><rect x="985.5" y="469" width="0.1" height="15.0" fill="rgb(232,94,14)" rx="2" ry="2" />
<text  x="988.46" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="88.5" y="437" width="0.2" height="15.0" fill="rgb(212,15,53)" rx="2" ry="2" />
<text  x="91.53" y="447.5" ></text>
</g>
<g >
<title>CHash160::Write (10 samples, 0.01%)</title><rect x="765.4" y="597" width="0.1" height="15.0" fill="rgb(206,208,26)" rx="2" ry="2" />
<text  x="768.37" y="607.5" ></text>
</g>
<g >
<title>__lock_get_internal (21 samples, 0.02%)</title><rect x="171.0" y="453" width="0.3" height="15.0" fill="rgb(228,228,12)" rx="2" ry="2" />
<text  x="174.01" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::_M_v (13 samples, 0.01%)</title><rect x="614.8" y="421" width="0.1" height="15.0" fill="rgb(223,97,44)" rx="2" ry="2" />
<text  x="617.76" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (8 samples, 0.01%)</title><rect x="148.5" y="517" width="0.1" height="15.0" fill="rgb(226,89,11)" rx="2" ry="2" />
<text  x="151.45" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::erase (179 samples, 0.20%)</title><rect x="907.0" y="613" width="2.4" height="15.0" fill="rgb(224,158,51)" rx="2" ry="2" />
<text  x="909.97" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_ptr (25 samples, 0.03%)</title><rect x="731.2" y="485" width="0.3" height="15.0" fill="rgb(224,194,6)" rx="2" ry="2" />
<text  x="734.15" y="495.5" ></text>
</g>
<g >
<title>ser_writedata64&lt;CHashWriter&gt; (25 samples, 0.03%)</title><rect x="538.4" y="197" width="0.3" height="15.0" fill="rgb(208,136,21)" rx="2" ry="2" />
<text  x="541.40" y="207.5" ></text>
</g>
<g >
<title>Hash160&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1,294 samples, 1.48%)</title><rect x="708.3" y="629" width="17.4" height="15.0" fill="rgb(217,81,13)" rx="2" ry="2" />
<text  x="711.31" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (40 samples, 0.05%)</title><rect x="820.7" y="533" width="0.6" height="15.0" fill="rgb(252,111,32)" rx="2" ry="2" />
<text  x="823.74" y="543.5" ></text>
</g>
<g >
<title>WriteBE64 (19 samples, 0.02%)</title><rect x="521.9" y="357" width="0.2" height="15.0" fill="rgb(252,176,8)" rx="2" ry="2" />
<text  x="524.85" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (15 samples, 0.02%)</title><rect x="145.1" y="389" width="0.2" height="15.0" fill="rgb(224,35,38)" rx="2" ry="2" />
<text  x="148.11" y="399.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="72.9" y="453" width="0.1" height="15.0" fill="rgb(233,229,14)" rx="2" ry="2" />
<text  x="75.87" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_base (18 samples, 0.02%)</title><rect x="1065.8" y="661" width="0.2" height="15.0" fill="rgb(215,211,40)" rx="2" ry="2" />
<text  x="1068.76" y="671.5" ></text>
</g>
<g >
<title>__dbc_iget (716 samples, 0.82%)</title><rect x="90.5" y="469" width="9.6" height="15.0" fill="rgb(217,49,2)" rx="2" ry="2" />
<text  x="93.49" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (28 samples, 0.03%)</title><rect x="961.6" y="533" width="0.4" height="15.0" fill="rgb(251,163,20)" rx="2" ry="2" />
<text  x="964.61" y="543.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (12 samples, 0.01%)</title><rect x="46.4" y="517" width="0.1" height="15.0" fill="rgb(242,100,9)" rx="2" ry="2" />
<text  x="49.36" y="527.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (10 samples, 0.01%)</title><rect x="1172.6" y="757" width="0.2" height="15.0" fill="rgb(206,125,4)" rx="2" ry="2" />
<text  x="1175.64" y="767.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, unsigned char*, unsigned char*&gt; (19 samples, 0.02%)</title><rect x="1098.6" y="549" width="0.2" height="15.0" fill="rgb(234,129,24)" rx="2" ry="2" />
<text  x="1101.55" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (44 samples, 0.05%)</title><rect x="828.4" y="565" width="0.6" height="15.0" fill="rgb(246,218,22)" rx="2" ry="2" />
<text  x="831.43" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::operator* (8 samples, 0.01%)</title><rect x="539.2" y="293" width="0.1" height="15.0" fill="rgb(215,44,35)" rx="2" ry="2" />
<text  x="542.17" y="303.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.02%)</title><rect x="112.1" y="325" width="0.2" height="15.0" fill="rgb(230,7,4)" rx="2" ry="2" />
<text  x="115.06" y="335.5" ></text>
</g>
<g >
<title>CTxOut::CTxOut (26 samples, 0.03%)</title><rect x="534.9" y="309" width="0.3" height="15.0" fill="rgb(251,66,5)" rx="2" ry="2" />
<text  x="537.86" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (13 samples, 0.01%)</title><rect x="49.0" y="549" width="0.2" height="15.0" fill="rgb(216,35,15)" rx="2" ry="2" />
<text  x="52.03" y="559.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (408 samples, 0.47%)</title><rect x="534.7" y="325" width="5.5" height="15.0" fill="rgb(225,99,29)" rx="2" ry="2" />
<text  x="537.69" y="335.5" ></text>
</g>
<g >
<title>ShiftMessageC (8 samples, 0.01%)</title><rect x="185.1" y="133" width="0.1" height="15.0" fill="rgb(254,181,15)" rx="2" ry="2" />
<text  x="188.08" y="143.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (13 samples, 0.01%)</title><rect x="986.1" y="517" width="0.2" height="15.0" fill="rgb(242,123,19)" rx="2" ry="2" />
<text  x="989.13" y="527.5" ></text>
</g>
<g >
<title>UintToArith256 (21 samples, 0.02%)</title><rect x="47.3" y="645" width="0.2" height="15.0" fill="rgb(233,13,36)" rx="2" ry="2" />
<text  x="50.26" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (19 samples, 0.02%)</title><rect x="1145.9" y="645" width="0.2" height="15.0" fill="rgb(229,209,48)" rx="2" ry="2" />
<text  x="1148.85" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char*&amp;&amp;&gt; (17 samples, 0.02%)</title><rect x="1085.4" y="485" width="0.3" height="15.0" fill="rgb(226,56,17)" rx="2" ry="2" />
<text  x="1088.44" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (58 samples, 0.07%)</title><rect x="508.4" y="309" width="0.7" height="15.0" fill="rgb(217,169,29)" rx="2" ry="2" />
<text  x="511.36" y="319.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (9 samples, 0.01%)</title><rect x="491.7" y="229" width="0.1" height="15.0" fill="rgb(221,128,43)" rx="2" ry="2" />
<text  x="494.71" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (14 samples, 0.02%)</title><rect x="837.4" y="581" width="0.2" height="15.0" fill="rgb(216,192,11)" rx="2" ry="2" />
<text  x="840.37" y="591.5" ></text>
</g>
<g >
<title>__memp_alloc (36 samples, 0.04%)</title><rect x="161.6" y="469" width="0.5" height="15.0" fill="rgb(210,90,5)" rx="2" ry="2" />
<text  x="164.65" y="479.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::operator (11 samples, 0.01%)</title><rect x="833.2" y="501" width="0.2" height="15.0" fill="rgb(252,93,30)" rx="2" ry="2" />
<text  x="836.23" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_Rb_tree_iterator (28 samples, 0.03%)</title><rect x="850.9" y="357" width="0.4" height="15.0" fill="rgb(207,82,35)" rx="2" ry="2" />
<text  x="853.91" y="367.5" ></text>
</g>
<g >
<title>boost::detail::variant::visitation_impl_invoke&lt;boost::detail::variant::destroyer, void*, WitnessV0KeyHash, boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::has_fallback_type_&gt; (19 samples, 0.02%)</title><rect x="818.3" y="533" width="0.3" height="15.0" fill="rgb(249,56,51)" rx="2" ry="2" />
<text  x="821.33" y="543.5" ></text>
</g>
<g >
<title>CSHA256::Write (17 samples, 0.02%)</title><rect x="559.7" y="229" width="0.2" height="15.0" fill="rgb(247,73,2)" rx="2" ry="2" />
<text  x="562.71" y="239.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (13 samples, 0.01%)</title><rect x="1091.2" y="549" width="0.1" height="15.0" fill="rgb(227,123,33)" rx="2" ry="2" />
<text  x="1094.15" y="559.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;unsigned int&amp;&gt; (23 samples, 0.03%)</title><rect x="515.7" y="405" width="0.3" height="15.0" fill="rgb(225,163,12)" rx="2" ry="2" />
<text  x="518.73" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_get_node (92 samples, 0.11%)</title><rect x="966.1" y="613" width="1.2" height="15.0" fill="rgb(239,44,40)" rx="2" ry="2" />
<text  x="969.11" y="623.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::erase (10 samples, 0.01%)</title><rect x="676.0" y="549" width="0.2" height="15.0" fill="rgb(237,29,6)" rx="2" ry="2" />
<text  x="679.03" y="559.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (27 samples, 0.03%)</title><rect x="1019.7" y="661" width="0.4" height="15.0" fill="rgb(206,85,34)" rx="2" ry="2" />
<text  x="1022.70" y="671.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::shared_ptr&lt;CTransaction const&gt;&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="677" width="13.8" height="15.0" fill="rgb(245,111,44)" rx="2" ry="2" />
<text  x="1107.95" y="687.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (13 samples, 0.01%)</title><rect x="184.0" y="133" width="0.2" height="15.0" fill="rgb(246,166,19)" rx="2" ry="2" />
<text  x="187.04" y="143.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (172 samples, 0.20%)</title><rect x="117.6" y="437" width="2.3" height="15.0" fill="rgb(224,205,37)" rx="2" ry="2" />
<text  x="120.59" y="447.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (11 samples, 0.01%)</title><rect x="57.6" y="597" width="0.2" height="15.0" fill="rgb(220,120,37)" rx="2" ry="2" />
<text  x="60.62" y="607.5" ></text>
</g>
<g >
<title>__memp_fput (8 samples, 0.01%)</title><rect x="157.2" y="501" width="0.1" height="15.0" fill="rgb(248,194,49)" rx="2" ry="2" />
<text  x="160.16" y="511.5" ></text>
</g>
<g >
<title>CHashWriter::write (164 samples, 0.19%)</title><rect x="183.1" y="213" width="2.3" height="15.0" fill="rgb(245,192,53)" rx="2" ry="2" />
<text  x="186.14" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.01%)</title><rect x="1090.3" y="533" width="0.2" height="15.0" fill="rgb(214,139,10)" rx="2" ry="2" />
<text  x="1093.33" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char* const&amp;&gt;, std::tuple&lt;&gt; &gt; (50 samples, 0.06%)</title><rect x="679.3" y="517" width="0.6" height="15.0" fill="rgb(214,149,22)" rx="2" ry="2" />
<text  x="682.27" y="527.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="512.1" y="277" width="0.1" height="15.0" fill="rgb(207,111,43)" rx="2" ry="2" />
<text  x="515.05" y="287.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::begin (10 samples, 0.01%)</title><rect x="805.8" y="597" width="0.2" height="15.0" fill="rgb(238,14,11)" rx="2" ry="2" />
<text  x="808.85" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (12 samples, 0.01%)</title><rect x="397.7" y="421" width="0.1" height="15.0" fill="rgb(227,143,43)" rx="2" ry="2" />
<text  x="400.66" y="431.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::operator&lt;&lt;= (21 samples, 0.02%)</title><rect x="50.4" y="629" width="0.3" height="15.0" fill="rgb(251,114,12)" rx="2" ry="2" />
<text  x="53.42" y="639.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (39 samples, 0.04%)</title><rect x="1143.9" y="565" width="0.5" height="15.0" fill="rgb(254,170,52)" rx="2" ry="2" />
<text  x="1146.88" y="575.5" ></text>
</g>
<g >
<title>CChain::operator[] (84 samples, 0.10%)</title><rect x="952.5" y="629" width="1.1" height="15.0" fill="rgb(251,202,51)" rx="2" ry="2" />
<text  x="955.51" y="639.5" ></text>
</g>
<g >
<title>__libc_start_main (409 samples, 0.47%)</title><rect x="1184.2" y="741" width="5.5" height="15.0" fill="rgb(223,32,6)" rx="2" ry="2" />
<text  x="1187.21" y="751.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (46 samples, 0.05%)</title><rect x="784.9" y="565" width="0.6" height="15.0" fill="rgb(213,64,54)" rx="2" ry="2" />
<text  x="787.92" y="575.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (33 samples, 0.04%)</title><rect x="488.0" y="165" width="0.4" height="15.0" fill="rgb(229,82,42)" rx="2" ry="2" />
<text  x="490.99" y="175.5" ></text>
</g>
<g >
<title>base_blob&lt;160u&gt;::base_blob (11 samples, 0.01%)</title><rect x="765.7" y="581" width="0.1" height="15.0" fill="rgb(234,15,23)" rx="2" ry="2" />
<text  x="768.66" y="591.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.03%)</title><rect x="179.9" y="453" width="0.3" height="15.0" fill="rgb(244,40,43)" rx="2" ry="2" />
<text  x="182.91" y="463.5" ></text>
</g>
<g >
<title>__lock_get_internal (9 samples, 0.01%)</title><rect x="66.5" y="421" width="0.1" height="15.0" fill="rgb(225,51,34)" rx="2" ry="2" />
<text  x="69.47" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (28 samples, 0.03%)</title><rect x="855.4" y="325" width="0.4" height="15.0" fill="rgb(226,197,36)" rx="2" ry="2" />
<text  x="858.44" y="335.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (124 samples, 0.14%)</title><rect x="1118.8" y="677" width="1.7" height="15.0" fill="rgb(236,43,36)" rx="2" ry="2" />
<text  x="1121.83" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (48 samples, 0.05%)</title><rect x="30.6" y="661" width="0.7" height="15.0" fill="rgb(213,105,24)" rx="2" ry="2" />
<text  x="33.61" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_relocate (42 samples, 0.05%)</title><rect x="511.6" y="325" width="0.6" height="15.0" fill="rgb(212,181,38)" rx="2" ry="2" />
<text  x="514.61" y="335.5" ></text>
</g>
<g >
<title>__db_cursor_int (498 samples, 0.57%)</title><rect x="376.1" y="613" width="6.7" height="15.0" fill="rgb(251,71,25)" rx="2" ry="2" />
<text  x="379.12" y="623.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (20 samples, 0.02%)</title><rect x="1144.6" y="549" width="0.2" height="15.0" fill="rgb(218,20,18)" rx="2" ry="2" />
<text  x="1147.57" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_trylock (25 samples, 0.03%)</title><rect x="355.5" y="565" width="0.3" height="15.0" fill="rgb(232,156,39)" rx="2" ry="2" />
<text  x="358.47" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::clear (17 samples, 0.02%)</title><rect x="516.9" y="405" width="0.2" height="15.0" fill="rgb(228,100,29)" rx="2" ry="2" />
<text  x="519.88" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (8 samples, 0.01%)</title><rect x="27.0" y="741" width="0.1" height="15.0" fill="rgb(234,167,15)" rx="2" ry="2" />
<text  x="30.03" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;long, CWalletTx*&gt; &gt; (8 samples, 0.01%)</title><rect x="1155.6" y="757" width="0.1" height="15.0" fill="rgb(211,24,45)" rx="2" ry="2" />
<text  x="1158.62" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt;::allocate (11 samples, 0.01%)</title><rect x="616.8" y="437" width="0.1" height="15.0" fill="rgb(246,101,10)" rx="2" ry="2" />
<text  x="619.79" y="447.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::~secure_allocator (14 samples, 0.02%)</title><rect x="1091.8" y="629" width="0.2" height="15.0" fill="rgb(254,183,6)" rx="2" ry="2" />
<text  x="1094.77" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (188 samples, 0.21%)</title><rect x="406.7" y="565" width="2.5" height="15.0" fill="rgb(244,84,44)" rx="2" ry="2" />
<text  x="409.67" y="575.5" ></text>
</g>
<g >
<title>__bamc_init (63 samples, 0.07%)</title><rect x="79.0" y="485" width="0.9" height="15.0" fill="rgb(213,13,28)" rx="2" ry="2" />
<text  x="82.01" y="495.5" ></text>
</g>
<g >
<title>ec_privkey_import_der (54 samples, 0.06%)</title><rect x="670.0" y="661" width="0.7" height="15.0" fill="rgb(222,36,20)" rx="2" ry="2" />
<text  x="673.02" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_equals (9 samples, 0.01%)</title><rect x="913.9" y="597" width="0.1" height="15.0" fill="rgb(234,168,24)" rx="2" ry="2" />
<text  x="916.90" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer&gt; (8 samples, 0.01%)</title><rect x="1031.0" y="373" width="0.1" height="15.0" fill="rgb(227,224,47)" rx="2" ry="2" />
<text  x="1034.04" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (9 samples, 0.01%)</title><rect x="561.1" y="277" width="0.1" height="15.0" fill="rgb(239,65,27)" rx="2" ry="2" />
<text  x="564.11" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::operator* (11 samples, 0.01%)</title><rect x="559.9" y="293" width="0.2" height="15.0" fill="rgb(227,179,10)" rx="2" ry="2" />
<text  x="562.94" y="303.5" ></text>
</g>
<g >
<title>__uint64_identity (13 samples, 0.01%)</title><rect x="1035.7" y="421" width="0.1" height="15.0" fill="rgb(233,39,0)" rx="2" ry="2" />
<text  x="1038.66" y="431.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (14 samples, 0.02%)</title><rect x="402.5" y="581" width="0.2" height="15.0" fill="rgb(230,198,2)" rx="2" ry="2" />
<text  x="405.53" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (90 samples, 0.10%)</title><rect x="350.1" y="581" width="1.2" height="15.0" fill="rgb(229,3,42)" rx="2" ry="2" />
<text  x="353.11" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (11 samples, 0.01%)</title><rect x="614.9" y="421" width="0.2" height="15.0" fill="rgb(227,200,2)" rx="2" ry="2" />
<text  x="617.93" y="431.5" ></text>
</g>
<g >
<title>WalletBatch::VerifyDatabaseFile (20 samples, 0.02%)</title><rect x="1144.6" y="693" width="0.2" height="15.0" fill="rgb(215,136,3)" rx="2" ry="2" />
<text  x="1147.57" y="703.5" ></text>
</g>
<g >
<title>__strlen_avx2 (16 samples, 0.02%)</title><rect x="579.0" y="581" width="0.2" height="15.0" fill="rgb(219,198,8)" rx="2" ry="2" />
<text  x="581.98" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="587.1" y="533" width="0.1" height="15.0" fill="rgb(210,80,27)" rx="2" ry="2" />
<text  x="590.13" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (26 samples, 0.03%)</title><rect x="1087.8" y="501" width="0.3" height="15.0" fill="rgb(206,49,28)" rx="2" ry="2" />
<text  x="1090.80" y="511.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (24 samples, 0.03%)</title><rect x="45.3" y="565" width="0.4" height="15.0" fill="rgb(217,129,47)" rx="2" ry="2" />
<text  x="48.35" y="575.5" ></text>
</g>
<g >
<title>std::swap&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_or_indirect&gt; (10 samples, 0.01%)</title><rect x="786.3" y="565" width="0.1" height="15.0" fill="rgb(222,108,42)" rx="2" ry="2" />
<text  x="789.27" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;unsigned char const*, void&gt; (168 samples, 0.19%)</title><rect x="814.4" y="453" width="2.3" height="15.0" fill="rgb(214,212,21)" rx="2" ry="2" />
<text  x="817.45" y="463.5" ></text>
</g>
<g >
<title>__bam_search (109 samples, 0.12%)</title><rect x="100.5" y="405" width="1.5" height="15.0" fill="rgb(209,82,37)" rx="2" ry="2" />
<text  x="103.55" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (68 samples, 0.08%)</title><rect x="980.1" y="613" width="1.0" height="15.0" fill="rgb(224,47,49)" rx="2" ry="2" />
<text  x="983.14" y="623.5" ></text>
</g>
<g >
<title>__bam_get_root (37 samples, 0.04%)</title><rect x="107.9" y="405" width="0.5" height="15.0" fill="rgb(224,180,14)" rx="2" ry="2" />
<text  x="110.88" y="415.5" ></text>
</g>
<g >
<title>__lock_get_internal (9 samples, 0.01%)</title><rect x="80.9" y="405" width="0.2" height="15.0" fill="rgb(211,189,4)" rx="2" ry="2" />
<text  x="83.94" y="415.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, 28u, unsigned char&gt; (64 samples, 0.07%)</title><rect x="1030.2" y="373" width="0.8" height="15.0" fill="rgb(238,178,21)" rx="2" ry="2" />
<text  x="1033.17" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;CTxOut*, unsigned long, CTxOut&gt; (83 samples, 0.09%)</title><rect x="491.1" y="325" width="1.1" height="15.0" fill="rgb(241,89,5)" rx="2" ry="2" />
<text  x="494.10" y="335.5" ></text>
</g>
<g >
<title>CBlockIndex::CBlockIndex (8 samples, 0.01%)</title><rect x="45.8" y="645" width="0.1" height="15.0" fill="rgb(226,218,27)" rx="2" ry="2" />
<text  x="48.82" y="655.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (12 samples, 0.01%)</title><rect x="811.0" y="437" width="0.2" height="15.0" fill="rgb(216,143,14)" rx="2" ry="2" />
<text  x="814.02" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;CBlockIndex*, CBlockIndex*&gt; &gt; (35 samples, 0.04%)</title><rect x="54.2" y="661" width="0.5" height="15.0" fill="rgb(249,75,21)" rx="2" ry="2" />
<text  x="57.19" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_valptr (36 samples, 0.04%)</title><rect x="731.0" y="501" width="0.5" height="15.0" fill="rgb(236,221,51)" rx="2" ry="2" />
<text  x="734.00" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_Tuple_impl&lt;interfaces::Chain::Lock*&amp;, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, void&gt; (42 samples, 0.05%)</title><rect x="947.9" y="581" width="0.6" height="15.0" fill="rgb(216,31,16)" rx="2" ry="2" />
<text  x="950.91" y="591.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (311 samples, 0.36%)</title><rect x="1135.8" y="453" width="4.2" height="15.0" fill="rgb(243,65,37)" rx="2" ry="2" />
<text  x="1138.80" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::vector (10 samples, 0.01%)</title><rect x="892.5" y="517" width="0.1" height="15.0" fill="rgb(208,36,13)" rx="2" ry="2" />
<text  x="895.50" y="527.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (164 samples, 0.19%)</title><rect x="180.9" y="245" width="2.2" height="15.0" fill="rgb(240,53,48)" rx="2" ry="2" />
<text  x="183.93" y="255.5" ></text>
</g>
<g >
<title>__memp_fget (9 samples, 0.01%)</title><rect x="103.8" y="389" width="0.1" height="15.0" fill="rgb(232,34,51)" rx="2" ry="2" />
<text  x="106.78" y="399.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (284 samples, 0.32%)</title><rect x="1140.0" y="453" width="3.8" height="15.0" fill="rgb(244,180,2)" rx="2" ry="2" />
<text  x="1142.99" y="463.5" ></text>
</g>
<g >
<title>std::make_move_iterator&lt;unsigned char*&gt; (10 samples, 0.01%)</title><rect x="1094.5" y="613" width="0.1" height="15.0" fill="rgb(226,65,39)" rx="2" ry="2" />
<text  x="1097.51" y="623.5" ></text>
</g>
<g >
<title>SaltedIDHasher::operator (111 samples, 0.13%)</title><rect x="739.2" y="597" width="1.5" height="15.0" fill="rgb(219,102,46)" rx="2" ry="2" />
<text  x="742.22" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (31 samples, 0.04%)</title><rect x="839.1" y="565" width="0.5" height="15.0" fill="rgb(253,205,13)" rx="2" ry="2" />
<text  x="842.13" y="575.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (12 samples, 0.01%)</title><rect x="45.1" y="581" width="0.2" height="15.0" fill="rgb(245,145,6)" rx="2" ry="2" />
<text  x="48.15" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::end (8 samples, 0.01%)</title><rect x="681.2" y="549" width="0.1" height="15.0" fill="rgb(251,218,26)" rx="2" ry="2" />
<text  x="684.21" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::~vector (25 samples, 0.03%)</title><rect x="685.4" y="645" width="0.3" height="15.0" fill="rgb(246,118,31)" rx="2" ry="2" />
<text  x="688.37" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;char*, unsigned long&amp;&gt; (152 samples, 0.17%)</title><rect x="615.3" y="485" width="2.1" height="15.0" fill="rgb(208,206,53)" rx="2" ry="2" />
<text  x="618.32" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::end (9 samples, 0.01%)</title><rect x="663.9" y="565" width="0.1" height="15.0" fill="rgb(222,10,37)" rx="2" ry="2" />
<text  x="666.89" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;CKeyID&amp;&amp;&gt;::tuple (25 samples, 0.03%)</title><rect x="868.4" y="549" width="0.3" height="15.0" fill="rgb(215,62,18)" rx="2" ry="2" />
<text  x="871.35" y="559.5" ></text>
</g>
<g >
<title>__memp_pgread (23 samples, 0.03%)</title><rect x="112.0" y="389" width="0.3" height="15.0" fill="rgb(229,162,38)" rx="2" ry="2" />
<text  x="115.03" y="399.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (20 samples, 0.02%)</title><rect x="135.3" y="437" width="0.3" height="15.0" fill="rgb(235,174,14)" rx="2" ry="2" />
<text  x="138.33" y="447.5" ></text>
</g>
<g >
<title>CSHA256::CSHA256 (17 samples, 0.02%)</title><rect x="520.1" y="373" width="0.2" height="15.0" fill="rgb(215,17,2)" rx="2" ry="2" />
<text  x="523.06" y="383.5" ></text>
</g>
<g >
<title>__subvdi3 (13 samples, 0.01%)</title><rect x="324.7" y="581" width="0.1" height="15.0" fill="rgb(221,47,3)" rx="2" ry="2" />
<text  x="327.67" y="591.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;void*, void*&gt; &gt;::operator (65 samples, 0.07%)</title><rect x="878.0" y="533" width="0.8" height="15.0" fill="rgb(215,208,45)" rx="2" ry="2" />
<text  x="880.97" y="543.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CSizeComputer, 28u, unsigned char&gt; (60 samples, 0.07%)</title><rect x="1030.2" y="357" width="0.8" height="15.0" fill="rgb(209,47,20)" rx="2" ry="2" />
<text  x="1033.23" y="367.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="549" width="4.2" height="15.0" fill="rgb(215,155,34)" rx="2" ry="2" />
<text  x="1138.80" y="559.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt; &gt; (23 samples, 0.03%)</title><rect x="914.3" y="597" width="0.3" height="15.0" fill="rgb(219,107,11)" rx="2" ry="2" />
<text  x="917.25" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;CTxOut*, unsigned long&gt; (78 samples, 0.09%)</title><rect x="491.2" y="309" width="1.0" height="15.0" fill="rgb(250,72,20)" rx="2" ry="2" />
<text  x="494.17" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;CTransaction&gt;::allocator (8 samples, 0.01%)</title><rect x="1060.6" y="645" width="0.1" height="15.0" fill="rgb(210,1,46)" rx="2" ry="2" />
<text  x="1063.62" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;, unsigned int*, unsigned int&gt; (50 samples, 0.06%)</title><rect x="883.8" y="597" width="0.7" height="15.0" fill="rgb(213,148,25)" rx="2" ry="2" />
<text  x="886.82" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (16 samples, 0.02%)</title><rect x="1152.6" y="757" width="0.2" height="15.0" fill="rgb(242,71,6)" rx="2" ry="2" />
<text  x="1155.56" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;uint256&gt;::new_allocator (19 samples, 0.02%)</title><rect x="603.7" y="565" width="0.2" height="15.0" fill="rgb(253,126,34)" rx="2" ry="2" />
<text  x="606.68" y="575.5" ></text>
</g>
<g >
<title>__dbc_cleanup (12 samples, 0.01%)</title><rect x="100.0" y="453" width="0.1" height="15.0" fill="rgb(240,145,20)" rx="2" ry="2" />
<text  x="102.98" y="463.5" ></text>
</g>
<g >
<title>CSHA256::Write (16 samples, 0.02%)</title><rect x="785.1" y="549" width="0.2" height="15.0" fill="rgb(210,139,51)" rx="2" ry="2" />
<text  x="788.05" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (12 samples, 0.01%)</title><rect x="1171.7" y="741" width="0.2" height="15.0" fill="rgb(234,12,37)" rx="2" ry="2" />
<text  x="1174.70" y="751.5" ></text>
</g>
<g >
<title>std::equal_to&lt;uint256&gt;::operator (11 samples, 0.01%)</title><rect x="933.4" y="549" width="0.2" height="15.0" fill="rgb(244,24,27)" rx="2" ry="2" />
<text  x="936.43" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::erase (109 samples, 0.12%)</title><rect x="856.5" y="389" width="1.5" height="15.0" fill="rgb(223,26,52)" rx="2" ry="2" />
<text  x="859.51" y="399.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, char&gt; (340 samples, 0.39%)</title><rect x="605.4" y="661" width="4.6" height="15.0" fill="rgb(235,161,49)" rx="2" ry="2" />
<text  x="608.42" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (50 samples, 0.06%)</title><rect x="656.4" y="485" width="0.7" height="15.0" fill="rgb(219,182,25)" rx="2" ry="2" />
<text  x="659.38" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (21 samples, 0.02%)</title><rect x="910.1" y="565" width="0.3" height="15.0" fill="rgb(210,97,34)" rx="2" ry="2" />
<text  x="913.14" y="575.5" ></text>
</g>
<g >
<title>tinyformat::format&lt;int&gt; (25 samples, 0.03%)</title><rect x="1145.9" y="661" width="0.3" height="15.0" fill="rgb(211,8,2)" rx="2" ry="2" />
<text  x="1148.85" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (10 samples, 0.01%)</title><rect x="590.2" y="501" width="0.1" height="15.0" fill="rgb(214,18,6)" rx="2" ry="2" />
<text  x="593.19" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="885.7" y="613" width="0.2" height="15.0" fill="rgb(219,20,52)" rx="2" ry="2" />
<text  x="888.72" y="623.5" ></text>
</g>
<g >
<title>CWalletTx::Unserialize&lt;CDataStream&gt; (14,288 samples, 16.32%)</title><rect x="412.6" y="645" width="192.5" height="15.0" fill="rgb(228,53,13)" rx="2" ry="2" />
<text  x="415.56" y="655.5" >CWalletTx::Unserialize&lt;CD..</text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (21 samples, 0.02%)</title><rect x="818.9" y="581" width="0.3" height="15.0" fill="rgb(229,22,8)" rx="2" ry="2" />
<text  x="821.95" y="591.5" ></text>
</g>
<g >
<title>operator&lt; (8 samples, 0.01%)</title><rect x="1044.9" y="597" width="0.1" height="15.0" fill="rgb(244,119,38)" rx="2" ry="2" />
<text  x="1047.90" y="607.5" ></text>
</g>
<g >
<title>__env_open (28 samples, 0.03%)</title><rect x="180.4" y="613" width="0.4" height="15.0" fill="rgb(244,40,8)" rx="2" ry="2" />
<text  x="183.41" y="623.5" ></text>
</g>
<g >
<title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (62 samples, 0.07%)</title><rect x="30.4" y="693" width="0.9" height="15.0" fill="rgb(218,109,25)" rx="2" ry="2" />
<text  x="33.42" y="703.5" ></text>
</g>
<g >
<title>ReadVarInt&lt;CDataStream,  (31 samples, 0.04%)</title><rect x="43.3" y="517" width="0.4" height="15.0" fill="rgb(248,163,53)" rx="2" ry="2" />
<text  x="46.26" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char* const&amp;&gt;, std::tuple&lt;&gt; &gt; (50 samples, 0.06%)</title><rect x="1083.8" y="501" width="0.7" height="15.0" fill="rgb(244,161,49)" rx="2" ry="2" />
<text  x="1086.82" y="511.5" ></text>
</g>
<g >
<title>__db_cursor_int (25 samples, 0.03%)</title><rect x="121.5" y="453" width="0.4" height="15.0" fill="rgb(223,102,32)" rx="2" ry="2" />
<text  x="124.52" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (23 samples, 0.03%)</title><rect x="534.2" y="293" width="0.3" height="15.0" fill="rgb(205,11,9)" rx="2" ry="2" />
<text  x="537.17" y="303.5" ></text>
</g>
<g >
<title>__bam_vrfy_structure (4,413 samples, 5.04%)</title><rect x="78.0" y="581" width="59.5" height="15.0" fill="rgb(248,150,38)" rx="2" ry="2" />
<text  x="81.01" y="591.5" >__bam_..</text>
</g>
<g >
<title>CLockLocation::CLockLocation (76 samples, 0.09%)</title><rect x="726.4" y="597" width="1.0" height="15.0" fill="rgb(245,208,28)" rx="2" ry="2" />
<text  x="729.37" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_erase_at_end (8 samples, 0.01%)</title><rect x="479.5" y="341" width="0.1" height="15.0" fill="rgb(213,133,11)" rx="2" ry="2" />
<text  x="482.52" y="351.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="136.7" y="357" width="0.1" height="15.0" fill="rgb(222,32,8)" rx="2" ry="2" />
<text  x="139.68" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (582 samples, 0.66%)</title><rect x="885.6" y="645" width="7.8" height="15.0" fill="rgb(214,155,52)" rx="2" ry="2" />
<text  x="888.57" y="655.5" ></text>
</g>
<g >
<title>__memp_fget (22 samples, 0.03%)</title><rect x="71.5" y="453" width="0.3" height="15.0" fill="rgb(220,120,24)" rx="2" ry="2" />
<text  x="74.55" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (48 samples, 0.05%)</title><rect x="677.3" y="517" width="0.6" height="15.0" fill="rgb(253,112,5)" rx="2" ry="2" />
<text  x="680.29" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (55 samples, 0.06%)</title><rect x="840.4" y="581" width="0.8" height="15.0" fill="rgb(227,177,14)" rx="2" ry="2" />
<text  x="843.43" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::find (20 samples, 0.02%)</title><rect x="54.7" y="661" width="0.3" height="15.0" fill="rgb(233,161,45)" rx="2" ry="2" />
<text  x="57.71" y="671.5" ></text>
</g>
<g >
<title>CBlockIndex::GetAncestor (8 samples, 0.01%)</title><rect x="38.4" y="661" width="0.1" height="15.0" fill="rgb(253,77,51)" rx="2" ry="2" />
<text  x="41.43" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (12 samples, 0.01%)</title><rect x="854.1" y="341" width="0.2" height="15.0" fill="rgb(249,32,54)" rx="2" ry="2" />
<text  x="857.11" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;char*&gt;, char*, zero_after_free_allocator&lt;char&gt; &gt; (129 samples, 0.15%)</title><rect x="317.4" y="597" width="1.7" height="15.0" fill="rgb(211,171,27)" rx="2" ry="2" />
<text  x="320.36" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (10 samples, 0.01%)</title><rect x="76.6" y="453" width="0.1" height="15.0" fill="rgb(218,56,33)" rx="2" ry="2" />
<text  x="79.60" y="463.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="485" width="3.8" height="15.0" fill="rgb(209,66,48)" rx="2" ry="2" />
<text  x="1142.99" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (17 samples, 0.02%)</title><rect x="836.2" y="565" width="0.2" height="15.0" fill="rgb(247,44,46)" rx="2" ry="2" />
<text  x="839.18" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::_Vector_impl (42 samples, 0.05%)</title><rect x="564.3" y="405" width="0.5" height="15.0" fill="rgb(251,104,5)" rx="2" ry="2" />
<text  x="567.27" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (16 samples, 0.02%)</title><rect x="655.0" y="501" width="0.3" height="15.0" fill="rgb(244,92,30)" rx="2" ry="2" />
<text  x="658.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (76 samples, 0.09%)</title><rect x="854.9" y="341" width="1.0" height="15.0" fill="rgb(234,107,44)" rx="2" ry="2" />
<text  x="857.86" y="351.5" ></text>
</g>
<g >
<title>__mutex_free_int (22 samples, 0.03%)</title><rect x="178.3" y="533" width="0.3" height="15.0" fill="rgb(207,205,51)" rx="2" ry="2" />
<text  x="181.33" y="543.5" ></text>
</g>
<g >
<title>CBlockHeader::GetHash (95 samples, 0.11%)</title><rect x="46.0" y="645" width="1.2" height="15.0" fill="rgb(241,30,47)" rx="2" ry="2" />
<text  x="48.97" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_default_append (340 samples, 0.39%)</title><rect x="489.6" y="341" width="4.6" height="15.0" fill="rgb(226,18,47)" rx="2" ry="2" />
<text  x="492.62" y="351.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;, unsigned int*&gt; (43 samples, 0.05%)</title><rect x="883.9" y="549" width="0.6" height="15.0" fill="rgb(236,6,34)" rx="2" ry="2" />
<text  x="886.92" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (165 samples, 0.19%)</title><rect x="924.5" y="565" width="2.2" height="15.0" fill="rgb(239,4,18)" rx="2" ry="2" />
<text  x="927.45" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_S_max_size (35 samples, 0.04%)</title><rect x="483.8" y="309" width="0.5" height="15.0" fill="rgb(231,2,33)" rx="2" ry="2" />
<text  x="486.81" y="319.5" ></text>
</g>
<g >
<title>std::operator== (10 samples, 0.01%)</title><rect x="1158.1" y="741" width="0.2" height="15.0" fill="rgb(242,149,47)" rx="2" ry="2" />
<text  x="1161.14" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::begin (8 samples, 0.01%)</title><rect x="863.2" y="405" width="0.1" height="15.0" fill="rgb(236,94,17)" rx="2" ry="2" />
<text  x="866.20" y="415.5" ></text>
</g>
<g >
<title>__bam_iitem (64 samples, 0.07%)</title><rect x="152.2" y="501" width="0.8" height="15.0" fill="rgb(248,18,46)" rx="2" ry="2" />
<text  x="155.19" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (55 samples, 0.06%)</title><rect x="990.8" y="581" width="0.7" height="15.0" fill="rgb(248,51,37)" rx="2" ry="2" />
<text  x="993.80" y="591.5" ></text>
</g>
<g >
<title>__bam_vrfy_structure (39 samples, 0.04%)</title><rect x="1143.9" y="613" width="0.5" height="15.0" fill="rgb(222,174,52)" rx="2" ry="2" />
<text  x="1146.88" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, char*&gt;, unsigned long&amp;, char*&amp;&gt; (17 samples, 0.02%)</title><rect x="674.4" y="485" width="0.2" height="15.0" fill="rgb(216,11,51)" rx="2" ry="2" />
<text  x="677.39" y="495.5" ></text>
</g>
<g >
<title>operator== (22 samples, 0.03%)</title><rect x="1061.4" y="677" width="0.3" height="15.0" fill="rgb(209,207,4)" rx="2" ry="2" />
<text  x="1064.38" y="687.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (118 samples, 0.13%)</title><rect x="606.6" y="645" width="1.6" height="15.0" fill="rgb(212,37,5)" rx="2" ry="2" />
<text  x="609.59" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::deallocate (31 samples, 0.04%)</title><rect x="590.5" y="533" width="0.4" height="15.0" fill="rgb(243,14,34)" rx="2" ry="2" />
<text  x="593.53" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (30 samples, 0.03%)</title><rect x="514.1" y="341" width="0.4" height="15.0" fill="rgb(227,174,8)" rx="2" ry="2" />
<text  x="517.10" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (34 samples, 0.04%)</title><rect x="858.3" y="341" width="0.5" height="15.0" fill="rgb(213,71,6)" rx="2" ry="2" />
<text  x="861.31" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_emplace_equal&lt;unsigned long&amp;, char*&amp;&gt; (129 samples, 0.15%)</title><rect x="1079.0" y="549" width="1.7" height="15.0" fill="rgb(218,212,15)" rx="2" ry="2" />
<text  x="1081.98" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (382 samples, 0.44%)</title><rect x="364.3" y="597" width="5.1" height="15.0" fill="rgb(223,96,22)" rx="2" ry="2" />
<text  x="367.30" y="607.5" ></text>
</g>
<g >
<title>InitScriptExecutionCache (63 samples, 0.07%)</title><rect x="30.4" y="709" width="0.9" height="15.0" fill="rgb(241,100,33)" rx="2" ry="2" />
<text  x="33.42" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt; &gt;::allocate (64 samples, 0.07%)</title><rect x="825.8" y="565" width="0.8" height="15.0" fill="rgb(228,19,27)" rx="2" ry="2" />
<text  x="828.75" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (62 samples, 0.07%)</title><rect x="932.8" y="597" width="0.9" height="15.0" fill="rgb(228,43,15)" rx="2" ry="2" />
<text  x="935.85" y="607.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CSizeComputer&gt; (995 samples, 1.14%)</title><rect x="1023.7" y="613" width="13.4" height="15.0" fill="rgb(224,182,1)" rx="2" ry="2" />
<text  x="1026.72" y="623.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.01%)</title><rect x="179.3" y="373" width="0.1" height="15.0" fill="rgb(207,38,23)" rx="2" ry="2" />
<text  x="182.33" y="383.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (121 samples, 0.14%)</title><rect x="936.3" y="549" width="1.7" height="15.0" fill="rgb(223,60,44)" rx="2" ry="2" />
<text  x="939.34" y="559.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (19 samples, 0.02%)</title><rect x="735.2" y="629" width="0.2" height="15.0" fill="rgb(219,181,18)" rx="2" ry="2" />
<text  x="738.15" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (14 samples, 0.02%)</title><rect x="448.0" y="517" width="0.2" height="15.0" fill="rgb(211,85,7)" rx="2" ry="2" />
<text  x="450.96" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_construct&lt;char, char const&amp;&gt; (66 samples, 0.08%)</title><rect x="1170.6" y="757" width="0.9" height="15.0" fill="rgb(238,57,0)" rx="2" ry="2" />
<text  x="1173.57" y="767.5" ></text>
</g>
<g >
<title>VerifyWallets (9,138 samples, 10.44%)</title><rect x="57.8" y="709" width="123.1" height="15.0" fill="rgb(213,167,28)" rx="2" ry="2" />
<text  x="60.79" y="719.5" >VerifyWallets</text>
</g>
<g >
<title>__os_malloc (35 samples, 0.04%)</title><rect x="80.4" y="469" width="0.4" height="15.0" fill="rgb(215,25,18)" rx="2" ry="2" />
<text  x="83.37" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="857.6" y="277" width="0.1" height="15.0" fill="rgb(232,197,6)" rx="2" ry="2" />
<text  x="860.56" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (26 samples, 0.03%)</title><rect x="462.9" y="597" width="0.4" height="15.0" fill="rgb(208,192,25)" rx="2" ry="2" />
<text  x="465.91" y="607.5" ></text>
</g>
<g >
<title>CScriptWitness::~CScriptWitness (27 samples, 0.03%)</title><rect x="525.6" y="293" width="0.3" height="15.0" fill="rgb(229,27,37)" rx="2" ry="2" />
<text  x="528.58" y="303.5" ></text>
</g>
<g >
<title>__mutex_alloc_int (10 samples, 0.01%)</title><rect x="87.1" y="389" width="0.1" height="15.0" fill="rgb(249,29,41)" rx="2" ry="2" />
<text  x="90.08" y="399.5" ></text>
</g>
<g >
<title>__env_alloc (17 samples, 0.02%)</title><rect x="97.7" y="373" width="0.3" height="15.0" fill="rgb(236,77,39)" rx="2" ry="2" />
<text  x="100.74" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_Vector_base (8 samples, 0.01%)</title><rect x="1179.6" y="741" width="0.1" height="15.0" fill="rgb(233,220,47)" rx="2" ry="2" />
<text  x="1182.57" y="751.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (88 samples, 0.10%)</title><rect x="552.7" y="149" width="1.2" height="15.0" fill="rgb(208,82,35)" rx="2" ry="2" />
<text  x="555.71" y="159.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (41 samples, 0.05%)</title><rect x="65.7" y="501" width="0.5" height="15.0" fill="rgb(224,152,13)" rx="2" ry="2" />
<text  x="68.66" y="511.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (64 samples, 0.07%)</title><rect x="343.3" y="549" width="0.8" height="15.0" fill="rgb(212,135,38)" rx="2" ry="2" />
<text  x="346.25" y="559.5" ></text>
</g>
<g >
<title>__db_vrfy_pgset_get (520 samples, 0.59%)</title><rect x="105.7" y="501" width="7.0" height="15.0" fill="rgb(216,129,36)" rx="2" ry="2" />
<text  x="108.69" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::erase (92 samples, 0.11%)</title><rect x="681.3" y="549" width="1.3" height="15.0" fill="rgb(231,211,37)" rx="2" ry="2" />
<text  x="684.32" y="559.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::allocate (955 samples, 1.09%)</title><rect x="651.8" y="597" width="12.9" height="15.0" fill="rgb(242,40,21)" rx="2" ry="2" />
<text  x="654.82" y="607.5" ></text>
</g>
<g >
<title>ShiftMessageB (20 samples, 0.02%)</title><rect x="1135.4" y="661" width="0.3" height="15.0" fill="rgb(235,223,32)" rx="2" ry="2" />
<text  x="1138.39" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (9 samples, 0.01%)</title><rect x="843.6" y="581" width="0.1" height="15.0" fill="rgb(219,186,47)" rx="2" ry="2" />
<text  x="846.57" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (17 samples, 0.02%)</title><rect x="344.2" y="549" width="0.3" height="15.0" fill="rgb(222,103,32)" rx="2" ry="2" />
<text  x="347.24" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (235 samples, 0.27%)</title><rect x="451.8" y="517" width="3.2" height="15.0" fill="rgb(225,203,16)" rx="2" ry="2" />
<text  x="454.79" y="527.5" ></text>
</g>
<g >
<title>__memp_fget (51 samples, 0.06%)</title><rect x="171.3" y="485" width="0.7" height="15.0" fill="rgb(236,124,46)" rx="2" ry="2" />
<text  x="174.30" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::tuple&lt;interfaces::Chain::Lock*&amp;, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, true&gt; (61 samples, 0.07%)</title><rect x="947.8" y="597" width="0.8" height="15.0" fill="rgb(208,122,2)" rx="2" ry="2" />
<text  x="950.81" y="607.5" ></text>
</g>
<g >
<title>std::make_shared&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (7,705 samples, 8.80%)</title><rect x="463.7" y="597" width="103.9" height="15.0" fill="rgb(205,151,1)" rx="2" ry="2" />
<text  x="466.73" y="607.5" >std::make_sh..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (16 samples, 0.02%)</title><rect x="544.6" y="245" width="0.2" height="15.0" fill="rgb(227,148,20)" rx="2" ry="2" />
<text  x="547.56" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocator (10 samples, 0.01%)</title><rect x="1017.7" y="613" width="0.1" height="15.0" fill="rgb(237,104,45)" rx="2" ry="2" />
<text  x="1020.67" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (26 samples, 0.03%)</title><rect x="871.0" y="581" width="0.3" height="15.0" fill="rgb(229,97,39)" rx="2" ry="2" />
<text  x="873.97" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (17 samples, 0.02%)</title><rect x="915.9" y="533" width="0.2" height="15.0" fill="rgb(246,107,37)" rx="2" ry="2" />
<text  x="918.89" y="543.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::count (158 samples, 0.18%)</title><rect x="579.5" y="613" width="2.2" height="15.0" fill="rgb(221,96,41)" rx="2" ry="2" />
<text  x="582.53" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_base (18 samples, 0.02%)</title><rect x="867.9" y="485" width="0.2" height="15.0" fill="rgb(227,110,35)" rx="2" ry="2" />
<text  x="870.85" y="495.5" ></text>
</g>
<g >
<title>CHash160::CHash160 (10 samples, 0.01%)</title><rect x="744.5" y="597" width="0.1" height="15.0" fill="rgb(211,129,20)" rx="2" ry="2" />
<text  x="747.46" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (9 samples, 0.01%)</title><rect x="676.5" y="517" width="0.1" height="15.0" fill="rgb(224,193,46)" rx="2" ry="2" />
<text  x="679.49" y="527.5" ></text>
</g>
<g >
<title>QuadRound (186 samples, 0.21%)</title><rect x="1128.0" y="645" width="2.5" height="15.0" fill="rgb(251,177,1)" rx="2" ry="2" />
<text  x="1131.00" y="655.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (80 samples, 0.09%)</title><rect x="176.2" y="549" width="1.1" height="15.0" fill="rgb(220,47,47)" rx="2" ry="2" />
<text  x="179.22" y="559.5" ></text>
</g>
<g >
<title>__lock_get (17 samples, 0.02%)</title><rect x="71.9" y="453" width="0.2" height="15.0" fill="rgb(205,50,15)" rx="2" ry="2" />
<text  x="74.86" y="463.5" ></text>
</g>
<g >
<title>std::less&lt;COutPoint&gt;::operator (9 samples, 0.01%)</title><rect x="1044.9" y="613" width="0.1" height="15.0" fill="rgb(244,203,33)" rx="2" ry="2" />
<text  x="1047.89" y="623.5" ></text>
</g>
<g >
<title>uint256::uint256 (13 samples, 0.01%)</title><rect x="542.8" y="389" width="0.1" height="15.0" fill="rgb(218,1,5)" rx="2" ry="2" />
<text  x="545.75" y="399.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (16 samples, 0.02%)</title><rect x="157.7" y="485" width="0.2" height="15.0" fill="rgb(244,70,17)" rx="2" ry="2" />
<text  x="160.70" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator* (16 samples, 0.02%)</title><rect x="550.2" y="293" width="0.2" height="15.0" fill="rgb(232,71,31)" rx="2" ry="2" />
<text  x="553.21" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::clear (10 samples, 0.01%)</title><rect x="489.3" y="357" width="0.1" height="15.0" fill="rgb(254,149,32)" rx="2" ry="2" />
<text  x="492.27" y="367.5" ></text>
</g>
<g >
<title>KeyOriginInfo::~KeyOriginInfo (30 samples, 0.03%)</title><rect x="685.3" y="661" width="0.4" height="15.0" fill="rgb(214,72,20)" rx="2" ry="2" />
<text  x="688.30" y="671.5" ></text>
</g>
<g >
<title>boost::aligned_storage&lt;48ul, 4ul&gt;::address (13 samples, 0.01%)</title><rect x="807.2" y="549" width="0.2" height="15.0" fill="rgb(231,148,32)" rx="2" ry="2" />
<text  x="810.25" y="559.5" ></text>
</g>
<g >
<title>LockedPoolManager::Instance (23 samples, 0.03%)</title><rect x="664.4" y="581" width="0.3" height="15.0" fill="rgb(210,17,49)" rx="2" ry="2" />
<text  x="667.38" y="591.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;CTransaction const, std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="629" width="13.8" height="15.0" fill="rgb(228,153,13)" rx="2" ry="2" />
<text  x="1107.95" y="639.5" ></text>
</g>
<g >
<title>CHash256::Write (36 samples, 0.04%)</title><rect x="530.8" y="85" width="0.5" height="15.0" fill="rgb(227,105,9)" rx="2" ry="2" />
<text  x="533.80" y="95.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="73.9" y="453" width="0.2" height="15.0" fill="rgb(245,118,24)" rx="2" ry="2" />
<text  x="76.92" y="463.5" ></text>
</g>
<g >
<title>__db_lput (30 samples, 0.03%)</title><rect x="148.0" y="501" width="0.5" height="15.0" fill="rgb(247,131,2)" rx="2" ry="2" />
<text  x="151.05" y="511.5" ></text>
</g>
<g >
<title>Hash160&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (98 samples, 0.11%)</title><rect x="1120.5" y="677" width="1.3" height="15.0" fill="rgb(212,201,44)" rx="2" ry="2" />
<text  x="1123.50" y="687.5" ></text>
</g>
<g >
<title>SaltedTxidHasher::operator (120 samples, 0.14%)</title><rect x="993.6" y="597" width="1.6" height="15.0" fill="rgb(220,88,51)" rx="2" ry="2" />
<text  x="996.58" y="607.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (76 samples, 0.09%)</title><rect x="873.8" y="549" width="1.0" height="15.0" fill="rgb(234,93,40)" rx="2" ry="2" />
<text  x="876.82" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (17 samples, 0.02%)</title><rect x="545.1" y="261" width="0.2" height="15.0" fill="rgb(231,44,37)" rx="2" ry="2" />
<text  x="548.10" y="271.5" ></text>
</g>
<g >
<title>CDataStream::read (15 samples, 0.02%)</title><rect x="43.4" y="485" width="0.2" height="15.0" fill="rgb(213,178,15)" rx="2" ry="2" />
<text  x="46.42" y="495.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CWalletTx&gt;, false, true&gt;, bool&gt; (30 samples, 0.03%)</title><rect x="1003.9" y="613" width="0.4" height="15.0" fill="rgb(209,98,48)" rx="2" ry="2" />
<text  x="1006.88" y="623.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::begin (12 samples, 0.01%)</title><rect x="811.8" y="437" width="0.1" height="15.0" fill="rgb(252,103,19)" rx="2" ry="2" />
<text  x="814.78" y="447.5" ></text>
</g>
<g >
<title>__bam_ca_di (43 samples, 0.05%)</title><rect x="120.0" y="421" width="0.6" height="15.0" fill="rgb(234,187,22)" rx="2" ry="2" />
<text  x="122.98" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (8 samples, 0.01%)</title><rect x="156.0" y="437" width="0.1" height="15.0" fill="rgb(223,22,26)" rx="2" ry="2" />
<text  x="158.96" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="344.1" y="549" width="0.1" height="15.0" fill="rgb(254,28,14)" rx="2" ry="2" />
<text  x="347.11" y="559.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (22 samples, 0.03%)</title><rect x="477.4" y="149" width="0.3" height="15.0" fill="rgb(205,167,32)" rx="2" ry="2" />
<text  x="480.39" y="159.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock (24 samples, 0.03%)</title><rect x="836.5" y="597" width="0.3" height="15.0" fill="rgb(230,211,9)" rx="2" ry="2" />
<text  x="839.51" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (12 samples, 0.01%)</title><rect x="177.3" y="517" width="0.2" height="15.0" fill="rgb(229,65,29)" rx="2" ry="2" />
<text  x="180.31" y="527.5" ></text>
</g>
<g >
<title>COutPoint::COutPoint (13 samples, 0.01%)</title><rect x="525.0" y="293" width="0.2" height="15.0" fill="rgb(217,212,6)" rx="2" ry="2" />
<text  x="527.98" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::end (11 samples, 0.01%)</title><rect x="612.1" y="501" width="0.2" height="15.0" fill="rgb(214,155,14)" rx="2" ry="2" />
<text  x="615.14" y="511.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (20 samples, 0.02%)</title><rect x="1144.6" y="581" width="0.2" height="15.0" fill="rgb(235,215,7)" rx="2" ry="2" />
<text  x="1147.57" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (90 samples, 0.10%)</title><rect x="401.2" y="469" width="1.2" height="15.0" fill="rgb(247,91,9)" rx="2" ry="2" />
<text  x="404.19" y="479.5" ></text>
</g>
<g >
<title>CHash256::Finalize (111 samples, 0.13%)</title><rect x="1053.4" y="661" width="1.5" height="15.0" fill="rgb(205,59,45)" rx="2" ry="2" />
<text  x="1056.38" y="671.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, uint160&amp;&gt; (124 samples, 0.14%)</title><rect x="634.0" y="661" width="1.6" height="15.0" fill="rgb(236,193,5)" rx="2" ry="2" />
<text  x="636.97" y="671.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;LockedPool::LockedPageArena&gt;::operator* (9 samples, 0.01%)</title><rect x="663.6" y="565" width="0.2" height="15.0" fill="rgb(232,69,32)" rx="2" ry="2" />
<text  x="666.63" y="575.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.02%)</title><rect x="135.9" y="341" width="0.3" height="15.0" fill="rgb(249,128,35)" rx="2" ry="2" />
<text  x="138.91" y="351.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned char const*, unsigned char*&gt; (34 samples, 0.04%)</title><rect x="1097.7" y="581" width="0.4" height="15.0" fill="rgb(245,41,54)" rx="2" ry="2" />
<text  x="1100.69" y="591.5" ></text>
</g>
<g >
<title>boost::optional&lt;int&gt;::operator* (16 samples, 0.02%)</title><rect x="33.8" y="613" width="0.3" height="15.0" fill="rgb(205,19,8)" rx="2" ry="2" />
<text  x="36.84" y="623.5" ></text>
</g>
<g >
<title>CValidationState::CValidationState (11 samples, 0.01%)</title><rect x="704.8" y="677" width="0.2" height="15.0" fill="rgb(235,90,3)" rx="2" ry="2" />
<text  x="707.84" y="687.5" ></text>
</g>
<g >
<title>__lock_put (12 samples, 0.01%)</title><rect x="100.3" y="405" width="0.2" height="15.0" fill="rgb(212,95,23)" rx="2" ry="2" />
<text  x="103.32" y="415.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::deallocate (821 samples, 0.94%)</title><rect x="673.3" y="597" width="11.0" height="15.0" fill="rgb(246,96,14)" rx="2" ry="2" />
<text  x="676.27" y="607.5" ></text>
</g>
<g >
<title>CDataStream::read (12 samples, 0.01%)</title><rect x="398.6" y="485" width="0.2" height="15.0" fill="rgb(233,155,32)" rx="2" ry="2" />
<text  x="401.61" y="495.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 0.02%)</title><rect x="179.2" y="405" width="0.2" height="15.0" fill="rgb(217,215,40)" rx="2" ry="2" />
<text  x="182.25" y="415.5" ></text>
</g>
<g >
<title>CDataStream::read (23 samples, 0.03%)</title><rect x="396.2" y="437" width="0.3" height="15.0" fill="rgb(210,226,44)" rx="2" ry="2" />
<text  x="399.20" y="447.5" ></text>
</g>
<g >
<title>std::_Identity&lt;COutPoint&gt;::operator (10 samples, 0.01%)</title><rect x="1039.1" y="629" width="0.2" height="15.0" fill="rgb(215,172,34)" rx="2" ry="2" />
<text  x="1042.15" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::begin (11 samples, 0.01%)</title><rect x="683.4" y="565" width="0.2" height="15.0" fill="rgb(254,171,18)" rx="2" ry="2" />
<text  x="686.43" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (671 samples, 0.77%)</title><rect x="138.5" y="517" width="9.0" height="15.0" fill="rgb(207,196,2)" rx="2" ry="2" />
<text  x="141.48" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (10 samples, 0.01%)</title><rect x="676.0" y="517" width="0.2" height="15.0" fill="rgb(254,13,54)" rx="2" ry="2" />
<text  x="679.03" y="527.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*&gt; (12 samples, 0.01%)</title><rect x="743.1" y="565" width="0.1" height="15.0" fill="rgb(235,198,50)" rx="2" ry="2" />
<text  x="746.08" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;char* const&amp;&gt;::tuple (21 samples, 0.02%)</title><rect x="1084.2" y="485" width="0.3" height="15.0" fill="rgb(233,216,11)" rx="2" ry="2" />
<text  x="1087.21" y="495.5" ></text>
</g>
<g >
<title>__db_cursor_int (34 samples, 0.04%)</title><rect x="88.7" y="469" width="0.5" height="15.0" fill="rgb(225,210,20)" rx="2" ry="2" />
<text  x="91.71" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTransaction&gt;::destroy&lt;CTransaction const&gt; (41 samples, 0.05%)</title><rect x="570.9" y="485" width="0.5" height="15.0" fill="rgb(246,147,48)" rx="2" ry="2" />
<text  x="573.85" y="495.5" ></text>
</g>
<g >
<title>CTxOut::CTxOut (19 samples, 0.02%)</title><rect x="1032.6" y="549" width="0.3" height="15.0" fill="rgb(224,34,7)" rx="2" ry="2" />
<text  x="1035.61" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, unsigned long, true&gt;::_S_equals (27 samples, 0.03%)</title><rect x="839.6" y="549" width="0.4" height="15.0" fill="rgb(211,45,11)" rx="2" ry="2" />
<text  x="842.59" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (18 samples, 0.02%)</title><rect x="857.0" y="309" width="0.2" height="15.0" fill="rgb(227,5,16)" rx="2" ry="2" />
<text  x="859.96" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_get_insert_equal_pos (35 samples, 0.04%)</title><rect x="849.5" y="357" width="0.5" height="15.0" fill="rgb(253,170,54)" rx="2" ry="2" />
<text  x="852.52" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair (11 samples, 0.01%)</title><rect x="835.3" y="501" width="0.2" height="15.0" fill="rgb(243,158,20)" rx="2" ry="2" />
<text  x="838.32" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_v (12 samples, 0.01%)</title><rect x="926.7" y="565" width="0.1" height="15.0" fill="rgb(218,122,19)" rx="2" ry="2" />
<text  x="929.68" y="575.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (29 samples, 0.03%)</title><rect x="725.0" y="597" width="0.4" height="15.0" fill="rgb(227,162,38)" rx="2" ry="2" />
<text  x="727.99" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (10 samples, 0.01%)</title><rect x="937.0" y="517" width="0.1" height="15.0" fill="rgb(243,11,6)" rx="2" ry="2" />
<text  x="940.00" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::_M_valptr (33 samples, 0.04%)</title><rect x="848.0" y="373" width="0.4" height="15.0" fill="rgb(213,40,7)" rx="2" ry="2" />
<text  x="850.99" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (8 samples, 0.01%)</title><rect x="979.5" y="613" width="0.1" height="15.0" fill="rgb(252,184,21)" rx="2" ry="2" />
<text  x="982.50" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;::base (8 samples, 0.01%)</title><rect x="1094.0" y="533" width="0.1" height="15.0" fill="rgb(216,61,35)" rx="2" ry="2" />
<text  x="1097.02" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (115 samples, 0.13%)</title><rect x="840.0" y="597" width="1.5" height="15.0" fill="rgb(213,112,49)" rx="2" ry="2" />
<text  x="843.00" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::max_size (14 samples, 0.02%)</title><rect x="633.2" y="581" width="0.2" height="15.0" fill="rgb(251,36,16)" rx="2" ry="2" />
<text  x="636.19" y="591.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (9 samples, 0.01%)</title><rect x="136.9" y="469" width="0.2" height="15.0" fill="rgb(243,65,18)" rx="2" ry="2" />
<text  x="139.95" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="677.1" y="501" width="0.2" height="15.0" fill="rgb(233,41,4)" rx="2" ry="2" />
<text  x="680.08" y="511.5" ></text>
</g>
<g >
<title>__memp_fget (9 samples, 0.01%)</title><rect x="103.4" y="373" width="0.2" height="15.0" fill="rgb(218,34,4)" rx="2" ry="2" />
<text  x="106.44" y="383.5" ></text>
</g>
<g >
<title>ser_writedata64&lt;CHashWriter&gt; (27 samples, 0.03%)</title><rect x="554.2" y="197" width="0.4" height="15.0" fill="rgb(226,88,40)" rx="2" ry="2" />
<text  x="557.19" y="207.5" ></text>
</g>
<g >
<title>std::__distance&lt;char const*&gt; (8 samples, 0.01%)</title><rect x="828.9" y="533" width="0.1" height="15.0" fill="rgb(212,198,18)" rx="2" ry="2" />
<text  x="831.87" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (65 samples, 0.07%)</title><rect x="582.9" y="565" width="0.9" height="15.0" fill="rgb(221,103,34)" rx="2" ry="2" />
<text  x="585.91" y="575.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (164 samples, 0.19%)</title><rect x="180.9" y="309" width="2.2" height="15.0" fill="rgb(244,157,33)" rx="2" ry="2" />
<text  x="183.93" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;CBlockIndex*  (123 samples, 0.14%)</title><rect x="47.8" y="661" width="1.7" height="15.0" fill="rgb(253,192,27)" rx="2" ry="2" />
<text  x="50.80" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::emplace&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (11 samples, 0.01%)</title><rect x="655.5" y="549" width="0.1" height="15.0" fill="rgb(227,127,50)" rx="2" ry="2" />
<text  x="658.45" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (103 samples, 0.12%)</title><rect x="634.2" y="597" width="1.4" height="15.0" fill="rgb(220,50,5)" rx="2" ry="2" />
<text  x="637.19" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;uint256 const&amp;&gt; (10 samples, 0.01%)</title><rect x="905.7" y="613" width="0.1" height="15.0" fill="rgb(231,77,31)" rx="2" ry="2" />
<text  x="908.67" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (53 samples, 0.06%)</title><rect x="587.0" y="597" width="0.7" height="15.0" fill="rgb(224,108,52)" rx="2" ry="2" />
<text  x="589.98" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (59 samples, 0.07%)</title><rect x="1043.3" y="549" width="0.8" height="15.0" fill="rgb(222,136,34)" rx="2" ry="2" />
<text  x="1046.28" y="559.5" ></text>
</g>
<g >
<title>__dbc_close (45 samples, 0.05%)</title><rect x="73.6" y="533" width="0.6" height="15.0" fill="rgb(223,156,3)" rx="2" ry="2" />
<text  x="76.63" y="543.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (92 samples, 0.11%)</title><rect x="547.8" y="133" width="1.3" height="15.0" fill="rgb(243,160,36)" rx="2" ry="2" />
<text  x="550.82" y="143.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (8 samples, 0.01%)</title><rect x="1166.9" y="741" width="0.1" height="15.0" fill="rgb(215,98,44)" rx="2" ry="2" />
<text  x="1169.89" y="751.5" ></text>
</g>
<g >
<title>Shuffle (8 samples, 0.01%)</title><rect x="1113.3" y="373" width="0.1" height="15.0" fill="rgb(233,129,49)" rx="2" ry="2" />
<text  x="1116.25" y="383.5" ></text>
</g>
<g >
<title>_int_malloc (21 samples, 0.02%)</title><rect x="662.4" y="421" width="0.3" height="15.0" fill="rgb(242,214,26)" rx="2" ry="2" />
<text  x="665.45" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (9 samples, 0.01%)</title><rect x="1025.6" y="485" width="0.1" height="15.0" fill="rgb(250,51,35)" rx="2" ry="2" />
<text  x="1028.56" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (12 samples, 0.01%)</title><rect x="816.9" y="421" width="0.2" height="15.0" fill="rgb(222,105,8)" rx="2" ry="2" />
<text  x="819.90" y="431.5" ></text>
</g>
<g >
<title>WriteBE32 (55 samples, 0.06%)</title><rect x="521.1" y="357" width="0.8" height="15.0" fill="rgb(213,108,53)" rx="2" ry="2" />
<text  x="524.11" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_node_allocator (12 samples, 0.01%)</title><rect x="657.5" y="453" width="0.2" height="15.0" fill="rgb(220,93,47)" rx="2" ry="2" />
<text  x="660.53" y="463.5" ></text>
</g>
<g >
<title>SaltedTxidHasher::operator (159 samples, 0.18%)</title><rect x="1012.6" y="613" width="2.1" height="15.0" fill="rgb(211,214,44)" rx="2" ry="2" />
<text  x="1015.57" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (15 samples, 0.02%)</title><rect x="1095.8" y="661" width="0.2" height="15.0" fill="rgb(237,24,53)" rx="2" ry="2" />
<text  x="1098.84" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_drop_node (117 samples, 0.13%)</title><rect x="589.4" y="565" width="1.5" height="15.0" fill="rgb(240,71,30)" rx="2" ry="2" />
<text  x="592.37" y="575.5" ></text>
</g>
<g >
<title>std::allocator&lt;CTxOut&gt;::~allocator (9 samples, 0.01%)</title><rect x="518.7" y="389" width="0.1" height="15.0" fill="rgb(213,211,4)" rx="2" ry="2" />
<text  x="521.73" y="399.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, int&amp;&gt; (26 samples, 0.03%)</title><rect x="402.4" y="613" width="0.4" height="15.0" fill="rgb(219,126,51)" rx="2" ry="2" />
<text  x="405.44" y="623.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, CMerkleTx, std::allocator&lt;CMerkleTx&gt;, CMerkleTx&gt; (58 samples, 0.07%)</title><rect x="572.1" y="597" width="0.8" height="15.0" fill="rgb(237,141,36)" rx="2" ry="2" />
<text  x="575.12" y="607.5" ></text>
</g>
<g >
<title>COutPoint::IsNull (76 samples, 0.09%)</title><rect x="35.9" y="613" width="1.0" height="15.0" fill="rgb(210,98,15)" rx="2" ry="2" />
<text  x="38.87" y="623.5" ></text>
</g>
<g >
<title>__db_lget (103 samples, 0.12%)</title><rect x="92.5" y="405" width="1.3" height="15.0" fill="rgb(218,210,40)" rx="2" ry="2" />
<text  x="95.46" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (16 samples, 0.02%)</title><rect x="465.6" y="501" width="0.2" height="15.0" fill="rgb(224,74,32)" rx="2" ry="2" />
<text  x="468.63" y="511.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (12 samples, 0.01%)</title><rect x="809.5" y="437" width="0.2" height="15.0" fill="rgb(242,197,24)" rx="2" ry="2" />
<text  x="812.54" y="447.5" ></text>
</g>
<g >
<title>CWallet::LoadKeyPool (9 samples, 0.01%)</title><rect x="1127.4" y="725" width="0.2" height="15.0" fill="rgb(245,189,40)" rx="2" ry="2" />
<text  x="1130.43" y="735.5" ></text>
</g>
<g >
<title>std::operator== (14 samples, 0.02%)</title><rect x="879.5" y="565" width="0.2" height="15.0" fill="rgb(208,165,36)" rx="2" ry="2" />
<text  x="882.50" y="575.5" ></text>
</g>
<g >
<title>_int_malloc (14 samples, 0.02%)</title><rect x="928.9" y="485" width="0.2" height="15.0" fill="rgb(212,72,12)" rx="2" ry="2" />
<text  x="931.94" y="495.5" ></text>
</g>
<g >
<title>BerkeleyBatch::ReadAtCursor (14,609 samples, 16.68%)</title><rect x="186.4" y="693" width="196.9" height="15.0" fill="rgb(254,159,36)" rx="2" ry="2" />
<text  x="189.39" y="703.5" >BerkeleyBatch::ReadAtCursor</text>
</g>
<g >
<title>__bam_search (273 samples, 0.31%)</title><rect x="122.5" y="421" width="3.7" height="15.0" fill="rgb(234,39,15)" rx="2" ry="2" />
<text  x="125.47" y="431.5" ></text>
</g>
<g >
<title>CHashWriter::write (26 samples, 0.03%)</title><rect x="559.6" y="261" width="0.3" height="15.0" fill="rgb(242,56,48)" rx="2" ry="2" />
<text  x="562.58" y="271.5" ></text>
</g>
<g >
<title>__lock_put (27 samples, 0.03%)</title><rect x="84.3" y="405" width="0.4" height="15.0" fill="rgb(212,108,1)" rx="2" ry="2" />
<text  x="87.31" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator++ (8 samples, 0.01%)</title><rect x="550.4" y="293" width="0.1" height="15.0" fill="rgb(210,228,2)" rx="2" ry="2" />
<text  x="553.42" y="303.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void*&amp;, CLockLocation const&amp;&gt; (42 samples, 0.05%)</title><rect x="830.7" y="565" width="0.6" height="15.0" fill="rgb(232,170,7)" rx="2" ry="2" />
<text  x="833.73" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_range_insert&lt;char const*&gt; (9,321 samples, 10.65%)</title><rect x="199.2" y="629" width="125.6" height="15.0" fill="rgb(217,72,8)" rx="2" ry="2" />
<text  x="202.23" y="639.5" >std::vector&lt;cha..</text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (157 samples, 0.18%)</title><rect x="530.4" y="133" width="2.2" height="15.0" fill="rgb(217,224,24)" rx="2" ry="2" />
<text  x="533.44" y="143.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (10 samples, 0.01%)</title><rect x="47.1" y="549" width="0.1" height="15.0" fill="rgb(214,208,47)" rx="2" ry="2" />
<text  x="50.11" y="559.5" ></text>
</g>
<g >
<title>CScript::clear (13 samples, 0.01%)</title><rect x="1032.7" y="517" width="0.2" height="15.0" fill="rgb(242,64,45)" rx="2" ry="2" />
<text  x="1035.69" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (595 samples, 0.68%)</title><rect x="1135.8" y="661" width="8.0" height="15.0" fill="rgb(238,46,9)" rx="2" ry="2" />
<text  x="1138.80" y="671.5" ></text>
</g>
<g >
<title>CKey::Load (112 samples, 0.13%)</title><rect x="669.5" y="677" width="1.5" height="15.0" fill="rgb(222,14,14)" rx="2" ry="2" />
<text  x="672.50" y="687.5" ></text>
</g>
<g >
<title>CSHA256::Reset (10 samples, 0.01%)</title><rect x="522.1" y="373" width="0.1" height="15.0" fill="rgb(217,106,31)" rx="2" ry="2" />
<text  x="525.11" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (17 samples, 0.02%)</title><rect x="1083.5" y="517" width="0.3" height="15.0" fill="rgb(253,152,2)" rx="2" ry="2" />
<text  x="1086.54" y="527.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (13 samples, 0.01%)</title><rect x="1189.8" y="677" width="0.2" height="15.0" fill="rgb(223,77,29)" rx="2" ry="2" />
<text  x="1192.82" y="687.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char&gt; (8 samples, 0.01%)</title><rect x="742.5" y="549" width="0.1" height="15.0" fill="rgb(225,30,21)" rx="2" ry="2" />
<text  x="745.52" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (21 samples, 0.02%)</title><rect x="111.3" y="373" width="0.3" height="15.0" fill="rgb(251,95,8)" rx="2" ry="2" />
<text  x="114.31" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::data (14 samples, 0.02%)</title><rect x="670.7" y="661" width="0.2" height="15.0" fill="rgb(223,223,34)" rx="2" ry="2" />
<text  x="673.75" y="671.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (1,681 samples, 1.92%)</title><rect x="541.2" y="421" width="22.7" height="15.0" fill="rgb(239,96,10)" rx="2" ry="2" />
<text  x="544.22" y="431.5" >S..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;::operator (28 samples, 0.03%)</title><rect x="652.4" y="549" width="0.4" height="15.0" fill="rgb(239,81,45)" rx="2" ry="2" />
<text  x="655.45" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="878.9" y="517" width="0.1" height="15.0" fill="rgb(211,191,19)" rx="2" ry="2" />
<text  x="881.93" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_check_len (42 samples, 0.05%)</title><rect x="482.9" y="325" width="0.6" height="15.0" fill="rgb(249,97,36)" rx="2" ry="2" />
<text  x="485.95" y="335.5" ></text>
</g>
<g >
<title>ShiftMessageB (12 samples, 0.01%)</title><rect x="182.8" y="149" width="0.2" height="15.0" fill="rgb(252,140,42)" rx="2" ry="2" />
<text  x="185.80" y="159.5" ></text>
</g>
<g >
<title>ShiftMessageB (20 samples, 0.02%)</title><rect x="1113.0" y="373" width="0.3" height="15.0" fill="rgb(206,191,10)" rx="2" ry="2" />
<text  x="1115.98" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator++ (44 samples, 0.05%)</title><rect x="593.3" y="581" width="0.6" height="15.0" fill="rgb(228,141,53)" rx="2" ry="2" />
<text  x="596.34" y="591.5" ></text>
</g>
<g >
<title>COutPoint::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (95 samples, 0.11%)</title><rect x="1027.9" y="421" width="1.3" height="15.0" fill="rgb(220,68,8)" rx="2" ry="2" />
<text  x="1030.88" y="431.5" ></text>
</g>
<g >
<title>_int_malloc (18 samples, 0.02%)</title><rect x="79.6" y="421" width="0.3" height="15.0" fill="rgb(216,52,28)" rx="2" ry="2" />
<text  x="82.62" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, CChainState*, std::default_delete&lt;CChainState&gt; &gt;::_M_head (17 samples, 0.02%)</title><rect x="954.7" y="549" width="0.2" height="15.0" fill="rgb(230,192,33)" rx="2" ry="2" />
<text  x="957.71" y="559.5" ></text>
</g>
<g >
<title>__bam_search (67 samples, 0.08%)</title><rect x="102.3" y="405" width="0.9" height="15.0" fill="rgb(224,9,35)" rx="2" ry="2" />
<text  x="105.27" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (541 samples, 0.62%)</title><rect x="643.6" y="565" width="7.3" height="15.0" fill="rgb(249,42,51)" rx="2" ry="2" />
<text  x="646.62" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_get_node (18 samples, 0.02%)</title><rect x="1079.7" y="517" width="0.3" height="15.0" fill="rgb(227,127,15)" rx="2" ry="2" />
<text  x="1082.72" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;, std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt;, std::_Select1st&lt;std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt; &gt;, std::less&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; &gt;, std::allocator&lt;std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt; &gt; &gt;::_M_lower_bound (13 samples, 0.01%)</title><rect x="1062.0" y="629" width="0.2" height="15.0" fill="rgb(205,21,0)" rx="2" ry="2" />
<text  x="1065.03" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~_Vector_base (12 samples, 0.01%)</title><rect x="518.1" y="421" width="0.2" height="15.0" fill="rgb(205,100,50)" rx="2" ry="2" />
<text  x="521.13" y="431.5" ></text>
</g>
<g >
<title>CSizeComputer::operator&lt;&lt; &lt;CTransaction&gt; (1,020 samples, 1.16%)</title><rect x="1023.4" y="645" width="13.7" height="15.0" fill="rgb(243,41,1)" rx="2" ry="2" />
<text  x="1026.38" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_emplace&lt;std::pair&lt;COutPoint, uint256&gt; &gt; (1,188 samples, 1.36%)</title><rect x="914.9" y="597" width="16.0" height="15.0" fill="rgb(245,123,29)" rx="2" ry="2" />
<text  x="917.86" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer&gt; (10 samples, 0.01%)</title><rect x="1029.0" y="373" width="0.2" height="15.0" fill="rgb(209,60,48)" rx="2" ry="2" />
<text  x="1032.03" y="383.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, interfaces::Chain::Lock*, false&gt;::_Head_base&lt;interfaces::Chain::Lock*&amp;&gt; (11 samples, 0.01%)</title><rect x="948.0" y="565" width="0.2" height="15.0" fill="rgb(228,204,32)" rx="2" ry="2" />
<text  x="951.01" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::clear (17 samples, 0.02%)</title><rect x="506.9" y="357" width="0.2" height="15.0" fill="rgb(209,124,52)" rx="2" ry="2" />
<text  x="509.91" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (10 samples, 0.01%)</title><rect x="676.0" y="533" width="0.2" height="15.0" fill="rgb(252,58,36)" rx="2" ry="2" />
<text  x="679.03" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_get_insert_equal_pos (12 samples, 0.01%)</title><rect x="1155.7" y="757" width="0.2" height="15.0" fill="rgb(248,209,25)" rx="2" ry="2" />
<text  x="1158.73" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::base (10 samples, 0.01%)</title><rect x="560.5" y="277" width="0.2" height="15.0" fill="rgb(238,56,0)" rx="2" ry="2" />
<text  x="563.53" y="287.5" ></text>
</g>
<g >
<title>__memp_fget (24 samples, 0.03%)</title><rect x="75.3" y="453" width="0.3" height="15.0" fill="rgb(241,212,23)" rx="2" ry="2" />
<text  x="78.29" y="463.5" ></text>
</g>
<g >
<title>__bam_search (455 samples, 0.52%)</title><rect x="81.7" y="437" width="6.1" height="15.0" fill="rgb(209,220,4)" rx="2" ry="2" />
<text  x="84.68" y="447.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (311 samples, 0.36%)</title><rect x="1135.8" y="293" width="4.2" height="15.0" fill="rgb(224,134,50)" rx="2" ry="2" />
<text  x="1138.80" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned int*&gt; (8 samples, 0.01%)</title><rect x="883.4" y="597" width="0.1" height="15.0" fill="rgb(211,47,42)" rx="2" ry="2" />
<text  x="886.39" y="607.5" ></text>
</g>
<g >
<title>__libc_pread (21 samples, 0.02%)</title><rect x="112.1" y="357" width="0.2" height="15.0" fill="rgb(209,210,50)" rx="2" ry="2" />
<text  x="115.06" y="367.5" ></text>
</g>
<g >
<title>CSHA256::Write (31 samples, 0.04%)</title><rect x="530.9" y="69" width="0.4" height="15.0" fill="rgb(217,221,41)" rx="2" ry="2" />
<text  x="533.87" y="79.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (1,216 samples, 1.39%)</title><rect x="708.5" y="597" width="16.4" height="15.0" fill="rgb(237,120,29)" rx="2" ry="2" />
<text  x="711.50" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_default_append (1,685 samples, 1.92%)</title><rect x="611.1" y="613" width="22.7" height="15.0" fill="rgb(210,104,18)" rx="2" ry="2" />
<text  x="614.09" y="623.5" >s..</text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (325 samples, 0.37%)</title><rect x="122.4" y="453" width="4.4" height="15.0" fill="rgb(210,24,51)" rx="2" ry="2" />
<text  x="125.40" y="463.5" ></text>
</g>
<g >
<title>COutPoint::IsNull (8 samples, 0.01%)</title><rect x="931.1" y="613" width="0.1" height="15.0" fill="rgb(235,227,45)" rx="2" ry="2" />
<text  x="934.10" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (18 samples, 0.02%)</title><rect x="172.1" y="469" width="0.3" height="15.0" fill="rgb(219,60,43)" rx="2" ry="2" />
<text  x="175.15" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt; &gt;::allocate (65 samples, 0.07%)</title><rect x="928.3" y="549" width="0.8" height="15.0" fill="rgb(208,34,22)" rx="2" ry="2" />
<text  x="931.25" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt;::allocate (13 samples, 0.01%)</title><rect x="861.8" y="309" width="0.1" height="15.0" fill="rgb(214,70,53)" rx="2" ry="2" />
<text  x="864.77" y="319.5" ></text>
</g>
<g >
<title>QuadRound (297 samples, 0.34%)</title><rect x="1131.4" y="661" width="4.0" height="15.0" fill="rgb(233,85,31)" rx="2" ry="2" />
<text  x="1134.39" y="671.5" ></text>
</g>
<g >
<title>LockedPoolManager::Instance (16 samples, 0.02%)</title><rect x="1091.3" y="597" width="0.3" height="15.0" fill="rgb(216,32,47)" rx="2" ry="2" />
<text  x="1094.34" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, void&gt; (153 samples, 0.17%)</title><rect x="947.5" y="629" width="2.1" height="15.0" fill="rgb(233,229,33)" rx="2" ry="2" />
<text  x="950.52" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;long, CWalletTx*&gt; &gt; (1,313 samples, 1.50%)</title><rect x="964.2" y="645" width="17.7" height="15.0" fill="rgb(216,49,31)" rx="2" ry="2" />
<text  x="967.21" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (20 samples, 0.02%)</title><rect x="561.8" y="293" width="0.3" height="15.0" fill="rgb(240,83,30)" rx="2" ry="2" />
<text  x="564.81" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.01%)</title><rect x="679.2" y="517" width="0.1" height="15.0" fill="rgb(212,165,39)" rx="2" ry="2" />
<text  x="682.16" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_erase_aux (72 samples, 0.08%)</title><rect x="653.6" y="517" width="1.0" height="15.0" fill="rgb(214,177,47)" rx="2" ry="2" />
<text  x="656.61" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (10 samples, 0.01%)</title><rect x="733.9" y="533" width="0.1" height="15.0" fill="rgb(230,222,34)" rx="2" ry="2" />
<text  x="736.86" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (267 samples, 0.30%)</title><rect x="655.6" y="533" width="3.6" height="15.0" fill="rgb(237,18,0)" rx="2" ry="2" />
<text  x="658.63" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size (8 samples, 0.01%)</title><rect x="866.9" y="437" width="0.1" height="15.0" fill="rgb(242,209,23)" rx="2" ry="2" />
<text  x="869.94" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::find (261 samples, 0.30%)</title><rect x="729.9" y="565" width="3.5" height="15.0" fill="rgb(241,23,47)" rx="2" ry="2" />
<text  x="732.87" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (196 samples, 0.22%)</title><rect x="452.3" y="501" width="2.7" height="15.0" fill="rgb(233,51,40)" rx="2" ry="2" />
<text  x="455.31" y="511.5" ></text>
</g>
<g >
<title>__memp_bhwrite (16 samples, 0.02%)</title><rect x="1143.9" y="405" width="0.2" height="15.0" fill="rgb(227,84,7)" rx="2" ry="2" />
<text  x="1146.88" y="415.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (35 samples, 0.04%)</title><rect x="565.8" y="517" width="0.4" height="15.0" fill="rgb(233,135,11)" rx="2" ry="2" />
<text  x="568.77" y="527.5" ></text>
</g>
<g >
<title>boost::optional&lt;int&gt;::get (11 samples, 0.01%)</title><rect x="33.9" y="597" width="0.2" height="15.0" fill="rgb(223,39,39)" rx="2" ry="2" />
<text  x="36.91" y="607.5" ></text>
</g>
<g >
<title>CDiskBlockIndex::Unserialize&lt;CDataStream&gt; (121 samples, 0.14%)</title><rect x="43.1" y="613" width="1.6" height="15.0" fill="rgb(245,184,13)" rx="2" ry="2" />
<text  x="46.11" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (139 samples, 0.16%)</title><rect x="613.3" y="501" width="1.9" height="15.0" fill="rgb(224,95,16)" rx="2" ry="2" />
<text  x="616.34" y="511.5" ></text>
</g>
<g >
<title>__memp_bhfree (201 samples, 0.23%)</title><rect x="132.9" y="469" width="2.7" height="15.0" fill="rgb(205,48,4)" rx="2" ry="2" />
<text  x="135.89" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (30 samples, 0.03%)</title><rect x="1057.9" y="517" width="0.4" height="15.0" fill="rgb(223,101,43)" rx="2" ry="2" />
<text  x="1060.85" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (40 samples, 0.05%)</title><rect x="1058.3" y="517" width="0.5" height="15.0" fill="rgb(234,44,19)" rx="2" ry="2" />
<text  x="1061.26" y="527.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (284 samples, 0.32%)</title><rect x="1140.0" y="293" width="3.8" height="15.0" fill="rgb(239,94,18)" rx="2" ry="2" />
<text  x="1142.99" y="303.5" ></text>
</g>
<g >
<title>__os_umalloc (96 samples, 0.11%)</title><rect x="360.8" y="613" width="1.3" height="15.0" fill="rgb(205,151,17)" rx="2" ry="2" />
<text  x="363.83" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CWalletTx&gt;, false, true&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CWalletTx&gt;, false, true&gt;, bool, true&gt; (12 samples, 0.01%)</title><rect x="1004.1" y="597" width="0.2" height="15.0" fill="rgb(220,221,41)" rx="2" ry="2" />
<text  x="1007.12" y="607.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (14 samples, 0.02%)</title><rect x="830.3" y="565" width="0.2" height="15.0" fill="rgb(254,39,37)" rx="2" ry="2" />
<text  x="833.35" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (21 samples, 0.02%)</title><rect x="568.7" y="517" width="0.3" height="15.0" fill="rgb(251,38,39)" rx="2" ry="2" />
<text  x="571.75" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_Vector_impl::_Vector_impl (78 samples, 0.09%)</title><rect x="384.3" y="645" width="1.0" height="15.0" fill="rgb(212,209,15)" rx="2" ry="2" />
<text  x="387.27" y="655.5" ></text>
</g>
<g >
<title>CScript::CScript (12 samples, 0.01%)</title><rect x="469.3" y="357" width="0.1" height="15.0" fill="rgb(218,181,46)" rx="2" ry="2" />
<text  x="472.28" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;COutPoint&gt;::_Rb_tree_iterator (10 samples, 0.01%)</title><rect x="907.8" y="565" width="0.2" height="15.0" fill="rgb(234,46,9)" rx="2" ry="2" />
<text  x="910.84" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (12 samples, 0.01%)</title><rect x="550.7" y="293" width="0.1" height="15.0" fill="rgb(224,35,26)" rx="2" ry="2" />
<text  x="553.68" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="872.7" y="581" width="0.2" height="15.0" fill="rgb(250,61,36)" rx="2" ry="2" />
<text  x="875.66" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (17 samples, 0.02%)</title><rect x="571.0" y="453" width="0.2" height="15.0" fill="rgb(248,140,53)" rx="2" ry="2" />
<text  x="573.99" y="463.5" ></text>
</g>
<g >
<title>WriteBE32 (16 samples, 0.02%)</title><rect x="785.3" y="549" width="0.2" height="15.0" fill="rgb(229,130,13)" rx="2" ry="2" />
<text  x="788.27" y="559.5" ></text>
</g>
<g >
<title>Load (8 samples, 0.01%)</title><rect x="1131.3" y="661" width="0.1" height="15.0" fill="rgb(244,126,16)" rx="2" ry="2" />
<text  x="1134.28" y="671.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::pair&lt;char, uint256&gt;&amp;&gt; (28 samples, 0.03%)</title><rect x="39.3" y="645" width="0.4" height="15.0" fill="rgb(213,102,35)" rx="2" ry="2" />
<text  x="42.34" y="655.5" ></text>
</g>
<g >
<title>__memp_fput (34 samples, 0.04%)</title><rect x="151.7" y="469" width="0.5" height="15.0" fill="rgb(227,136,1)" rx="2" ry="2" />
<text  x="154.73" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (10 samples, 0.01%)</title><rect x="593.0" y="565" width="0.2" height="15.0" fill="rgb(236,60,31)" rx="2" ry="2" />
<text  x="596.05" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::base (11 samples, 0.01%)</title><rect x="539.6" y="277" width="0.1" height="15.0" fill="rgb(249,206,11)" rx="2" ry="2" />
<text  x="542.56" y="287.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (25 samples, 0.03%)</title><rect x="24.9" y="757" width="0.3" height="15.0" fill="rgb(214,211,30)" rx="2" ry="2" />
<text  x="27.86" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_M_ptr (31 samples, 0.04%)</title><rect x="983.5" y="645" width="0.4" height="15.0" fill="rgb(224,60,37)" rx="2" ry="2" />
<text  x="986.49" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_free (10 samples, 0.01%)</title><rect x="570.3" y="453" width="0.2" height="15.0" fill="rgb(245,209,21)" rx="2" ry="2" />
<text  x="573.33" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::resize (1,695 samples, 1.94%)</title><rect x="611.1" y="629" width="22.8" height="15.0" fill="rgb(250,93,2)" rx="2" ry="2" />
<text  x="614.06" y="639.5" >s..</text>
</g>
<g >
<title>std::set&lt;long, std::less&lt;long&gt;, std::allocator&lt;long&gt; &gt;::insert (8 samples, 0.01%)</title><rect x="894.3" y="661" width="0.1" height="15.0" fill="rgb(252,6,46)" rx="2" ry="2" />
<text  x="897.25" y="671.5" ></text>
</g>
<g >
<title>__db_cursor (37 samples, 0.04%)</title><rect x="112.8" y="469" width="0.5" height="15.0" fill="rgb(206,143,13)" rx="2" ry="2" />
<text  x="115.80" y="479.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (98 samples, 0.11%)</title><rect x="1120.5" y="645" width="1.3" height="15.0" fill="rgb(236,124,52)" rx="2" ry="2" />
<text  x="1123.50" y="655.5" ></text>
</g>
<g >
<title>BerkeleyEnvironment::Open (29 samples, 0.03%)</title><rect x="180.4" y="645" width="0.4" height="15.0" fill="rgb(211,99,42)" rx="2" ry="2" />
<text  x="183.39" y="655.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (11 samples, 0.01%)</title><rect x="816.1" y="357" width="0.1" height="15.0" fill="rgb(252,214,34)" rx="2" ry="2" />
<text  x="819.06" y="367.5" ></text>
</g>
<g >
<title>DbEnv::open (28 samples, 0.03%)</title><rect x="180.4" y="629" width="0.4" height="15.0" fill="rgb(239,80,30)" rx="2" ry="2" />
<text  x="183.41" y="639.5" ></text>
</g>
<g >
<title>__dbc_cleanup (8 samples, 0.01%)</title><rect x="162.6" y="533" width="0.1" height="15.0" fill="rgb(238,68,42)" rx="2" ry="2" />
<text  x="165.60" y="543.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::deallocate (1,039 samples, 1.19%)</title><rect x="1077.7" y="613" width="14.0" height="15.0" fill="rgb(206,135,13)" rx="2" ry="2" />
<text  x="1080.69" y="623.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (14 samples, 0.02%)</title><rect x="562.5" y="309" width="0.2" height="15.0" fill="rgb(228,126,0)" rx="2" ry="2" />
<text  x="565.47" y="319.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (67 samples, 0.08%)</title><rect x="102.3" y="421" width="0.9" height="15.0" fill="rgb(212,190,42)" rx="2" ry="2" />
<text  x="105.27" y="431.5" ></text>
</g>
<g >
<title>CHashWriter::write (35 samples, 0.04%)</title><rect x="557.4" y="229" width="0.5" height="15.0" fill="rgb(213,2,51)" rx="2" ry="2" />
<text  x="560.42" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_value (9 samples, 0.01%)</title><rect x="732.9" y="533" width="0.1" height="15.0" fill="rgb(246,229,32)" rx="2" ry="2" />
<text  x="735.86" y="543.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::count (101 samples, 0.12%)</title><rect x="586.7" y="629" width="1.4" height="15.0" fill="rgb(221,164,6)" rx="2" ry="2" />
<text  x="589.74" y="639.5" ></text>
</g>
<g >
<title>CWallet::AddKeyPubKeyInner (416 samples, 0.48%)</title><rect x="1121.8" y="709" width="5.6" height="15.0" fill="rgb(240,191,14)" rx="2" ry="2" />
<text  x="1124.82" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_emplace_equal&lt;unsigned long const&amp;, char*&amp;&gt; (147 samples, 0.17%)</title><rect x="848.6" y="373" width="2.0" height="15.0" fill="rgb(213,216,35)" rx="2" ry="2" />
<text  x="851.58" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::clear (9 samples, 0.01%)</title><rect x="610.8" y="629" width="0.2" height="15.0" fill="rgb(217,75,17)" rx="2" ry="2" />
<text  x="613.83" y="639.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (107 samples, 0.12%)</title><rect x="1107.1" y="357" width="1.5" height="15.0" fill="rgb(227,15,23)" rx="2" ry="2" />
<text  x="1110.15" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="582.1" y="581" width="0.1" height="15.0" fill="rgb(213,224,52)" rx="2" ry="2" />
<text  x="585.08" y="591.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;LockedPool::LockedPageArena&gt;::operator* (30 samples, 0.03%)</title><rect x="862.6" y="405" width="0.4" height="15.0" fill="rgb(231,156,35)" rx="2" ry="2" />
<text  x="865.62" y="415.5" ></text>
</g>
<g >
<title>__bam_defcmp (11 samples, 0.01%)</title><rect x="71.4" y="453" width="0.1" height="15.0" fill="rgb(225,132,44)" rx="2" ry="2" />
<text  x="74.38" y="463.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (14 samples, 0.02%)</title><rect x="836.6" y="549" width="0.2" height="15.0" fill="rgb(250,50,2)" rx="2" ry="2" />
<text  x="839.64" y="559.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (27 samples, 0.03%)</title><rect x="1002.2" y="501" width="0.4" height="15.0" fill="rgb(240,80,45)" rx="2" ry="2" />
<text  x="1005.22" y="511.5" ></text>
</g>
<g >
<title>SipHashUint256Extra (140 samples, 0.16%)</title><rect x="911.9" y="565" width="1.9" height="15.0" fill="rgb(235,122,43)" rx="2" ry="2" />
<text  x="914.89" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (16 samples, 0.02%)</title><rect x="1143.9" y="469" width="0.2" height="15.0" fill="rgb(205,115,17)" rx="2" ry="2" />
<text  x="1146.88" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (283 samples, 0.32%)</title><rect x="987.7" y="597" width="3.8" height="15.0" fill="rgb(237,211,49)" rx="2" ry="2" />
<text  x="990.72" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (18 samples, 0.02%)</title><rect x="1087.9" y="485" width="0.2" height="15.0" fill="rgb(253,73,28)" rx="2" ry="2" />
<text  x="1090.90" y="495.5" ></text>
</g>
<g >
<title>boost::apply_visitor&lt;(anonymous namespace)::CScriptVisitor, boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const&amp;&gt; (780 samples, 0.89%)</title><rect x="806.7" y="597" width="10.5" height="15.0" fill="rgb(207,213,34)" rx="2" ry="2" />
<text  x="809.71" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator!= (24 samples, 0.03%)</title><rect x="707.1" y="581" width="0.4" height="15.0" fill="rgb(223,151,33)" rx="2" ry="2" />
<text  x="710.15" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (11 samples, 0.01%)</title><rect x="860.2" y="277" width="0.1" height="15.0" fill="rgb(207,18,19)" rx="2" ry="2" />
<text  x="863.20" y="287.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, unsigned int&amp;&gt; (61 samples, 0.07%)</title><rect x="43.8" y="581" width="0.8" height="15.0" fill="rgb(245,203,22)" rx="2" ry="2" />
<text  x="46.81" y="591.5" ></text>
</g>
<g >
<title>__dbc_close (51 samples, 0.06%)</title><rect x="148.0" y="533" width="0.7" height="15.0" fill="rgb(227,99,23)" rx="2" ry="2" />
<text  x="151.02" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt; (27 samples, 0.03%)</title><rect x="983.5" y="629" width="0.4" height="15.0" fill="rgb(216,172,31)" rx="2" ry="2" />
<text  x="986.55" y="639.5" ></text>
</g>
<g >
<title>__memp_fget (33 samples, 0.04%)</title><rect x="139.4" y="453" width="0.5" height="15.0" fill="rgb(221,191,47)" rx="2" ry="2" />
<text  x="142.43" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_default_append (12 samples, 0.01%)</title><rect x="1177.3" y="757" width="0.2" height="15.0" fill="rgb(213,133,28)" rx="2" ry="2" />
<text  x="1180.31" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (12 samples, 0.01%)</title><rect x="587.5" y="549" width="0.2" height="15.0" fill="rgb(216,182,30)" rx="2" ry="2" />
<text  x="590.53" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt;::_M_next (8 samples, 0.01%)</title><rect x="657.1" y="485" width="0.1" height="15.0" fill="rgb(227,30,30)" rx="2" ry="2" />
<text  x="660.09" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.01%)</title><rect x="132.7" y="437" width="0.2" height="15.0" fill="rgb(247,106,46)" rx="2" ry="2" />
<text  x="135.71" y="447.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (30 samples, 0.03%)</title><rect x="985.3" y="485" width="0.4" height="15.0" fill="rgb(207,134,33)" rx="2" ry="2" />
<text  x="988.27" y="495.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (29 samples, 0.03%)</title><rect x="1041.2" y="581" width="0.3" height="15.0" fill="rgb(248,60,54)" rx="2" ry="2" />
<text  x="1044.16" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (65 samples, 0.07%)</title><rect x="1089.5" y="533" width="0.8" height="15.0" fill="rgb(249,187,49)" rx="2" ry="2" />
<text  x="1092.45" y="543.5" ></text>
</g>
<g >
<title>CDataStream::clear (77 samples, 0.09%)</title><rect x="193.6" y="677" width="1.0" height="15.0" fill="rgb(213,130,38)" rx="2" ry="2" />
<text  x="196.56" y="687.5" ></text>
</g>
<g >
<title>operator new (46 samples, 0.05%)</title><rect x="826.0" y="533" width="0.6" height="15.0" fill="rgb(208,6,53)" rx="2" ry="2" />
<text  x="829.00" y="543.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="582.3" y="597" width="0.2" height="15.0" fill="rgb(219,211,26)" rx="2" ry="2" />
<text  x="585.35" y="607.5" ></text>
</g>
<g >
<title>__db_lget (18 samples, 0.02%)</title><rect x="71.8" y="469" width="0.3" height="15.0" fill="rgb(254,31,12)" rx="2" ry="2" />
<text  x="74.84" y="479.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="134.7" y="437" width="0.1" height="15.0" fill="rgb(215,208,24)" rx="2" ry="2" />
<text  x="137.67" y="447.5" ></text>
</g>
<g >
<title>CachableAmount::Reset (43 samples, 0.05%)</title><rect x="949.9" y="629" width="0.5" height="15.0" fill="rgb(223,86,9)" rx="2" ry="2" />
<text  x="952.85" y="639.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.04%)</title><rect x="667.0" y="565" width="0.5" height="15.0" fill="rgb(232,210,38)" rx="2" ry="2" />
<text  x="669.96" y="575.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.01%)</title><rect x="101.9" y="325" width="0.1" height="15.0" fill="rgb(230,117,34)" rx="2" ry="2" />
<text  x="104.89" y="335.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (11 samples, 0.01%)</title><rect x="537.4" y="85" width="0.1" height="15.0" fill="rgb(246,144,37)" rx="2" ry="2" />
<text  x="540.36" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="1081.2" y="517" width="0.2" height="15.0" fill="rgb(235,29,19)" rx="2" ry="2" />
<text  x="1084.25" y="527.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (19 samples, 0.02%)</title><rect x="31.9" y="549" width="0.3" height="15.0" fill="rgb(211,169,11)" rx="2" ry="2" />
<text  x="34.90" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;COutPoint&gt; (14 samples, 0.02%)</title><rect x="929.5" y="501" width="0.2" height="15.0" fill="rgb(244,103,8)" rx="2" ry="2" />
<text  x="932.49" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (60 samples, 0.07%)</title><rect x="34.9" y="597" width="0.8" height="15.0" fill="rgb(223,158,1)" rx="2" ry="2" />
<text  x="37.92" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CBlockIndex*, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt; &gt;::end (19 samples, 0.02%)</title><rect x="956.4" y="629" width="0.3" height="15.0" fill="rgb(214,173,20)" rx="2" ry="2" />
<text  x="959.43" y="639.5" ></text>
</g>
<g >
<title>CTxIn::Serialize&lt;CHashWriter&gt; (311 samples, 0.36%)</title><rect x="545.5" y="277" width="4.2" height="15.0" fill="rgb(205,155,21)" rx="2" ry="2" />
<text  x="548.54" y="287.5" ></text>
</g>
<g >
<title>CVarInt&lt; (32 samples, 0.04%)</title><rect x="43.2" y="533" width="0.5" height="15.0" fill="rgb(212,96,11)" rx="2" ry="2" />
<text  x="46.25" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (53 samples, 0.06%)</title><rect x="1097.4" y="629" width="0.7" height="15.0" fill="rgb(221,227,13)" rx="2" ry="2" />
<text  x="1100.43" y="639.5" ></text>
</g>
<g >
<title>__libc_pread (32 samples, 0.04%)</title><rect x="179.8" y="533" width="0.4" height="15.0" fill="rgb(239,68,53)" rx="2" ry="2" />
<text  x="182.80" y="543.5" ></text>
</g>
<g >
<title>CDataStream::read (19 samples, 0.02%)</title><rect x="474.8" y="165" width="0.3" height="15.0" fill="rgb(229,130,22)" rx="2" ry="2" />
<text  x="477.81" y="175.5" ></text>
</g>
<g >
<title>SipHashUint256 (102 samples, 0.12%)</title><rect x="993.8" y="581" width="1.4" height="15.0" fill="rgb(220,77,45)" rx="2" ry="2" />
<text  x="996.83" y="591.5" ></text>
</g>
<g >
<title>CSHA256::Write (18 samples, 0.02%)</title><rect x="520.9" y="357" width="0.2" height="15.0" fill="rgb(244,102,28)" rx="2" ry="2" />
<text  x="523.87" y="367.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (8 samples, 0.01%)</title><rect x="830.4" y="533" width="0.1" height="15.0" fill="rgb(239,208,14)" rx="2" ry="2" />
<text  x="833.43" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_deallocate (1,050 samples, 1.20%)</title><rect x="1077.5" y="645" width="14.2" height="15.0" fill="rgb(238,1,22)" rx="2" ry="2" />
<text  x="1080.54" y="655.5" ></text>
</g>
<g >
<title>uint256::uint256 (17 samples, 0.02%)</title><rect x="574.7" y="597" width="0.2" height="15.0" fill="rgb(219,178,25)" rx="2" ry="2" />
<text  x="577.65" y="607.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::internal_apply_visitor&lt;boost::detail::variant::invoke_visitor&lt;(anonymous namespace)::CScriptVisitor const, false&gt; &gt; (755 samples, 0.86%)</title><rect x="807.0" y="565" width="10.2" height="15.0" fill="rgb(226,130,15)" rx="2" ry="2" />
<text  x="810.05" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10 samples, 0.01%)</title><rect x="660.7" y="437" width="0.2" height="15.0" fill="rgb(225,187,47)" rx="2" ry="2" />
<text  x="663.72" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (21 samples, 0.02%)</title><rect x="175.5" y="549" width="0.3" height="15.0" fill="rgb(210,176,28)" rx="2" ry="2" />
<text  x="178.49" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;uint256&amp;, CWalletTx&amp;&gt; (598 samples, 0.68%)</title><rect x="995.4" y="613" width="8.1" height="15.0" fill="rgb(215,158,47)" rx="2" ry="2" />
<text  x="998.42" y="623.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (22 samples, 0.03%)</title><rect x="46.8" y="501" width="0.3" height="15.0" fill="rgb(233,21,13)" rx="2" ry="2" />
<text  x="49.80" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (13 samples, 0.01%)</title><rect x="613.4" y="453" width="0.2" height="15.0" fill="rgb(229,135,19)" rx="2" ry="2" />
<text  x="616.40" y="463.5" ></text>
</g>
<g >
<title>WriteLE32 (11 samples, 0.01%)</title><rect x="804.4" y="549" width="0.1" height="15.0" fill="rgb(253,146,27)" rx="2" ry="2" />
<text  x="807.39" y="559.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (8 samples, 0.01%)</title><rect x="1150.6" y="741" width="0.1" height="15.0" fill="rgb(244,134,2)" rx="2" ry="2" />
<text  x="1153.58" y="751.5" ></text>
</g>
<g >
<title>__db_verify (39 samples, 0.04%)</title><rect x="1143.9" y="629" width="0.5" height="15.0" fill="rgb(230,100,22)" rx="2" ry="2" />
<text  x="1146.88" y="639.5" ></text>
</g>
<g >
<title>CScriptID::CScriptID (98 samples, 0.11%)</title><rect x="1120.5" y="693" width="1.3" height="15.0" fill="rgb(244,154,2)" rx="2" ry="2" />
<text  x="1123.50" y="703.5" ></text>
</g>
<g >
<title>CDataStream::read (57 samples, 0.07%)</title><rect x="605.8" y="645" width="0.8" height="15.0" fill="rgb(241,127,23)" rx="2" ry="2" />
<text  x="608.82" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (918 samples, 1.05%)</title><rect x="450.1" y="581" width="12.4" height="15.0" fill="rgb(231,181,53)" rx="2" ry="2" />
<text  x="453.10" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_valptr (27 samples, 0.03%)</title><rect x="927.5" y="549" width="0.4" height="15.0" fill="rgb(240,24,48)" rx="2" ry="2" />
<text  x="930.51" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (48 samples, 0.05%)</title><rect x="1088.3" y="501" width="0.7" height="15.0" fill="rgb(228,176,41)" rx="2" ry="2" />
<text  x="1091.34" y="511.5" ></text>
</g>
<g >
<title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (164 samples, 0.19%)</title><rect x="183.1" y="373" width="2.3" height="15.0" fill="rgb(223,2,5)" rx="2" ry="2" />
<text  x="186.14" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (13 samples, 0.01%)</title><rect x="836.2" y="549" width="0.2" height="15.0" fill="rgb(251,188,3)" rx="2" ry="2" />
<text  x="839.24" y="559.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (164 samples, 0.19%)</title><rect x="183.1" y="469" width="2.3" height="15.0" fill="rgb(208,177,27)" rx="2" ry="2" />
<text  x="186.14" y="479.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, KeyOriginInfo&amp;&gt; (255 samples, 0.29%)</title><rect x="395.5" y="597" width="3.4" height="15.0" fill="rgb(234,67,47)" rx="2" ry="2" />
<text  x="398.46" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (16 samples, 0.02%)</title><rect x="608.7" y="597" width="0.2" height="15.0" fill="rgb(243,3,42)" rx="2" ry="2" />
<text  x="611.68" y="607.5" ></text>
</g>
<g >
<title>__os_io (9 samples, 0.01%)</title><rect x="101.9" y="357" width="0.1" height="15.0" fill="rgb(228,60,23)" rx="2" ry="2" />
<text  x="104.88" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (12 samples, 0.01%)</title><rect x="676.3" y="501" width="0.2" height="15.0" fill="rgb(243,111,2)" rx="2" ry="2" />
<text  x="679.33" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::allocate (71 samples, 0.08%)</title><rect x="455.4" y="533" width="0.9" height="15.0" fill="rgb(208,220,40)" rx="2" ry="2" />
<text  x="458.37" y="543.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (218 samples, 0.25%)</title><rect x="529.7" y="197" width="2.9" height="15.0" fill="rgb(208,117,43)" rx="2" ry="2" />
<text  x="532.71" y="207.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, uint256&gt; (23 samples, 0.03%)</title><rect x="46.8" y="517" width="0.3" height="15.0" fill="rgb(241,56,23)" rx="2" ry="2" />
<text  x="49.79" y="527.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, long&amp;&gt; (50 samples, 0.06%)</title><rect x="488.6" y="293" width="0.7" height="15.0" fill="rgb(248,90,16)" rx="2" ry="2" />
<text  x="491.59" y="303.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (175 samples, 0.20%)</title><rect x="530.2" y="165" width="2.4" height="15.0" fill="rgb(230,116,4)" rx="2" ry="2" />
<text  x="533.25" y="175.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;unsigned int&gt; (20 samples, 0.02%)</title><rect x="562.4" y="341" width="0.3" height="15.0" fill="rgb(249,169,30)" rx="2" ry="2" />
<text  x="565.39" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (17 samples, 0.02%)</title><rect x="578.2" y="597" width="0.3" height="15.0" fill="rgb(213,78,36)" rx="2" ry="2" />
<text  x="581.24" y="607.5" ></text>
</g>
<g >
<title>CScriptWitness::CScriptWitness (11 samples, 0.01%)</title><rect x="1025.5" y="533" width="0.2" height="15.0" fill="rgb(245,167,28)" rx="2" ry="2" />
<text  x="1028.54" y="543.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.04%)</title><rect x="844.6" y="549" width="0.5" height="15.0" fill="rgb(237,97,27)" rx="2" ry="2" />
<text  x="847.57" y="559.5" ></text>
</g>
<g >
<title>CPubKey::GetID (1,353 samples, 1.55%)</title><rect x="686.0" y="677" width="18.2" height="15.0" fill="rgb(245,182,14)" rx="2" ry="2" />
<text  x="688.96" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (205 samples, 0.23%)</title><rect x="730.1" y="549" width="2.8" height="15.0" fill="rgb(207,81,49)" rx="2" ry="2" />
<text  x="733.10" y="559.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, COutPoint&gt; (145 samples, 0.17%)</title><rect x="1027.3" y="485" width="2.0" height="15.0" fill="rgb(222,207,20)" rx="2" ry="2" />
<text  x="1030.32" y="495.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (21 samples, 0.02%)</title><rect x="479.1" y="261" width="0.3" height="15.0" fill="rgb(221,219,25)" rx="2" ry="2" />
<text  x="482.09" y="271.5" ></text>
</g>
<g >
<title>__libc_start_main (39 samples, 0.04%)</title><rect x="1149.3" y="741" width="0.6" height="15.0" fill="rgb(250,199,14)" rx="2" ry="2" />
<text  x="1152.34" y="751.5" ></text>
</g>
<g >
<title>CHash160::Write (19 samples, 0.02%)</title><rect x="805.1" y="581" width="0.3" height="15.0" fill="rgb(238,214,19)" rx="2" ry="2" />
<text  x="808.15" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (59 samples, 0.07%)</title><rect x="202.8" y="549" width="0.8" height="15.0" fill="rgb(215,88,12)" rx="2" ry="2" />
<text  x="205.78" y="559.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.02%)</title><rect x="490.6" y="277" width="0.3" height="15.0" fill="rgb(237,25,43)" rx="2" ry="2" />
<text  x="493.59" y="287.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (15 samples, 0.02%)</title><rect x="45.4" y="501" width="0.2" height="15.0" fill="rgb(225,105,43)" rx="2" ry="2" />
<text  x="48.36" y="511.5" ></text>
</g>
<g >
<title>std::forward&lt;std::_Rb_tree_iterator&lt;COutPoint&gt; &gt; (9 samples, 0.01%)</title><rect x="908.9" y="565" width="0.1" height="15.0" fill="rgb(230,187,1)" rx="2" ry="2" />
<text  x="911.91" y="575.5" ></text>
</g>
<g >
<title>CTxOut::CTxOut (32 samples, 0.04%)</title><rect x="551.2" y="309" width="0.4" height="15.0" fill="rgb(227,64,0)" rx="2" ry="2" />
<text  x="554.20" y="319.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (20 samples, 0.02%)</title><rect x="109.2" y="357" width="0.2" height="15.0" fill="rgb(241,85,14)" rx="2" ry="2" />
<text  x="112.17" y="367.5" ></text>
</g>
<g >
<title>std::operator!=&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (33 samples, 0.04%)</title><rect x="1051.1" y="613" width="0.5" height="15.0" fill="rgb(252,161,11)" rx="2" ry="2" />
<text  x="1054.13" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_construct_node&lt;COutPoint const&amp;&gt; (55 samples, 0.06%)</title><rect x="1042.3" y="581" width="0.8" height="15.0" fill="rgb(250,227,43)" rx="2" ry="2" />
<text  x="1045.33" y="591.5" ></text>
</g>
<g >
<title>KeyOriginInfo::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (244 samples, 0.28%)</title><rect x="395.6" y="549" width="3.3" height="15.0" fill="rgb(248,120,34)" rx="2" ry="2" />
<text  x="398.57" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_v (8 samples, 0.01%)</title><rect x="1087.3" y="485" width="0.1" height="15.0" fill="rgb(248,215,42)" rx="2" ry="2" />
<text  x="1090.34" y="495.5" ></text>
</g>
<g >
<title>__db_lput (20 samples, 0.02%)</title><rect x="121.9" y="437" width="0.3" height="15.0" fill="rgb(222,116,29)" rx="2" ry="2" />
<text  x="124.93" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::destroy&lt;char&gt; (228 samples, 0.26%)</title><rect x="441.3" y="485" width="3.1" height="15.0" fill="rgb(228,225,31)" rx="2" ry="2" />
<text  x="444.29" y="495.5" ></text>
</g>
<g >
<title>std::allocator&lt;CMerkleTx&gt;::allocator (23 samples, 0.03%)</title><rect x="601.9" y="581" width="0.3" height="15.0" fill="rgb(247,143,19)" rx="2" ry="2" />
<text  x="604.90" y="591.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (164 samples, 0.19%)</title><rect x="180.9" y="485" width="2.2" height="15.0" fill="rgb(252,117,5)" rx="2" ry="2" />
<text  x="183.93" y="495.5" ></text>
</g>
<g >
<title>ReadWriteAsHelper&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="530.1" y="165" width="0.1" height="15.0" fill="rgb(249,168,45)" rx="2" ry="2" />
<text  x="533.14" y="175.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (10 samples, 0.01%)</title><rect x="946.6" y="549" width="0.1" height="15.0" fill="rgb(246,222,2)" rx="2" ry="2" />
<text  x="949.57" y="559.5" ></text>
</g>
<g >
<title>__bam_defcmp (15 samples, 0.02%)</title><rect x="91.7" y="389" width="0.2" height="15.0" fill="rgb(209,181,0)" rx="2" ry="2" />
<text  x="94.72" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (17 samples, 0.02%)</title><rect x="1047.7" y="565" width="0.2" height="15.0" fill="rgb(230,161,45)" rx="2" ry="2" />
<text  x="1050.66" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (21 samples, 0.02%)</title><rect x="194.3" y="645" width="0.3" height="15.0" fill="rgb(237,85,47)" rx="2" ry="2" />
<text  x="197.31" y="655.5" ></text>
</g>
<g >
<title>CDataStream::read (25 samples, 0.03%)</title><rect x="476.5" y="165" width="0.3" height="15.0" fill="rgb(215,26,38)" rx="2" ry="2" />
<text  x="479.46" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (54 samples, 0.06%)</title><rect x="31.5" y="629" width="0.7" height="15.0" fill="rgb(247,166,4)" rx="2" ry="2" />
<text  x="34.47" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (8 samples, 0.01%)</title><rect x="117.2" y="453" width="0.1" height="15.0" fill="rgb(254,109,13)" rx="2" ry="2" />
<text  x="120.19" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;char*, unsigned long&amp;&gt; (274 samples, 0.31%)</title><rect x="858.9" y="373" width="3.7" height="15.0" fill="rgb(243,202,4)" rx="2" ry="2" />
<text  x="861.90" y="383.5" ></text>
</g>
<g >
<title>WriteBE32 (14 samples, 0.02%)</title><rect x="725.1" y="581" width="0.2" height="15.0" fill="rgb(240,89,42)" rx="2" ry="2" />
<text  x="728.14" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~allocator (21 samples, 0.02%)</title><rect x="1002.6" y="517" width="0.3" height="15.0" fill="rgb(228,97,33)" rx="2" ry="2" />
<text  x="1005.59" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (12 samples, 0.01%)</title><rect x="1154.0" y="757" width="0.1" height="15.0" fill="rgb(241,16,30)" rx="2" ry="2" />
<text  x="1156.95" y="767.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (9 samples, 0.01%)</title><rect x="553.7" y="101" width="0.2" height="15.0" fill="rgb(205,24,8)" rx="2" ry="2" />
<text  x="556.74" y="111.5" ></text>
</g>
<g >
<title>CPubKey::GetID (9 samples, 0.01%)</title><rect x="1127.4" y="709" width="0.2" height="15.0" fill="rgb(252,64,40)" rx="2" ry="2" />
<text  x="1130.43" y="719.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (462 samples, 0.53%)</title><rect x="81.6" y="469" width="6.2" height="15.0" fill="rgb(243,222,14)" rx="2" ry="2" />
<text  x="84.59" y="479.5" ></text>
</g>
<g >
<title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (62 samples, 0.07%)</title><rect x="30.4" y="677" width="0.9" height="15.0" fill="rgb(206,77,26)" rx="2" ry="2" />
<text  x="33.42" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_get_node (17 samples, 0.02%)</title><rect x="849.3" y="341" width="0.2" height="15.0" fill="rgb(231,186,50)" rx="2" ry="2" />
<text  x="852.28" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (31 samples, 0.04%)</title><rect x="1103.7" y="693" width="0.5" height="15.0" fill="rgb(215,50,49)" rx="2" ry="2" />
<text  x="1106.74" y="703.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CScript&amp;&gt; (182 samples, 0.21%)</title><rect x="409.8" y="677" width="2.4" height="15.0" fill="rgb(224,177,39)" rx="2" ry="2" />
<text  x="412.78" y="687.5" ></text>
</g>
<g >
<title>WalletBatch::VerifyDatabaseFile (9,098 samples, 10.39%)</title><rect x="57.8" y="677" width="122.6" height="15.0" fill="rgb(218,121,46)" rx="2" ry="2" />
<text  x="60.79" y="687.5" >WalletBatch::Ve..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (82 samples, 0.09%)</title><rect x="933.7" y="613" width="1.1" height="15.0" fill="rgb(250,216,25)" rx="2" ry="2" />
<text  x="936.68" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::construct&lt;unsigned char&gt; (148 samples, 0.17%)</title><rect x="665.5" y="613" width="2.0" height="15.0" fill="rgb(247,37,18)" rx="2" ry="2" />
<text  x="668.47" y="623.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (20 samples, 0.02%)</title><rect x="610.5" y="613" width="0.3" height="15.0" fill="rgb(246,179,17)" rx="2" ry="2" />
<text  x="613.54" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, unsigned long, false&gt;::_S_equals (29 samples, 0.03%)</title><rect x="858.4" y="309" width="0.4" height="15.0" fill="rgb(244,111,14)" rx="2" ry="2" />
<text  x="861.37" y="319.5" ></text>
</g>
<g >
<title>__lock_put (22 samples, 0.03%)</title><rect x="115.2" y="389" width="0.3" height="15.0" fill="rgb(229,113,28)" rx="2" ry="2" />
<text  x="118.17" y="399.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (10 samples, 0.01%)</title><rect x="167.0" y="437" width="0.1" height="15.0" fill="rgb(236,210,49)" rx="2" ry="2" />
<text  x="169.96" y="447.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.02%)</title><rect x="145.8" y="357" width="0.3" height="15.0" fill="rgb(207,132,8)" rx="2" ry="2" />
<text  x="148.84" y="367.5" ></text>
</g>
<g >
<title>CDataStream::read (21 samples, 0.02%)</title><rect x="487.3" y="165" width="0.3" height="15.0" fill="rgb(249,34,19)" rx="2" ry="2" />
<text  x="490.30" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_destroy_node (24 samples, 0.03%)</title><rect x="653.8" y="485" width="0.3" height="15.0" fill="rgb(235,161,23)" rx="2" ry="2" />
<text  x="656.76" y="495.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (37 samples, 0.04%)</title><rect x="403.2" y="613" width="0.5" height="15.0" fill="rgb(254,131,51)" rx="2" ry="2" />
<text  x="406.15" y="623.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (25 samples, 0.03%)</title><rect x="1094.8" y="629" width="0.3" height="15.0" fill="rgb(226,166,33)" rx="2" ry="2" />
<text  x="1097.78" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (54 samples, 0.06%)</title><rect x="31.5" y="645" width="0.7" height="15.0" fill="rgb(243,227,33)" rx="2" ry="2" />
<text  x="34.47" y="655.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (77 samples, 0.09%)</title><rect x="941.4" y="501" width="1.0" height="15.0" fill="rgb(244,195,42)" rx="2" ry="2" />
<text  x="944.36" y="511.5" ></text>
</g>
<g >
<title>operator== (18 samples, 0.02%)</title><rect x="911.3" y="517" width="0.2" height="15.0" fill="rgb(242,228,40)" rx="2" ry="2" />
<text  x="914.30" y="527.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock (15 samples, 0.02%)</title><rect x="945.3" y="581" width="0.2" height="15.0" fill="rgb(219,88,30)" rx="2" ry="2" />
<text  x="948.34" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (9 samples, 0.01%)</title><rect x="609.2" y="645" width="0.1" height="15.0" fill="rgb(216,6,44)" rx="2" ry="2" />
<text  x="612.20" y="655.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (28 samples, 0.03%)</title><rect x="610.4" y="629" width="0.4" height="15.0" fill="rgb(226,154,22)" rx="2" ry="2" />
<text  x="613.43" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (53 samples, 0.06%)</title><rect x="933.0" y="581" width="0.7" height="15.0" fill="rgb(233,207,46)" rx="2" ry="2" />
<text  x="935.97" y="591.5" ></text>
</g>
<g >
<title>CDataStream::SetType (36 samples, 0.04%)</title><rect x="193.1" y="677" width="0.5" height="15.0" fill="rgb(227,11,25)" rx="2" ry="2" />
<text  x="196.07" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="815.4" y="405" width="0.2" height="15.0" fill="rgb(240,117,44)" rx="2" ry="2" />
<text  x="818.42" y="415.5" ></text>
</g>
<g >
<title>std::mutex::lock (11 samples, 0.01%)</title><rect x="863.5" y="389" width="0.1" height="15.0" fill="rgb(222,208,46)" rx="2" ry="2" />
<text  x="866.46" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (9 samples, 0.01%)</title><rect x="560.8" y="277" width="0.1" height="15.0" fill="rgb(229,93,16)" rx="2" ry="2" />
<text  x="563.77" y="287.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, uint256&gt; (52 samples, 0.06%)</title><rect x="527.5" y="133" width="0.7" height="15.0" fill="rgb(216,21,46)" rx="2" ry="2" />
<text  x="530.47" y="143.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (164 samples, 0.19%)</title><rect x="183.1" y="421" width="2.3" height="15.0" fill="rgb(235,200,20)" rx="2" ry="2" />
<text  x="186.14" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt;::_M_next (28 samples, 0.03%)</title><rect x="822.5" y="533" width="0.4" height="15.0" fill="rgb(222,40,14)" rx="2" ry="2" />
<text  x="825.50" y="543.5" ></text>
</g>
<g >
<title>CTxOut::CTxOut (51 samples, 0.06%)</title><rect x="484.8" y="373" width="0.7" height="15.0" fill="rgb(235,100,51)" rx="2" ry="2" />
<text  x="487.77" y="383.5" ></text>
</g>
<g >
<title>_int_malloc (12 samples, 0.01%)</title><rect x="490.7" y="245" width="0.2" height="15.0" fill="rgb(211,49,51)" rx="2" ry="2" />
<text  x="493.69" y="255.5" ></text>
</g>
<g >
<title>__bam_search (62 samples, 0.07%)</title><rect x="153.4" y="485" width="0.9" height="15.0" fill="rgb(213,198,8)" rx="2" ry="2" />
<text  x="156.43" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt;::max_size (9 samples, 0.01%)</title><rect x="928.6" y="517" width="0.1" height="15.0" fill="rgb(211,17,1)" rx="2" ry="2" />
<text  x="931.58" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_default_append (18 samples, 0.02%)</title><rect x="1180.5" y="757" width="0.2" height="15.0" fill="rgb(208,222,10)" rx="2" ry="2" />
<text  x="1183.46" y="767.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (1,545 samples, 1.76%)</title><rect x="543.0" y="373" width="20.9" height="15.0" fill="rgb(226,145,20)" rx="2" ry="2" />
<text  x="546.05" y="383.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (39 samples, 0.04%)</title><rect x="488.6" y="277" width="0.6" height="15.0" fill="rgb(231,9,36)" rx="2" ry="2" />
<text  x="491.65" y="287.5" ></text>
</g>
<g >
<title>__gthread_once (9 samples, 0.01%)</title><rect x="664.5" y="549" width="0.1" height="15.0" fill="rgb(228,168,40)" rx="2" ry="2" />
<text  x="667.51" y="559.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (164 samples, 0.19%)</title><rect x="183.1" y="293" width="2.3" height="15.0" fill="rgb(244,35,16)" rx="2" ry="2" />
<text  x="186.14" y="303.5" ></text>
</g>
<g >
<title>CKeyMetadata::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (638 samples, 0.73%)</title><rect x="395.1" y="629" width="8.6" height="15.0" fill="rgb(235,136,3)" rx="2" ry="2" />
<text  x="398.05" y="639.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="403.4" y="565" width="0.2" height="15.0" fill="rgb(254,41,42)" rx="2" ry="2" />
<text  x="406.41" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt; &gt;::allocate (76 samples, 0.09%)</title><rect x="966.3" y="597" width="1.0" height="15.0" fill="rgb(244,50,21)" rx="2" ry="2" />
<text  x="969.32" y="607.5" ></text>
</g>
<g >
<title>__lock_get (15 samples, 0.02%)</title><rect x="102.5" y="373" width="0.2" height="15.0" fill="rgb(247,210,3)" rx="2" ry="2" />
<text  x="105.50" y="383.5" ></text>
</g>
<g >
<title>__db_cursor_int (23 samples, 0.03%)</title><rect x="147.7" y="517" width="0.3" height="15.0" fill="rgb(240,105,51)" rx="2" ry="2" />
<text  x="150.71" y="527.5" ></text>
</g>
<g >
<title>std::unordered_multimap&lt;COutPoint, uint256, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt; &gt;::insert&lt;std::pair&lt;COutPoint, uint256&gt; &gt; (1,215 samples, 1.39%)</title><rect x="914.6" y="629" width="16.3" height="15.0" fill="rgb(226,136,38)" rx="2" ry="2" />
<text  x="917.56" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (23 samples, 0.03%)</title><rect x="962.9" y="581" width="0.3" height="15.0" fill="rgb(212,148,35)" rx="2" ry="2" />
<text  x="965.87" y="591.5" ></text>
</g>
<g >
<title>__bam_search (24 samples, 0.03%)</title><rect x="104.2" y="405" width="0.3" height="15.0" fill="rgb(241,107,7)" rx="2" ry="2" />
<text  x="107.18" y="415.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="421" width="3.8" height="15.0" fill="rgb(252,47,42)" rx="2" ry="2" />
<text  x="1142.99" y="431.5" ></text>
</g>
<g >
<title>__memp_fput (10 samples, 0.01%)</title><rect x="77.9" y="501" width="0.1" height="15.0" fill="rgb(210,225,49)" rx="2" ry="2" />
<text  x="80.85" y="511.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.01%)</title><rect x="565.4" y="469" width="0.1" height="15.0" fill="rgb(235,156,28)" rx="2" ry="2" />
<text  x="568.37" y="479.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (27 samples, 0.03%)</title><rect x="510.2" y="277" width="0.4" height="15.0" fill="rgb(229,157,42)" rx="2" ry="2" />
<text  x="513.25" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (18 samples, 0.02%)</title><rect x="180.5" y="533" width="0.3" height="15.0" fill="rgb(253,95,35)" rx="2" ry="2" />
<text  x="183.51" y="543.5" ></text>
</g>
<g >
<title>CTransaction::CTransaction (1,030 samples, 1.18%)</title><rect x="1105.0" y="501" width="13.8" height="15.0" fill="rgb(219,77,19)" rx="2" ry="2" />
<text  x="1107.95" y="511.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock (43 samples, 0.05%)</title><rect x="881.2" y="613" width="0.6" height="15.0" fill="rgb(218,6,41)" rx="2" ry="2" />
<text  x="884.23" y="623.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, long&amp;&gt; (22 samples, 0.03%)</title><rect x="402.9" y="597" width="0.3" height="15.0" fill="rgb(205,72,8)" rx="2" ry="2" />
<text  x="405.86" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (14 samples, 0.02%)</title><rect x="571.2" y="453" width="0.2" height="15.0" fill="rgb(208,229,14)" rx="2" ry="2" />
<text  x="574.21" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_allocate (16 samples, 0.02%)</title><rect x="397.0" y="437" width="0.2" height="15.0" fill="rgb(231,220,15)" rx="2" ry="2" />
<text  x="400.01" y="447.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (15 samples, 0.02%)</title><rect x="84.5" y="373" width="0.2" height="15.0" fill="rgb(253,22,37)" rx="2" ry="2" />
<text  x="87.47" y="383.5" ></text>
</g>
<g >
<title>__db_cursor_int (22 samples, 0.03%)</title><rect x="88.4" y="453" width="0.3" height="15.0" fill="rgb(239,22,39)" rx="2" ry="2" />
<text  x="91.36" y="463.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, CScript&gt; (109 samples, 0.12%)</title><rect x="1033.7" y="485" width="1.4" height="15.0" fill="rgb(245,18,48)" rx="2" ry="2" />
<text  x="1036.68" y="495.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (12 samples, 0.01%)</title><rect x="870.8" y="565" width="0.2" height="15.0" fill="rgb(249,206,24)" rx="2" ry="2" />
<text  x="873.80" y="575.5" ></text>
</g>
<g >
<title>Arena::alloc (860 samples, 0.98%)</title><rect x="652.0" y="565" width="11.6" height="15.0" fill="rgb(219,159,50)" rx="2" ry="2" />
<text  x="655.04" y="575.5" ></text>
</g>
<g >
<title>CDataStream::read (56 samples, 0.06%)</title><rect x="496.4" y="325" width="0.7" height="15.0" fill="rgb(222,204,31)" rx="2" ry="2" />
<text  x="499.40" y="335.5" ></text>
</g>
<g >
<title>__lock_get (45 samples, 0.05%)</title><rect x="159.6" y="469" width="0.6" height="15.0" fill="rgb(251,166,53)" rx="2" ry="2" />
<text  x="162.63" y="479.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, 28u, unsigned char&gt; (102 samples, 0.12%)</title><rect x="487.1" y="197" width="1.3" height="15.0" fill="rgb(245,57,42)" rx="2" ry="2" />
<text  x="490.07" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (56 samples, 0.06%)</title><rect x="598.6" y="549" width="0.8" height="15.0" fill="rgb(253,138,19)" rx="2" ry="2" />
<text  x="601.61" y="559.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (11 samples, 0.01%)</title><rect x="684.1" y="565" width="0.1" height="15.0" fill="rgb(235,69,12)" rx="2" ry="2" />
<text  x="687.05" y="575.5" ></text>
</g>
<g >
<title>__lock_get_internal (9 samples, 0.01%)</title><rect x="163.9" y="437" width="0.1" height="15.0" fill="rgb(226,155,0)" rx="2" ry="2" />
<text  x="166.91" y="447.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (103 samples, 0.12%)</title><rect x="1029.8" y="421" width="1.3" height="15.0" fill="rgb(233,217,43)" rx="2" ry="2" />
<text  x="1032.75" y="431.5" ></text>
</g>
<g >
<title>__env_attach_regions (19 samples, 0.02%)</title><rect x="1104.7" y="629" width="0.2" height="15.0" fill="rgb(216,191,35)" rx="2" ry="2" />
<text  x="1107.68" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;char*, unsigned long&amp;&gt; (72 samples, 0.08%)</title><rect x="861.3" y="341" width="0.9" height="15.0" fill="rgb(232,144,11)" rx="2" ry="2" />
<text  x="864.28" y="351.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.01%)</title><rect x="87.3" y="325" width="0.2" height="15.0" fill="rgb(225,12,28)" rx="2" ry="2" />
<text  x="90.29" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::construct&lt;COutPoint, COutPoint const&amp;&gt; (9 samples, 0.01%)</title><rect x="1042.8" y="549" width="0.1" height="15.0" fill="rgb(232,62,52)" rx="2" ry="2" />
<text  x="1045.79" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (8 samples, 0.01%)</title><rect x="1080.3" y="517" width="0.1" height="15.0" fill="rgb(207,52,36)" rx="2" ry="2" />
<text  x="1083.32" y="527.5" ></text>
</g>
<g >
<title>CDataStream::read (20 samples, 0.02%)</title><rect x="575.8" y="581" width="0.2" height="15.0" fill="rgb(241,17,49)" rx="2" ry="2" />
<text  x="578.77" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;char*&amp;&amp;&gt;::tuple&lt;char*, true&gt; (17 samples, 0.02%)</title><rect x="1086.5" y="517" width="0.2" height="15.0" fill="rgb(246,211,42)" rx="2" ry="2" />
<text  x="1089.50" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (29 samples, 0.03%)</title><rect x="1087.2" y="517" width="0.4" height="15.0" fill="rgb(240,93,20)" rx="2" ry="2" />
<text  x="1090.22" y="527.5" ></text>
</g>
<g >
<title>__memp_bhwrite (55 samples, 0.06%)</title><rect x="135.6" y="469" width="0.7" height="15.0" fill="rgb(251,92,13)" rx="2" ry="2" />
<text  x="138.60" y="479.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, COutPoint&amp;&gt; (163 samples, 0.19%)</title><rect x="473.0" y="277" width="2.2" height="15.0" fill="rgb(215,224,1)" rx="2" ry="2" />
<text  x="475.99" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_drop_node (39 samples, 0.04%)</title><rect x="851.5" y="341" width="0.5" height="15.0" fill="rgb(252,18,24)" rx="2" ry="2" />
<text  x="854.49" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::vector (8 samples, 0.01%)</title><rect x="1179.6" y="757" width="0.1" height="15.0" fill="rgb(233,185,3)" rx="2" ry="2" />
<text  x="1182.57" y="767.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (48 samples, 0.05%)</title><rect x="30.6" y="613" width="0.7" height="15.0" fill="rgb(210,117,35)" rx="2" ry="2" />
<text  x="33.61" y="623.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 0.01%)</title><rect x="1144.4" y="741" width="0.2" height="15.0" fill="rgb(239,132,41)" rx="2" ry="2" />
<text  x="1147.41" y="751.5" ></text>
</g>
<g >
<title>__db_vrfy_putpageinfo (54 samples, 0.06%)</title><rect x="163.5" y="565" width="0.8" height="15.0" fill="rgb(240,62,7)" rx="2" ry="2" />
<text  x="166.55" y="575.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (409 samples, 0.47%)</title><rect x="555.8" y="309" width="5.5" height="15.0" fill="rgb(243,63,20)" rx="2" ry="2" />
<text  x="558.80" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (26 samples, 0.03%)</title><rect x="948.8" y="581" width="0.4" height="15.0" fill="rgb(229,199,41)" rx="2" ry="2" />
<text  x="951.82" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (134 samples, 0.15%)</title><rect x="991.5" y="613" width="1.8" height="15.0" fill="rgb(253,10,0)" rx="2" ry="2" />
<text  x="994.54" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::_M_v (9 samples, 0.01%)</title><rect x="658.6" y="453" width="0.2" height="15.0" fill="rgb(233,207,31)" rx="2" ry="2" />
<text  x="661.63" y="463.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.01%)</title><rect x="146.9" y="277" width="0.1" height="15.0" fill="rgb(205,227,38)" rx="2" ry="2" />
<text  x="149.89" y="287.5" ></text>
</g>
<g >
<title>boost::aligned_storage&lt;48ul, 4ul&gt;::address (10 samples, 0.01%)</title><rect x="817.6" y="581" width="0.1" height="15.0" fill="rgb(209,204,27)" rx="2" ry="2" />
<text  x="820.59" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (8 samples, 0.01%)</title><rect x="559.0" y="229" width="0.1" height="15.0" fill="rgb(227,198,23)" rx="2" ry="2" />
<text  x="561.95" y="239.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (17 samples, 0.02%)</title><rect x="65.7" y="485" width="0.2" height="15.0" fill="rgb(241,51,7)" rx="2" ry="2" />
<text  x="68.67" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_Vector_base (51 samples, 0.06%)</title><rect x="603.2" y="613" width="0.7" height="15.0" fill="rgb(239,22,10)" rx="2" ry="2" />
<text  x="606.25" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (62 samples, 0.07%)</title><rect x="499.7" y="277" width="0.8" height="15.0" fill="rgb(230,154,21)" rx="2" ry="2" />
<text  x="502.70" y="287.5" ></text>
</g>
<g >
<title>__dbc_get (33 samples, 0.04%)</title><rect x="328.8" y="645" width="0.4" height="15.0" fill="rgb(253,97,2)" rx="2" ry="2" />
<text  x="331.79" y="655.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CBlockHeader&gt; (95 samples, 0.11%)</title><rect x="46.0" y="629" width="1.2" height="15.0" fill="rgb(218,85,1)" rx="2" ry="2" />
<text  x="48.97" y="639.5" ></text>
</g>
<g >
<title>Arena::alloc (1,186 samples, 1.35%)</title><rect x="846.6" y="405" width="16.0" height="15.0" fill="rgb(251,43,34)" rx="2" ry="2" />
<text  x="849.64" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_S_use_relocate (10 samples, 0.01%)</title><rect x="483.5" y="325" width="0.1" height="15.0" fill="rgb(206,42,54)" rx="2" ry="2" />
<text  x="486.51" y="335.5" ></text>
</g>
<g >
<title>CSHA256::Write (124 samples, 0.14%)</title><rect x="1118.8" y="661" width="1.7" height="15.0" fill="rgb(236,83,30)" rx="2" ry="2" />
<text  x="1121.83" y="671.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (13 samples, 0.01%)</title><rect x="1058.9" y="501" width="0.2" height="15.0" fill="rgb(238,39,37)" rx="2" ry="2" />
<text  x="1061.88" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::vector&lt;char const*, void&gt; (48 samples, 0.05%)</title><rect x="38.7" y="629" width="0.6" height="15.0" fill="rgb(243,122,22)" rx="2" ry="2" />
<text  x="41.66" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (53 samples, 0.06%)</title><rect x="985.0" y="533" width="0.7" height="15.0" fill="rgb(244,164,12)" rx="2" ry="2" />
<text  x="987.96" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (286 samples, 0.33%)</title><rect x="987.7" y="613" width="3.8" height="15.0" fill="rgb(234,227,19)" rx="2" ry="2" />
<text  x="990.68" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (46 samples, 0.05%)</title><rect x="95.4" y="389" width="0.6" height="15.0" fill="rgb(239,138,47)" rx="2" ry="2" />
<text  x="98.36" y="399.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.04%)</title><rect x="966.8" y="565" width="0.5" height="15.0" fill="rgb(251,80,46)" rx="2" ry="2" />
<text  x="969.85" y="575.5" ></text>
</g>
<g >
<title>__memp_alloc (12 samples, 0.01%)</title><rect x="66.8" y="437" width="0.2" height="15.0" fill="rgb(216,108,16)" rx="2" ry="2" />
<text  x="69.83" y="447.5" ></text>
</g>
<g >
<title>ShiftMessageB (9 samples, 0.01%)</title><rect x="1120.3" y="629" width="0.1" height="15.0" fill="rgb(211,180,30)" rx="2" ry="2" />
<text  x="1123.26" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (143 samples, 0.16%)</title><rect x="960.4" y="549" width="1.9" height="15.0" fill="rgb(232,169,9)" rx="2" ry="2" />
<text  x="963.35" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (255 samples, 0.29%)</title><rect x="735.7" y="613" width="3.5" height="15.0" fill="rgb(211,161,34)" rx="2" ry="2" />
<text  x="738.75" y="623.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (39 samples, 0.04%)</title><rect x="559.4" y="293" width="0.5" height="15.0" fill="rgb(224,82,47)" rx="2" ry="2" />
<text  x="562.41" y="303.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, CVarInt&lt; (42 samples, 0.05%)</title><rect x="43.2" y="581" width="0.5" height="15.0" fill="rgb(226,32,47)" rx="2" ry="2" />
<text  x="46.15" y="591.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (15 samples, 0.02%)</title><rect x="45.4" y="517" width="0.2" height="15.0" fill="rgb(229,42,27)" rx="2" ry="2" />
<text  x="48.36" y="527.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.01%)</title><rect x="817.0" y="389" width="0.1" height="15.0" fill="rgb(211,119,8)" rx="2" ry="2" />
<text  x="819.95" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (19 samples, 0.02%)</title><rect x="510.0" y="245" width="0.2" height="15.0" fill="rgb(242,162,1)" rx="2" ry="2" />
<text  x="512.99" y="255.5" ></text>
</g>
<g >
<title>CSHA256::Write (245 samples, 0.28%)</title><rect x="1127.6" y="677" width="3.3" height="15.0" fill="rgb(222,13,50)" rx="2" ry="2" />
<text  x="1130.58" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (45 samples, 0.05%)</title><rect x="1063.6" y="661" width="0.6" height="15.0" fill="rgb(225,13,39)" rx="2" ry="2" />
<text  x="1066.55" y="671.5" ></text>
</g>
<g >
<title>CSHA256::Write (311 samples, 0.36%)</title><rect x="1135.8" y="197" width="4.2" height="15.0" fill="rgb(205,226,38)" rx="2" ry="2" />
<text  x="1138.80" y="207.5" ></text>
</g>
<g >
<title>__bam_get_root (40 samples, 0.05%)</title><rect x="91.9" y="405" width="0.6" height="15.0" fill="rgb(212,209,41)" rx="2" ry="2" />
<text  x="94.92" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (32 samples, 0.04%)</title><rect x="839.6" y="565" width="0.4" height="15.0" fill="rgb(226,120,23)" rx="2" ry="2" />
<text  x="842.57" y="575.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (82 samples, 0.09%)</title><rect x="527.2" y="165" width="1.1" height="15.0" fill="rgb(228,101,32)" rx="2" ry="2" />
<text  x="530.19" y="175.5" ></text>
</g>
<g >
<title>AppInitMain (591 samples, 0.67%)</title><rect x="30.3" y="725" width="7.9" height="15.0" fill="rgb(218,99,51)" rx="2" ry="2" />
<text  x="33.27" y="735.5" ></text>
</g>
<g >
<title>CHashWriter::write (19 samples, 0.02%)</title><rect x="531.5" y="69" width="0.3" height="15.0" fill="rgb(227,8,7)" rx="2" ry="2" />
<text  x="534.50" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;COutPoint&gt;::_Rb_tree_iterator (12 samples, 0.01%)</title><rect x="908.7" y="581" width="0.1" height="15.0" fill="rgb(228,89,26)" rx="2" ry="2" />
<text  x="911.66" y="591.5" ></text>
</g>
<g >
<title>__db_lput (12 samples, 0.01%)</title><rect x="155.0" y="485" width="0.2" height="15.0" fill="rgb(254,224,46)" rx="2" ry="2" />
<text  x="158.02" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::destroy&lt;unsigned char&gt; (431 samples, 0.49%)</title><rect x="1071.7" y="645" width="5.8" height="15.0" fill="rgb(205,195,5)" rx="2" ry="2" />
<text  x="1074.67" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (22 samples, 0.03%)</title><rect x="669.2" y="629" width="0.3" height="15.0" fill="rgb(249,27,5)" rx="2" ry="2" />
<text  x="672.20" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::vector (20 samples, 0.02%)</title><rect x="867.8" y="501" width="0.3" height="15.0" fill="rgb(229,6,42)" rx="2" ry="2" />
<text  x="870.83" y="511.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (137 samples, 0.16%)</title><rect x="1125.6" y="613" width="1.8" height="15.0" fill="rgb(231,93,12)" rx="2" ry="2" />
<text  x="1128.58" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_check_len (32 samples, 0.04%)</title><rect x="397.4" y="437" width="0.4" height="15.0" fill="rgb(209,209,49)" rx="2" ry="2" />
<text  x="400.39" y="447.5" ></text>
</g>
<g >
<title>CachableAmount::CachableAmount (28 samples, 0.03%)</title><rect x="1016.5" y="661" width="0.3" height="15.0" fill="rgb(221,38,30)" rx="2" ry="2" />
<text  x="1019.45" y="671.5" ></text>
</g>
<g >
<title>QuadRound (117 samples, 0.13%)</title><rect x="181.2" y="149" width="1.6" height="15.0" fill="rgb(213,169,21)" rx="2" ry="2" />
<text  x="184.23" y="159.5" ></text>
</g>
<g >
<title>CWallet::AddToSpends (2,589 samples, 2.96%)</title><rect x="896.0" y="645" width="34.9" height="15.0" fill="rgb(247,114,49)" rx="2" ry="2" />
<text  x="899.04" y="655.5" >CW..</text>
</g>
<g >
<title>__db_tas_mutex_readlock (16 samples, 0.02%)</title><rect x="85.5" y="405" width="0.2" height="15.0" fill="rgb(219,10,6)" rx="2" ry="2" />
<text  x="88.47" y="415.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (52 samples, 0.06%)</title><rect x="1098.3" y="597" width="0.7" height="15.0" fill="rgb(232,22,30)" rx="2" ry="2" />
<text  x="1101.32" y="607.5" ></text>
</g>
<g >
<title>CSizeComputer::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (337 samples, 0.38%)</title><rect x="1032.4" y="581" width="4.6" height="15.0" fill="rgb(239,182,38)" rx="2" ry="2" />
<text  x="1035.44" y="591.5" ></text>
</g>
<g >
<title>CTxOut::~CTxOut (12 samples, 0.01%)</title><rect x="485.5" y="373" width="0.1" height="15.0" fill="rgb(227,118,46)" rx="2" ry="2" />
<text  x="488.45" y="383.5" ></text>
</g>
<g >
<title>[unknown] (39 samples, 0.04%)</title><rect x="135.7" y="405" width="0.5" height="15.0" fill="rgb(219,157,22)" rx="2" ry="2" />
<text  x="138.65" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator* (9 samples, 0.01%)</title><rect x="931.5" y="645" width="0.1" height="15.0" fill="rgb(216,32,52)" rx="2" ry="2" />
<text  x="934.50" y="655.5" ></text>
</g>
<g >
<title>CTransaction::HasWitness (36 samples, 0.04%)</title><rect x="540.7" y="421" width="0.5" height="15.0" fill="rgb(231,183,17)" rx="2" ry="2" />
<text  x="543.73" y="431.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (425 samples, 0.49%)</title><rect x="545.3" y="309" width="5.8" height="15.0" fill="rgb(236,90,14)" rx="2" ry="2" />
<text  x="548.33" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (617 samples, 0.70%)</title><rect x="498.6" y="325" width="8.3" height="15.0" fill="rgb(237,14,14)" rx="2" ry="2" />
<text  x="501.59" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (21 samples, 0.02%)</title><rect x="39.4" y="549" width="0.3" height="15.0" fill="rgb(244,28,2)" rx="2" ry="2" />
<text  x="42.39" y="559.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (8 samples, 0.01%)</title><rect x="539.1" y="277" width="0.1" height="15.0" fill="rgb(227,180,7)" rx="2" ry="2" />
<text  x="542.06" y="287.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;unsigned char&gt; (27 samples, 0.03%)</title><rect x="501.9" y="213" width="0.4" height="15.0" fill="rgb(232,57,1)" rx="2" ry="2" />
<text  x="504.91" y="223.5" ></text>
</g>
<g >
<title>std::operator== (8 samples, 0.01%)</title><rect x="908.1" y="581" width="0.1" height="15.0" fill="rgb(247,175,16)" rx="2" ry="2" />
<text  x="911.08" y="591.5" ></text>
</g>
<g >
<title>__lock_env_refresh (9 samples, 0.01%)</title><rect x="180.8" y="421" width="0.1" height="15.0" fill="rgb(224,186,52)" rx="2" ry="2" />
<text  x="183.78" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::construct&lt;unsigned char&gt; (833 samples, 0.95%)</title><rect x="621.9" y="581" width="11.2" height="15.0" fill="rgb(253,218,8)" rx="2" ry="2" />
<text  x="624.91" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_get_Tp_allocator (8 samples, 0.01%)</title><rect x="1183.0" y="741" width="0.1" height="15.0" fill="rgb(224,26,53)" rx="2" ry="2" />
<text  x="1185.98" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (12 samples, 0.01%)</title><rect x="462.7" y="581" width="0.2" height="15.0" fill="rgb(248,45,52)" rx="2" ry="2" />
<text  x="465.73" y="591.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.02%)</title><rect x="1146.3" y="725" width="0.3" height="15.0" fill="rgb(215,26,49)" rx="2" ry="2" />
<text  x="1149.31" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::destroy&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (44 samples, 0.05%)</title><rect x="985.1" y="517" width="0.6" height="15.0" fill="rgb(214,158,32)" rx="2" ry="2" />
<text  x="988.08" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (51 samples, 0.06%)</title><rect x="361.4" y="597" width="0.7" height="15.0" fill="rgb(245,71,33)" rx="2" ry="2" />
<text  x="364.43" y="607.5" ></text>
</g>
<g >
<title>__db_pthread_mutex_destroy (12 samples, 0.01%)</title><rect x="134.4" y="437" width="0.2" height="15.0" fill="rgb(226,34,17)" rx="2" ry="2" />
<text  x="137.44" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_do_relocate (49 samples, 0.06%)</title><rect x="504.5" y="277" width="0.6" height="15.0" fill="rgb(248,140,12)" rx="2" ry="2" />
<text  x="507.47" y="287.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.02%)</title><rect x="87.2" y="357" width="0.3" height="15.0" fill="rgb(218,124,52)" rx="2" ry="2" />
<text  x="90.25" y="367.5" ></text>
</g>
<g >
<title>std::operator== (13 samples, 0.01%)</title><rect x="594.2" y="581" width="0.2" height="15.0" fill="rgb(210,123,12)" rx="2" ry="2" />
<text  x="597.22" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Vector_base (38 samples, 0.04%)</title><rect x="1021.1" y="645" width="0.5" height="15.0" fill="rgb(241,178,8)" rx="2" ry="2" />
<text  x="1024.06" y="655.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::shared_ptr&lt;CTransaction const&gt;&amp;&gt; (8,064 samples, 9.21%)</title><rect x="463.3" y="629" width="108.6" height="15.0" fill="rgb(207,223,28)" rx="2" ry="2" />
<text  x="466.26" y="639.5" >CDataStream::..</text>
</g>
<g >
<title>CSipHasher::Finalize (28 samples, 0.03%)</title><rect x="739.4" y="581" width="0.4" height="15.0" fill="rgb(214,186,10)" rx="2" ry="2" />
<text  x="742.42" y="591.5" ></text>
</g>
<g >
<title>__memp_fget (71 samples, 0.08%)</title><rect x="357.9" y="613" width="0.9" height="15.0" fill="rgb(216,214,0)" rx="2" ry="2" />
<text  x="360.87" y="623.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (19 samples, 0.02%)</title><rect x="480.9" y="261" width="0.3" height="15.0" fill="rgb(230,160,34)" rx="2" ry="2" />
<text  x="483.94" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (23 samples, 0.03%)</title><rect x="957.3" y="581" width="0.3" height="15.0" fill="rgb(209,186,47)" rx="2" ry="2" />
<text  x="960.29" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; (11 samples, 0.01%)</title><rect x="766.6" y="597" width="0.1" height="15.0" fill="rgb(230,110,21)" rx="2" ry="2" />
<text  x="769.59" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (652 samples, 0.74%)</title><rect x="305.8" y="581" width="8.7" height="15.0" fill="rgb(243,126,41)" rx="2" ry="2" />
<text  x="308.76" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~_Vector_base (9 samples, 0.01%)</title><rect x="571.1" y="437" width="0.1" height="15.0" fill="rgb(224,64,2)" rx="2" ry="2" />
<text  x="574.09" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (260 samples, 0.30%)</title><rect x="655.7" y="517" width="3.5" height="15.0" fill="rgb(227,206,42)" rx="2" ry="2" />
<text  x="658.72" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::emplace&lt;std::pair&lt;COutPoint, uint256&gt; &gt; (1,201 samples, 1.37%)</title><rect x="914.7" y="613" width="16.2" height="15.0" fill="rgb(247,27,23)" rx="2" ry="2" />
<text  x="917.71" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_destroy_node (36 samples, 0.04%)</title><rect x="1047.0" y="597" width="0.5" height="15.0" fill="rgb(231,90,29)" rx="2" ry="2" />
<text  x="1050.04" y="607.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.04%)</title><rect x="662.2" y="453" width="0.5" height="15.0" fill="rgb(245,97,29)" rx="2" ry="2" />
<text  x="665.23" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (8 samples, 0.01%)</title><rect x="1014.8" y="661" width="0.1" height="15.0" fill="rgb(216,212,31)" rx="2" ry="2" />
<text  x="1017.80" y="671.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (11 samples, 0.01%)</title><rect x="880.7" y="501" width="0.1" height="15.0" fill="rgb(250,65,37)" rx="2" ry="2" />
<text  x="883.65" y="511.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (134 samples, 0.15%)</title><rect x="535.9" y="245" width="1.8" height="15.0" fill="rgb(254,116,45)" rx="2" ry="2" />
<text  x="538.93" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10 samples, 0.01%)</title><rect x="822.4" y="533" width="0.1" height="15.0" fill="rgb(225,228,22)" rx="2" ry="2" />
<text  x="825.37" y="543.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (11 samples, 0.01%)</title><rect x="1097.8" y="549" width="0.2" height="15.0" fill="rgb(249,99,5)" rx="2" ry="2" />
<text  x="1100.82" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (26 samples, 0.03%)</title><rect x="1102.2" y="661" width="0.3" height="15.0" fill="rgb(213,158,23)" rx="2" ry="2" />
<text  x="1105.16" y="671.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (35 samples, 0.04%)</title><rect x="549.7" y="293" width="0.5" height="15.0" fill="rgb(251,149,33)" rx="2" ry="2" />
<text  x="552.73" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (25 samples, 0.03%)</title><rect x="959.8" y="549" width="0.4" height="15.0" fill="rgb(249,62,23)" rx="2" ry="2" />
<text  x="962.83" y="559.5" ></text>
</g>
<g >
<title>CDataStream::read (55 samples, 0.06%)</title><rect x="446.3" y="565" width="0.7" height="15.0" fill="rgb(229,24,31)" rx="2" ry="2" />
<text  x="449.26" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, char* const&amp;&gt; (9 samples, 0.01%)</title><rect x="679.6" y="437" width="0.2" height="15.0" fill="rgb(228,92,17)" rx="2" ry="2" />
<text  x="682.64" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;uint256&amp;, CWalletTx&amp;&gt; (1,284 samples, 1.47%)</title><rect x="987.0" y="645" width="17.3" height="15.0" fill="rgb(225,29,34)" rx="2" ry="2" />
<text  x="990.00" y="655.5" ></text>
</g>
<g >
<title>TLS wrapper function for g_lockstack (14 samples, 0.02%)</title><rect x="872.3" y="581" width="0.2" height="15.0" fill="rgb(225,151,31)" rx="2" ry="2" />
<text  x="875.27" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::lower_bound (24 samples, 0.03%)</title><rect x="612.9" y="501" width="0.4" height="15.0" fill="rgb(245,120,24)" rx="2" ry="2" />
<text  x="615.94" y="511.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (57 samples, 0.07%)</title><rect x="1017.0" y="661" width="0.8" height="15.0" fill="rgb(240,82,16)" rx="2" ry="2" />
<text  x="1020.03" y="671.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (9 samples, 0.01%)</title><rect x="390.1" y="581" width="0.1" height="15.0" fill="rgb(252,92,40)" rx="2" ry="2" />
<text  x="393.07" y="591.5" ></text>
</g>
<g >
<title>ShiftMessageB (10 samples, 0.01%)</title><rect x="1127.1" y="565" width="0.2" height="15.0" fill="rgb(227,98,4)" rx="2" ry="2" />
<text  x="1130.15" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_drop_node (71 samples, 0.08%)</title><rect x="1046.9" y="613" width="1.0" height="15.0" fill="rgb(214,89,35)" rx="2" ry="2" />
<text  x="1049.94" y="623.5" ></text>
</g>
<g >
<title>__memp_alloc (44 samples, 0.05%)</title><rect x="358.1" y="597" width="0.6" height="15.0" fill="rgb(231,228,26)" rx="2" ry="2" />
<text  x="361.13" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (12 samples, 0.01%)</title><rect x="449.8" y="581" width="0.1" height="15.0" fill="rgb(215,90,35)" rx="2" ry="2" />
<text  x="452.75" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; (21 samples, 0.02%)</title><rect x="1095.3" y="597" width="0.3" height="15.0" fill="rgb(213,52,51)" rx="2" ry="2" />
<text  x="1098.30" y="607.5" ></text>
</g>
<g >
<title>CTxIn::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (326 samples, 0.37%)</title><rect x="1027.1" y="501" width="4.4" height="15.0" fill="rgb(207,203,22)" rx="2" ry="2" />
<text  x="1030.07" y="511.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, unsigned char*&gt; (19 samples, 0.02%)</title><rect x="1099.8" y="597" width="0.3" height="15.0" fill="rgb(227,199,8)" rx="2" ry="2" />
<text  x="1102.80" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTxIn&amp;&gt; (525 samples, 0.60%)</title><rect x="472.4" y="357" width="7.0" height="15.0" fill="rgb(210,173,5)" rx="2" ry="2" />
<text  x="475.35" y="367.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (9 samples, 0.01%)</title><rect x="403.4" y="549" width="0.2" height="15.0" fill="rgb(223,171,20)" rx="2" ry="2" />
<text  x="406.44" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10 samples, 0.01%)</title><rect x="683.0" y="453" width="0.1" height="15.0" fill="rgb(237,221,24)" rx="2" ry="2" />
<text  x="686.01" y="463.5" ></text>
</g>
<g >
<title>_int_malloc (18 samples, 0.02%)</title><rect x="508.9" y="245" width="0.2" height="15.0" fill="rgb(227,76,21)" rx="2" ry="2" />
<text  x="511.90" y="255.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (164 samples, 0.19%)</title><rect x="180.9" y="533" width="2.2" height="15.0" fill="rgb(243,102,50)" rx="2" ry="2" />
<text  x="183.93" y="543.5" ></text>
</g>
<g >
<title>CHashWriter::write (27 samples, 0.03%)</title><rect x="549.8" y="261" width="0.4" height="15.0" fill="rgb(250,56,25)" rx="2" ry="2" />
<text  x="552.84" y="271.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (679 samples, 0.78%)</title><rect x="90.7" y="437" width="9.2" height="15.0" fill="rgb(238,199,0)" rx="2" ry="2" />
<text  x="93.74" y="447.5" ></text>
</g>
<g >
<title>__memp_alloc (16 samples, 0.02%)</title><rect x="1143.9" y="421" width="0.2" height="15.0" fill="rgb(222,69,54)" rx="2" ry="2" />
<text  x="1146.88" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::base (32 samples, 0.04%)</title><rect x="198.2" y="629" width="0.5" height="15.0" fill="rgb(223,213,13)" rx="2" ry="2" />
<text  x="201.22" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::erase (269 samples, 0.31%)</title><rect x="655.6" y="549" width="3.6" height="15.0" fill="rgb(236,132,43)" rx="2" ry="2" />
<text  x="658.60" y="559.5" ></text>
</g>
<g >
<title>CuckooCache::bit_packed_atomic_flags::setup (14 samples, 0.02%)</title><rect x="30.4" y="661" width="0.2" height="15.0" fill="rgb(208,84,4)" rx="2" ry="2" />
<text  x="33.42" y="671.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (19 samples, 0.02%)</title><rect x="45.1" y="597" width="0.2" height="15.0" fill="rgb(254,99,16)" rx="2" ry="2" />
<text  x="48.08" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (53 samples, 0.06%)</title><rect x="809.0" y="453" width="0.7" height="15.0" fill="rgb(217,90,45)" rx="2" ry="2" />
<text  x="811.99" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_S_value (16 samples, 0.02%)</title><rect x="1040.4" y="597" width="0.2" height="15.0" fill="rgb(206,197,50)" rx="2" ry="2" />
<text  x="1043.41" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::end (13 samples, 0.01%)</title><rect x="831.4" y="549" width="0.1" height="15.0" fill="rgb(226,141,3)" rx="2" ry="2" />
<text  x="834.37" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::max_size (16 samples, 0.02%)</title><rect x="668.6" y="597" width="0.2" height="15.0" fill="rgb(244,115,22)" rx="2" ry="2" />
<text  x="671.62" y="607.5" ></text>
</g>
<g >
<title>CHash256::Write (16 samples, 0.02%)</title><rect x="554.2" y="165" width="0.3" height="15.0" fill="rgb(233,61,13)" rx="2" ry="2" />
<text  x="557.25" y="175.5" ></text>
</g>
<g >
<title>CDataStream::CDataStream (50 samples, 0.06%)</title><rect x="38.7" y="645" width="0.6" height="15.0" fill="rgb(215,117,43)" rx="2" ry="2" />
<text  x="41.66" y="655.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (46 samples, 0.05%)</title><rect x="103.3" y="421" width="0.6" height="15.0" fill="rgb(248,49,6)" rx="2" ry="2" />
<text  x="106.31" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="590.1" y="517" width="0.2" height="15.0" fill="rgb(228,164,21)" rx="2" ry="2" />
<text  x="593.07" y="527.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, unsigned int&gt; (10 samples, 0.01%)</title><rect x="47.1" y="533" width="0.1" height="15.0" fill="rgb(229,81,52)" rx="2" ry="2" />
<text  x="50.11" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::construct&lt;std::pair&lt;long const, CWalletTx*&gt;, std::pair&lt;long, CWalletTx*&gt; &gt; (35 samples, 0.04%)</title><rect x="965.5" y="581" width="0.5" height="15.0" fill="rgb(238,101,2)" rx="2" ry="2" />
<text  x="968.54" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (10 samples, 0.01%)</title><rect x="451.5" y="501" width="0.1" height="15.0" fill="rgb(220,130,21)" rx="2" ry="2" />
<text  x="454.45" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (50 samples, 0.06%)</title><rect x="609.3" y="645" width="0.7" height="15.0" fill="rgb(243,154,35)" rx="2" ry="2" />
<text  x="612.33" y="655.5" ></text>
</g>
<g >
<title>operator- (14 samples, 0.02%)</title><rect x="805.4" y="581" width="0.2" height="15.0" fill="rgb(208,6,30)" rx="2" ry="2" />
<text  x="808.40" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (18 samples, 0.02%)</title><rect x="657.7" y="453" width="0.2" height="15.0" fill="rgb(219,210,7)" rx="2" ry="2" />
<text  x="660.69" y="463.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (258 samples, 0.29%)</title><rect x="398.9" y="581" width="3.5" height="15.0" fill="rgb(248,17,6)" rx="2" ry="2" />
<text  x="401.95" y="591.5" ></text>
</g>
<g >
<title>CDataStream::read (8 samples, 0.01%)</title><rect x="14.6" y="757" width="0.1" height="15.0" fill="rgb(212,26,34)" rx="2" ry="2" />
<text  x="17.60" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTransaction&gt; &gt;::construct&lt;CTransaction const&gt; (132 samples, 0.15%)</title><rect x="1057.3" y="565" width="1.8" height="15.0" fill="rgb(235,195,2)" rx="2" ry="2" />
<text  x="1060.31" y="575.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (113 samples, 0.13%)</title><rect x="486.9" y="245" width="1.6" height="15.0" fill="rgb(220,8,6)" rx="2" ry="2" />
<text  x="489.93" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::max_size (9 samples, 0.01%)</title><rect x="202.5" y="565" width="0.1" height="15.0" fill="rgb(234,62,42)" rx="2" ry="2" />
<text  x="205.47" y="575.5" ></text>
</g>
<g >
<title>__db_lget (47 samples, 0.05%)</title><rect x="150.2" y="469" width="0.7" height="15.0" fill="rgb(208,134,30)" rx="2" ry="2" />
<text  x="153.22" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::operator++ (16 samples, 0.02%)</title><rect x="812.6" y="421" width="0.3" height="15.0" fill="rgb(217,35,48)" rx="2" ry="2" />
<text  x="815.64" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::__normal_iterator&lt;char*&gt; (26 samples, 0.03%)</title><rect x="195.2" y="661" width="0.4" height="15.0" fill="rgb(228,226,8)" rx="2" ry="2" />
<text  x="198.23" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (12 samples, 0.01%)</title><rect x="457.4" y="533" width="0.2" height="15.0" fill="rgb(207,91,39)" rx="2" ry="2" />
<text  x="460.41" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;char const*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt; (69 samples, 0.08%)</title><rect x="197.8" y="645" width="1.0" height="15.0" fill="rgb(243,114,46)" rx="2" ry="2" />
<text  x="200.83" y="655.5" ></text>
</g>
<g >
<title>CScriptID::CScriptID (1,437 samples, 1.64%)</title><rect x="786.9" y="613" width="19.3" height="15.0" fill="rgb(236,19,33)" rx="2" ry="2" />
<text  x="789.87" y="623.5" ></text>
</g>
<g >
<title>CTxOut::Serialize&lt;CHashWriter&gt; (189 samples, 0.22%)</title><rect x="552.1" y="277" width="2.5" height="15.0" fill="rgb(239,103,30)" rx="2" ry="2" />
<text  x="555.09" y="287.5" ></text>
</g>
<g >
<title>[unknown] (33 samples, 0.04%)</title><rect x="135.7" y="373" width="0.5" height="15.0" fill="rgb(244,93,8)" rx="2" ry="2" />
<text  x="138.73" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20 samples, 0.02%)</title><rect x="819.0" y="565" width="0.2" height="15.0" fill="rgb(234,102,14)" rx="2" ry="2" />
<text  x="821.96" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::base (12 samples, 0.01%)</title><rect x="931.9" y="629" width="0.1" height="15.0" fill="rgb(231,96,27)" rx="2" ry="2" />
<text  x="934.88" y="639.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (33 samples, 0.04%)</title><rect x="808.1" y="453" width="0.5" height="15.0" fill="rgb(236,63,6)" rx="2" ry="2" />
<text  x="811.11" y="463.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (13 samples, 0.01%)</title><rect x="168.5" y="469" width="0.2" height="15.0" fill="rgb(252,198,14)" rx="2" ry="2" />
<text  x="171.49" y="479.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (249 samples, 0.28%)</title><rect x="556.1" y="293" width="3.3" height="15.0" fill="rgb(232,0,24)" rx="2" ry="2" />
<text  x="559.05" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="888.8" y="581" width="0.2" height="15.0" fill="rgb(214,92,8)" rx="2" ry="2" />
<text  x="891.83" y="591.5" ></text>
</g>
<g >
<title>__db_cursor_int (23 samples, 0.03%)</title><rect x="168.9" y="533" width="0.3" height="15.0" fill="rgb(248,181,42)" rx="2" ry="2" />
<text  x="171.91" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;CTxOut const*, CTxOut*, CTxOut&gt; (17 samples, 0.02%)</title><rect x="492.4" y="309" width="0.2" height="15.0" fill="rgb(253,33,7)" rx="2" ry="2" />
<text  x="495.41" y="319.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="411.7" y="549" width="0.2" height="15.0" fill="rgb(214,189,50)" rx="2" ry="2" />
<text  x="414.74" y="559.5" ></text>
</g>
<g >
<title>CHashWriter::GetHash (324 samples, 0.37%)</title><rect x="1109.2" y="453" width="4.4" height="15.0" fill="rgb(222,1,32)" rx="2" ry="2" />
<text  x="1112.20" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_max_size (38 samples, 0.04%)</title><rect x="503.2" y="261" width="0.5" height="15.0" fill="rgb(248,7,9)" rx="2" ry="2" />
<text  x="506.20" y="271.5" ></text>
</g>
<g >
<title>CTxOut::SetNull (13 samples, 0.01%)</title><rect x="1032.7" y="533" width="0.2" height="15.0" fill="rgb(250,29,9)" rx="2" ry="2" />
<text  x="1035.69" y="543.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.02%)</title><rect x="936.8" y="517" width="0.2" height="15.0" fill="rgb(222,122,46)" rx="2" ry="2" />
<text  x="939.81" y="527.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.02%)</title><rect x="145.9" y="325" width="0.2" height="15.0" fill="rgb(243,90,29)" rx="2" ry="2" />
<text  x="148.87" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_v (15 samples, 0.02%)</title><rect x="860.0" y="277" width="0.2" height="15.0" fill="rgb(251,127,6)" rx="2" ry="2" />
<text  x="862.98" y="287.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (18 samples, 0.02%)</title><rect x="43.4" y="501" width="0.2" height="15.0" fill="rgb(225,56,4)" rx="2" ry="2" />
<text  x="46.38" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (11 samples, 0.01%)</title><rect x="608.5" y="629" width="0.1" height="15.0" fill="rgb(246,16,13)" rx="2" ry="2" />
<text  x="611.46" y="639.5" ></text>
</g>
<g >
<title>__bam_search (16 samples, 0.02%)</title><rect x="1143.9" y="453" width="0.2" height="15.0" fill="rgb(227,144,31)" rx="2" ry="2" />
<text  x="1146.88" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (50 samples, 0.06%)</title><rect x="1017.1" y="645" width="0.7" height="15.0" fill="rgb(237,136,34)" rx="2" ry="2" />
<text  x="1020.13" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_ptr (29 samples, 0.03%)</title><rect x="965.1" y="581" width="0.4" height="15.0" fill="rgb(238,210,19)" rx="2" ry="2" />
<text  x="968.07" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;CScriptID, CScript, SaltedIDHasher, std::equal_to&lt;CScriptID&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt; &gt;::operator[] (708 samples, 0.81%)</title><rect x="818.7" y="613" width="9.6" height="15.0" fill="rgb(228,142,10)" rx="2" ry="2" />
<text  x="821.72" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (31 samples, 0.04%)</title><rect x="1059.4" y="565" width="0.4" height="15.0" fill="rgb(223,228,8)" rx="2" ry="2" />
<text  x="1062.39" y="575.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (8 samples, 0.01%)</title><rect x="168.7" y="501" width="0.2" height="15.0" fill="rgb(239,219,35)" rx="2" ry="2" />
<text  x="171.75" y="511.5" ></text>
</g>
<g >
<title>__lock_get_internal (47 samples, 0.05%)</title><rect x="123.8" y="373" width="0.6" height="15.0" fill="rgb(222,38,12)" rx="2" ry="2" />
<text  x="126.81" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::deallocate (21 samples, 0.02%)</title><rect x="1047.6" y="581" width="0.3" height="15.0" fill="rgb(219,205,33)" rx="2" ry="2" />
<text  x="1050.61" y="591.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (2,281 samples, 2.61%)</title><rect x="413.8" y="613" width="30.7" height="15.0" fill="rgb(233,6,43)" rx="2" ry="2" />
<text  x="416.76" y="623.5" >Un..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.01%)</title><rect x="861.1" y="341" width="0.1" height="15.0" fill="rgb(215,68,4)" rx="2" ry="2" />
<text  x="864.13" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::construct&lt;char, char const&amp;&gt; (6,224 samples, 7.11%)</title><rect x="230.7" y="597" width="83.8" height="15.0" fill="rgb(236,109,2)" rx="2" ry="2" />
<text  x="233.67" y="607.5" >std::allo..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="923.8" y="533" width="0.1" height="15.0" fill="rgb(220,138,5)" rx="2" ry="2" />
<text  x="926.83" y="543.5" ></text>
</g>
<g >
<title>__memp_alloc (585 samples, 0.67%)</title><rect x="128.5" y="485" width="7.9" height="15.0" fill="rgb(219,10,33)" rx="2" ry="2" />
<text  x="131.50" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (11 samples, 0.01%)</title><rect x="589.8" y="533" width="0.1" height="15.0" fill="rgb(205,59,51)" rx="2" ry="2" />
<text  x="592.79" y="543.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (18 samples, 0.02%)</title><rect x="70.1" y="469" width="0.2" height="15.0" fill="rgb(253,10,30)" rx="2" ry="2" />
<text  x="73.10" y="479.5" ></text>
</g>
<g >
<title>__db_lget (15 samples, 0.02%)</title><rect x="102.5" y="389" width="0.2" height="15.0" fill="rgb(210,58,0)" rx="2" ry="2" />
<text  x="105.50" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;, bool, true&gt; (13 samples, 0.01%)</title><rect x="856.2" y="325" width="0.2" height="15.0" fill="rgb(222,134,13)" rx="2" ry="2" />
<text  x="859.24" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::cbegin (49 samples, 0.06%)</title><rect x="326.0" y="645" width="0.7" height="15.0" fill="rgb(235,192,14)" rx="2" ry="2" />
<text  x="329.04" y="655.5" ></text>
</g>
<g >
<title>__libc_pread (30 samples, 0.03%)</title><rect x="357.1" y="549" width="0.4" height="15.0" fill="rgb(206,175,31)" rx="2" ry="2" />
<text  x="360.11" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="90.1" y="389" width="0.2" height="15.0" fill="rgb(244,93,13)" rx="2" ry="2" />
<text  x="93.09" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::pop_back (8 samples, 0.01%)</title><rect x="882.0" y="597" width="0.1" height="15.0" fill="rgb(217,96,37)" rx="2" ry="2" />
<text  x="885.03" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_max_size (14 samples, 0.02%)</title><rect x="816.5" y="405" width="0.2" height="15.0" fill="rgb(206,15,53)" rx="2" ry="2" />
<text  x="819.52" y="415.5" ></text>
</g>
<g >
<title>std::equal_to&lt;CScriptID&gt;::operator (24 samples, 0.03%)</title><rect x="738.8" y="549" width="0.3" height="15.0" fill="rgb(232,156,10)" rx="2" ry="2" />
<text  x="741.80" y="559.5" ></text>
</g>
<g >
<title>ShiftMessageB (10 samples, 0.01%)</title><rect x="1130.5" y="645" width="0.1" height="15.0" fill="rgb(206,229,14)" rx="2" ry="2" />
<text  x="1133.50" y="655.5" ></text>
</g>
<g >
<title>FillableSigningProvider::ImplicitlyLearnRelatedKeyScripts (289 samples, 0.33%)</title><rect x="1123.5" y="677" width="3.9" height="15.0" fill="rgb(212,107,49)" rx="2" ry="2" />
<text  x="1126.54" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree (44 samples, 0.05%)</title><rect x="1045.8" y="645" width="0.6" height="15.0" fill="rgb(247,213,39)" rx="2" ry="2" />
<text  x="1048.79" y="655.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (164 samples, 0.19%)</title><rect x="183.1" y="261" width="2.3" height="15.0" fill="rgb(222,61,51)" rx="2" ry="2" />
<text  x="186.14" y="271.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (11 samples, 0.01%)</title><rect x="1091.4" y="581" width="0.2" height="15.0" fill="rgb(229,205,51)" rx="2" ry="2" />
<text  x="1094.41" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (37 samples, 0.04%)</title><rect x="490.4" y="309" width="0.5" height="15.0" fill="rgb(248,8,53)" rx="2" ry="2" />
<text  x="493.36" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (179 samples, 0.20%)</title><rect x="854.0" y="357" width="2.4" height="15.0" fill="rgb(248,100,20)" rx="2" ry="2" />
<text  x="857.00" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::end (10 samples, 0.01%)</title><rect x="1086.9" y="565" width="0.1" height="15.0" fill="rgb(211,178,6)" rx="2" ry="2" />
<text  x="1089.85" y="575.5" ></text>
</g>
<g >
<title>WriteLE64 (10 samples, 0.01%)</title><rect x="764.6" y="565" width="0.2" height="15.0" fill="rgb(213,81,53)" rx="2" ry="2" />
<text  x="767.64" y="575.5" ></text>
</g>
<g >
<title>CWallet::LoadKeyPool (78 samples, 0.09%)</title><rect x="893.4" y="677" width="1.1" height="15.0" fill="rgb(242,121,43)" rx="2" ry="2" />
<text  x="896.42" y="687.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (164 samples, 0.19%)</title><rect x="180.9" y="357" width="2.2" height="15.0" fill="rgb(211,66,54)" rx="2" ry="2" />
<text  x="183.93" y="367.5" ></text>
</g>
<g >
<title>BerkeleyDatabase::~BerkeleyDatabase (11 samples, 0.01%)</title><rect x="180.8" y="645" width="0.1" height="15.0" fill="rgb(211,36,19)" rx="2" ry="2" />
<text  x="183.78" y="655.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (11 samples, 0.01%)</title><rect x="617.9" y="533" width="0.1" height="15.0" fill="rgb(210,99,18)" rx="2" ry="2" />
<text  x="620.87" y="543.5" ></text>
</g>
<g >
<title>__memp_fget (66 samples, 0.08%)</title><rect x="101.1" y="389" width="0.9" height="15.0" fill="rgb(218,146,1)" rx="2" ry="2" />
<text  x="104.11" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;COutPoint&gt;::operator (23 samples, 0.03%)</title><rect x="911.2" y="533" width="0.3" height="15.0" fill="rgb(245,81,13)" rx="2" ry="2" />
<text  x="914.23" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (188 samples, 0.21%)</title><rect x="885.9" y="629" width="2.6" height="15.0" fill="rgb(245,93,2)" rx="2" ry="2" />
<text  x="888.92" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (20 samples, 0.02%)</title><rect x="566.0" y="437" width="0.2" height="15.0" fill="rgb(215,216,9)" rx="2" ry="2" />
<text  x="568.97" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (36 samples, 0.04%)</title><rect x="194.1" y="661" width="0.5" height="15.0" fill="rgb(222,216,16)" rx="2" ry="2" />
<text  x="197.11" y="671.5" ></text>
</g>
<g >
<title>LockAssertion::LockAssertion&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt; (43 samples, 0.05%)</title><rect x="955.0" y="645" width="0.6" height="15.0" fill="rgb(249,144,6)" rx="2" ry="2" />
<text  x="958.03" y="655.5" ></text>
</g>
<g >
<title>__mulvsi3 (13 samples, 0.01%)</title><rect x="824.6" y="533" width="0.2" height="15.0" fill="rgb(209,103,10)" rx="2" ry="2" />
<text  x="827.62" y="543.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="117.0" y="389" width="0.2" height="15.0" fill="rgb(250,58,23)" rx="2" ry="2" />
<text  x="120.03" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (60 samples, 0.07%)</title><rect x="943.4" y="501" width="0.8" height="15.0" fill="rgb(250,64,54)" rx="2" ry="2" />
<text  x="946.36" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::_Tuple_impl&lt;std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (9 samples, 0.01%)</title><rect x="1159.8" y="741" width="0.2" height="15.0" fill="rgb(206,198,11)" rx="2" ry="2" />
<text  x="1162.84" y="751.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (26 samples, 0.03%)</title><rect x="83.9" y="373" width="0.4" height="15.0" fill="rgb(229,22,39)" rx="2" ry="2" />
<text  x="86.92" y="383.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (95 samples, 0.11%)</title><rect x="552.6" y="181" width="1.3" height="15.0" fill="rgb(219,161,21)" rx="2" ry="2" />
<text  x="555.62" y="191.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock (8 samples, 0.01%)</title><rect x="835.5" y="581" width="0.2" height="15.0" fill="rgb(240,28,1)" rx="2" ry="2" />
<text  x="838.55" y="591.5" ></text>
</g>
<g >
<title>__os_malloc (18 samples, 0.02%)</title><rect x="180.5" y="549" width="0.3" height="15.0" fill="rgb(228,19,2)" rx="2" ry="2" />
<text  x="183.51" y="559.5" ></text>
</g>
<g >
<title>__memp_bhwrite (9 samples, 0.01%)</title><rect x="162.0" y="453" width="0.1" height="15.0" fill="rgb(229,13,13)" rx="2" ry="2" />
<text  x="165.00" y="463.5" ></text>
</g>
<g >
<title>CScriptWitness::~CScriptWitness (34 samples, 0.04%)</title><rect x="544.9" y="293" width="0.4" height="15.0" fill="rgb(211,184,29)" rx="2" ry="2" />
<text  x="547.87" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;::__normal_iterator (10 samples, 0.01%)</title><rect x="880.0" y="565" width="0.1" height="15.0" fill="rgb(254,21,35)" rx="2" ry="2" />
<text  x="882.95" y="575.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (44 samples, 0.05%)</title><rect x="545.9" y="165" width="0.6" height="15.0" fill="rgb(232,107,24)" rx="2" ry="2" />
<text  x="548.88" y="175.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned int&gt; (9 samples, 0.01%)</title><rect x="884.0" y="501" width="0.2" height="15.0" fill="rgb(239,50,44)" rx="2" ry="2" />
<text  x="887.04" y="511.5" ></text>
</g>
<g >
<title>_int_free (10 samples, 0.01%)</title><rect x="178.6" y="533" width="0.2" height="15.0" fill="rgb(253,13,23)" rx="2" ry="2" />
<text  x="181.63" y="543.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="245" width="4.2" height="15.0" fill="rgb(233,56,18)" rx="2" ry="2" />
<text  x="1138.80" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;CChainState, std::default_delete&lt;CChainState&gt; &gt;::get (8 samples, 0.01%)</title><rect x="57.4" y="581" width="0.2" height="15.0" fill="rgb(223,226,40)" rx="2" ry="2" />
<text  x="60.45" y="591.5" ></text>
</g>
<g >
<title>CDataStream::read (98 samples, 0.11%)</title><rect x="410.4" y="549" width="1.3" height="15.0" fill="rgb(231,3,19)" rx="2" ry="2" />
<text  x="413.42" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.01%)</title><rect x="677.2" y="485" width="0.1" height="15.0" fill="rgb(224,155,9)" rx="2" ry="2" />
<text  x="680.15" y="495.5" ></text>
</g>
<g >
<title>__memp_fget (73 samples, 0.08%)</title><rect x="167.4" y="485" width="1.0" height="15.0" fill="rgb(236,170,52)" rx="2" ry="2" />
<text  x="170.42" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, unsigned long&gt;, char*, unsigned long&amp;&gt; (20 samples, 0.02%)</title><rect x="861.9" y="325" width="0.3" height="15.0" fill="rgb(228,180,35)" rx="2" ry="2" />
<text  x="864.95" y="335.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (39 samples, 0.04%)</title><rect x="1143.9" y="581" width="0.5" height="15.0" fill="rgb(254,38,22)" rx="2" ry="2" />
<text  x="1146.88" y="591.5" ></text>
</g>
<g >
<title>Arena::free (12 samples, 0.01%)</title><rect x="13.0" y="757" width="0.2" height="15.0" fill="rgb(232,76,15)" rx="2" ry="2" />
<text  x="16.05" y="767.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (142 samples, 0.16%)</title><rect x="100.2" y="485" width="1.9" height="15.0" fill="rgb(244,47,40)" rx="2" ry="2" />
<text  x="103.16" y="495.5" ></text>
</g>
<g >
<title>CConnman::SocketEvents (8 samples, 0.01%)</title><rect x="1183.8" y="725" width="0.1" height="15.0" fill="rgb(244,48,33)" rx="2" ry="2" />
<text  x="1186.80" y="735.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::operator&lt; (9 samples, 0.01%)</title><rect x="1062.1" y="597" width="0.1" height="15.0" fill="rgb(254,201,14)" rx="2" ry="2" />
<text  x="1065.08" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.02%)</title><rect x="343.9" y="533" width="0.2" height="15.0" fill="rgb(208,86,52)" rx="2" ry="2" />
<text  x="346.91" y="543.5" ></text>
</g>
<g >
<title>TLS wrapper function for g_thread_name (9 samples, 0.01%)</title><rect x="734.1" y="581" width="0.1" height="15.0" fill="rgb(251,160,25)" rx="2" ry="2" />
<text  x="737.09" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_bucket_index (34 samples, 0.04%)</title><rect x="910.0" y="597" width="0.4" height="15.0" fill="rgb(223,138,35)" rx="2" ry="2" />
<text  x="912.97" y="607.5" ></text>
</g>
<g >
<title>CSHA256::Write (9 samples, 0.01%)</title><rect x="765.0" y="565" width="0.1" height="15.0" fill="rgb(220,132,25)" rx="2" ry="2" />
<text  x="768.00" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (31 samples, 0.04%)</title><rect x="858.4" y="325" width="0.4" height="15.0" fill="rgb(213,168,34)" rx="2" ry="2" />
<text  x="861.35" y="335.5" ></text>
</g>
<g >
<title>WrapVarInt&lt; (8 samples, 0.01%)</title><rect x="44.6" y="581" width="0.1" height="15.0" fill="rgb(254,133,41)" rx="2" ry="2" />
<text  x="47.63" y="591.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="180.1" y="437" width="0.1" height="15.0" fill="rgb(219,120,37)" rx="2" ry="2" />
<text  x="183.08" y="447.5" ></text>
</g>
<g >
<title>__bam_split (300 samples, 0.34%)</title><rect x="153.0" y="501" width="4.1" height="15.0" fill="rgb(232,21,46)" rx="2" ry="2" />
<text  x="156.05" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (32 samples, 0.04%)</title><rect x="1102.1" y="677" width="0.4" height="15.0" fill="rgb(252,167,54)" rx="2" ry="2" />
<text  x="1105.08" y="687.5" ></text>
</g>
<g >
<title>__memp_fget (207 samples, 0.24%)</title><rect x="84.7" y="421" width="2.8" height="15.0" fill="rgb(249,44,3)" rx="2" ry="2" />
<text  x="87.67" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (15 samples, 0.02%)</title><rect x="75.9" y="421" width="0.2" height="15.0" fill="rgb(214,85,10)" rx="2" ry="2" />
<text  x="78.94" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::construct&lt;unsigned char&gt; (463 samples, 0.53%)</title><rect x="626.9" y="549" width="6.2" height="15.0" fill="rgb(219,0,43)" rx="2" ry="2" />
<text  x="629.90" y="559.5" ></text>
</g>
<g >
<title>__db_lput (23 samples, 0.03%)</title><rect x="73.7" y="501" width="0.4" height="15.0" fill="rgb(224,2,7)" rx="2" ry="2" />
<text  x="76.74" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::~pair (12 samples, 0.01%)</title><rect x="836.3" y="533" width="0.1" height="15.0" fill="rgb(246,126,30)" rx="2" ry="2" />
<text  x="839.25" y="543.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (20 samples, 0.02%)</title><rect x="955.8" y="629" width="0.3" height="15.0" fill="rgb(245,107,28)" rx="2" ry="2" />
<text  x="958.84" y="639.5" ></text>
</g>
<g >
<title>std::make_shared&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="645" width="13.8" height="15.0" fill="rgb(224,49,16)" rx="2" ry="2" />
<text  x="1107.95" y="655.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (169 samples, 0.19%)</title><rect x="530.3" y="149" width="2.3" height="15.0" fill="rgb(249,155,23)" rx="2" ry="2" />
<text  x="533.33" y="159.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (17 samples, 0.02%)</title><rect x="1061.5" y="661" width="0.2" height="15.0" fill="rgb(235,61,27)" rx="2" ry="2" />
<text  x="1064.45" y="671.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (17 samples, 0.02%)</title><rect x="940.6" y="485" width="0.2" height="15.0" fill="rgb(253,22,29)" rx="2" ry="2" />
<text  x="943.56" y="495.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (8 samples, 0.01%)</title><rect x="165.0" y="469" width="0.1" height="15.0" fill="rgb(216,174,16)" rx="2" ry="2" />
<text  x="167.98" y="479.5" ></text>
</g>
<g >
<title>NCONST_PTR&lt;COutPoint&gt; (18 samples, 0.02%)</title><rect x="529.1" y="181" width="0.2" height="15.0" fill="rgb(220,93,34)" rx="2" ry="2" />
<text  x="532.09" y="191.5" ></text>
</g>
<g >
<title>__dbc_destroy (81 samples, 0.09%)</title><rect x="58.4" y="565" width="1.1" height="15.0" fill="rgb(243,88,47)" rx="2" ry="2" />
<text  x="61.45" y="575.5" ></text>
</g>
<g >
<title>__memp_fget (93 samples, 0.11%)</title><rect x="124.4" y="405" width="1.3" height="15.0" fill="rgb(251,224,39)" rx="2" ry="2" />
<text  x="127.44" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_bucket_index (18 samples, 0.02%)</title><rect x="915.9" y="549" width="0.2" height="15.0" fill="rgb(218,53,20)" rx="2" ry="2" />
<text  x="918.88" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::operator++ (12 samples, 0.01%)</title><rect x="539.3" y="293" width="0.1" height="15.0" fill="rgb(209,215,40)" rx="2" ry="2" />
<text  x="542.28" y="303.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="533" width="3.8" height="15.0" fill="rgb(213,31,25)" rx="2" ry="2" />
<text  x="1142.99" y="543.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::const_iterator (8 samples, 0.01%)</title><rect x="725.9" y="613" width="0.1" height="15.0" fill="rgb(235,55,1)" rx="2" ry="2" />
<text  x="728.88" y="623.5" ></text>
</g>
<g >
<title>__dbc_iget (11 samples, 0.01%)</title><rect x="136.9" y="501" width="0.2" height="15.0" fill="rgb(241,40,16)" rx="2" ry="2" />
<text  x="139.95" y="511.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (1,255 samples, 1.43%)</title><rect x="787.5" y="549" width="16.9" height="15.0" fill="rgb(248,114,40)" rx="2" ry="2" />
<text  x="790.48" y="559.5" ></text>
</g>
<g >
<title>operator- (11 samples, 0.01%)</title><rect x="811.6" y="437" width="0.2" height="15.0" fill="rgb(222,129,48)" rx="2" ry="2" />
<text  x="814.63" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::end (9 samples, 0.01%)</title><rect x="1004.7" y="661" width="0.1" height="15.0" fill="rgb(209,2,54)" rx="2" ry="2" />
<text  x="1007.70" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (15 samples, 0.02%)</title><rect x="569.8" y="485" width="0.2" height="15.0" fill="rgb(227,156,18)" rx="2" ry="2" />
<text  x="572.80" y="495.5" ></text>
</g>
<g >
<title>CScript::operator&lt;&lt; (407 samples, 0.46%)</title><rect x="808.7" y="469" width="5.5" height="15.0" fill="rgb(222,10,26)" rx="2" ry="2" />
<text  x="811.73" y="479.5" ></text>
</g>
<g >
<title>__bam_cmp (35 samples, 0.04%)</title><rect x="82.1" y="421" width="0.5" height="15.0" fill="rgb(220,125,36)" rx="2" ry="2" />
<text  x="85.14" y="431.5" ></text>
</g>
<g >
<title>__db_verify_internal (39 samples, 0.04%)</title><rect x="1143.9" y="645" width="0.5" height="15.0" fill="rgb(249,164,5)" rx="2" ry="2" />
<text  x="1146.88" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_do_relocate (22 samples, 0.03%)</title><rect x="1101.2" y="645" width="0.3" height="15.0" fill="rgb(230,62,49)" rx="2" ry="2" />
<text  x="1104.21" y="655.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (12 samples, 0.01%)</title><rect x="531.9" y="85" width="0.1" height="15.0" fill="rgb(216,46,2)" rx="2" ry="2" />
<text  x="534.86" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (43 samples, 0.05%)</title><rect x="860.4" y="309" width="0.6" height="15.0" fill="rgb(247,17,45)" rx="2" ry="2" />
<text  x="863.37" y="319.5" ></text>
</g>
<g >
<title>ShiftMessageC (10 samples, 0.01%)</title><rect x="182.8" y="133" width="0.2" height="15.0" fill="rgb(239,136,17)" rx="2" ry="2" />
<text  x="185.83" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::equal_range (370 samples, 0.42%)</title><rect x="909.6" y="613" width="5.0" height="15.0" fill="rgb(217,229,35)" rx="2" ry="2" />
<text  x="912.57" y="623.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (19 samples, 0.02%)</title><rect x="79.3" y="453" width="0.2" height="15.0" fill="rgb(206,72,18)" rx="2" ry="2" />
<text  x="82.27" y="463.5" ></text>
</g>
<g >
<title>CTxIn::CTxIn (42 samples, 0.05%)</title><rect x="1025.1" y="549" width="0.6" height="15.0" fill="rgb(207,114,1)" rx="2" ry="2" />
<text  x="1028.12" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (16 samples, 0.02%)</title><rect x="454.0" y="469" width="0.2" height="15.0" fill="rgb(240,99,18)" rx="2" ry="2" />
<text  x="457.00" y="479.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char const*&gt; (15 samples, 0.02%)</title><rect x="199.0" y="629" width="0.2" height="15.0" fill="rgb(206,191,2)" rx="2" ry="2" />
<text  x="202.03" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (9 samples, 0.01%)</title><rect x="922.6" y="501" width="0.1" height="15.0" fill="rgb(217,98,21)" rx="2" ry="2" />
<text  x="925.59" y="511.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void*&amp;, CLockLocation const&amp;&gt; (102 samples, 0.12%)</title><rect x="873.5" y="581" width="1.4" height="15.0" fill="rgb(254,186,1)" rx="2" ry="2" />
<text  x="876.53" y="591.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;void*, void*&gt; (8 samples, 0.01%)</title><rect x="834.8" y="517" width="0.1" height="15.0" fill="rgb(232,112,52)" rx="2" ry="2" />
<text  x="837.77" y="527.5" ></text>
</g>
<g >
<title>BerkeleyBatch::SafeDbt::operator Dbt* (27 samples, 0.03%)</title><rect x="190.0" y="677" width="0.4" height="15.0" fill="rgb(207,141,45)" rx="2" ry="2" />
<text  x="193.03" y="687.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.01%)</title><rect x="496.7" y="309" width="0.1" height="15.0" fill="rgb(219,100,28)" rx="2" ry="2" />
<text  x="499.73" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (20 samples, 0.02%)</title><rect x="587.0" y="581" width="0.3" height="15.0" fill="rgb(219,27,39)" rx="2" ry="2" />
<text  x="590.05" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (29 samples, 0.03%)</title><rect x="1002.2" y="517" width="0.4" height="15.0" fill="rgb(223,40,24)" rx="2" ry="2" />
<text  x="1005.20" y="527.5" ></text>
</g>
<g >
<title>__db_put (53 samples, 0.06%)</title><rect x="163.6" y="549" width="0.7" height="15.0" fill="rgb(226,6,21)" rx="2" ry="2" />
<text  x="166.56" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (26 samples, 0.03%)</title><rect x="680.4" y="485" width="0.3" height="15.0" fill="rgb(205,153,43)" rx="2" ry="2" />
<text  x="683.40" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::end (40 samples, 0.05%)</title><rect x="195.6" y="661" width="0.5" height="15.0" fill="rgb(212,110,28)" rx="2" ry="2" />
<text  x="198.58" y="671.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;interfaces::Chain::Lock&gt;&gt; (11 samples, 0.01%)</title><rect x="986.6" y="597" width="0.2" height="15.0" fill="rgb(242,148,36)" rx="2" ry="2" />
<text  x="989.62" y="607.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (27 samples, 0.03%)</title><rect x="141.2" y="437" width="0.4" height="15.0" fill="rgb(208,66,1)" rx="2" ry="2" />
<text  x="144.19" y="447.5" ></text>
</g>
<g >
<title>CSHA256::Write (12 samples, 0.01%)</title><rect x="554.3" y="149" width="0.2" height="15.0" fill="rgb(221,136,1)" rx="2" ry="2" />
<text  x="557.30" y="159.5" ></text>
</g>
<g >
<title>CLockLocation::CLockLocation (69 samples, 0.08%)</title><rect x="828.4" y="581" width="0.9" height="15.0" fill="rgb(218,34,14)" rx="2" ry="2" />
<text  x="831.35" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_node (126 samples, 0.14%)</title><rect x="460.1" y="565" width="1.6" height="15.0" fill="rgb(227,92,28)" rx="2" ry="2" />
<text  x="463.05" y="575.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CKeyID&amp;&gt; (10 samples, 0.01%)</title><rect x="395.3" y="581" width="0.1" height="15.0" fill="rgb(224,56,51)" rx="2" ry="2" />
<text  x="398.26" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (11 samples, 0.01%)</title><rect x="485.3" y="309" width="0.1" height="15.0" fill="rgb(220,66,20)" rx="2" ry="2" />
<text  x="488.26" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_check_len (19 samples, 0.02%)</title><rect x="866.8" y="469" width="0.3" height="15.0" fill="rgb(239,172,24)" rx="2" ry="2" />
<text  x="869.83" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::max_size (17 samples, 0.02%)</title><rect x="493.0" y="309" width="0.2" height="15.0" fill="rgb(230,214,36)" rx="2" ry="2" />
<text  x="495.99" y="319.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="501" width="4.2" height="15.0" fill="rgb(222,171,27)" rx="2" ry="2" />
<text  x="1138.80" y="511.5" ></text>
</g>
<g >
<title>CWallet::LoadKeyMetadata (824 samples, 0.94%)</title><rect x="882.3" y="677" width="11.1" height="15.0" fill="rgb(243,107,7)" rx="2" ry="2" />
<text  x="885.31" y="687.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTxOut&amp;&gt; (226 samples, 0.26%)</title><rect x="486.2" y="357" width="3.1" height="15.0" fill="rgb(212,188,38)" rx="2" ry="2" />
<text  x="489.22" y="367.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (165 samples, 0.19%)</title><rect x="581.7" y="613" width="2.2" height="15.0" fill="rgb(211,153,36)" rx="2" ry="2" />
<text  x="584.66" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::operator[] (9 samples, 0.01%)</title><rect x="607.9" y="597" width="0.1" height="15.0" fill="rgb(212,42,18)" rx="2" ry="2" />
<text  x="610.86" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (29 samples, 0.03%)</title><rect x="589.9" y="533" width="0.4" height="15.0" fill="rgb(243,48,43)" rx="2" ry="2" />
<text  x="592.93" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;COutPoint, uint256&gt; &gt; (236 samples, 0.27%)</title><rect x="926.8" y="565" width="3.2" height="15.0" fill="rgb(231,168,53)" rx="2" ry="2" />
<text  x="929.84" y="575.5" ></text>
</g>
<g >
<title>COutPoint::COutPoint (14 samples, 0.02%)</title><rect x="1025.2" y="533" width="0.2" height="15.0" fill="rgb(252,78,8)" rx="2" ry="2" />
<text  x="1028.20" y="543.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (198 samples, 0.23%)</title><rect x="705.6" y="629" width="2.6" height="15.0" fill="rgb(213,39,4)" rx="2" ry="2" />
<text  x="708.56" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_valptr (42 samples, 0.05%)</title><rect x="964.9" y="597" width="0.6" height="15.0" fill="rgb(252,173,3)" rx="2" ry="2" />
<text  x="967.89" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (55 samples, 0.06%)</title><rect x="1085.2" y="501" width="0.8" height="15.0" fill="rgb(253,102,38)" rx="2" ry="2" />
<text  x="1088.24" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (37 samples, 0.04%)</title><rect x="1097.6" y="597" width="0.5" height="15.0" fill="rgb(254,6,37)" rx="2" ry="2" />
<text  x="1100.65" y="607.5" ></text>
</g>
<g >
<title>CWalletTx::GetHash (16 samples, 0.02%)</title><rect x="950.4" y="661" width="0.2" height="15.0" fill="rgb(251,109,11)" rx="2" ry="2" />
<text  x="953.43" y="671.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="89.5" y="437" width="0.2" height="15.0" fill="rgb(213,77,19)" rx="2" ry="2" />
<text  x="92.55" y="447.5" ></text>
</g>
<g >
<title>__db_vrfy_common (1,471 samples, 1.68%)</title><rect x="137.5" y="581" width="19.8" height="15.0" fill="rgb(230,34,54)" rx="2" ry="2" />
<text  x="140.48" y="591.5" ></text>
</g>
<g >
<title>CWalletTx::MarkDirty (50 samples, 0.06%)</title><rect x="949.8" y="645" width="0.6" height="15.0" fill="rgb(247,203,29)" rx="2" ry="2" />
<text  x="952.76" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,586 samples, 8.66%)</title><rect x="464.8" y="533" width="102.2" height="15.0" fill="rgb(210,22,12)" rx="2" ry="2" />
<text  x="467.78" y="543.5" >std::__share..</text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::operator++ (11 samples, 0.01%)</title><rect x="1052.1" y="613" width="0.1" height="15.0" fill="rgb(232,115,45)" rx="2" ry="2" />
<text  x="1055.07" y="623.5" ></text>
</g>
<g >
<title>Hash&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (606 samples, 0.69%)</title><rect x="1127.6" y="725" width="8.1" height="15.0" fill="rgb(242,113,18)" rx="2" ry="2" />
<text  x="1130.58" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (28 samples, 0.03%)</title><rect x="518.5" y="421" width="0.3" height="15.0" fill="rgb(244,74,9)" rx="2" ry="2" />
<text  x="521.47" y="431.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::GetUint64 (28 samples, 0.03%)</title><rect x="994.8" y="565" width="0.4" height="15.0" fill="rgb(209,176,42)" rx="2" ry="2" />
<text  x="997.82" y="575.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CBlockHeader&gt; (42 samples, 0.05%)</title><rect x="46.7" y="597" width="0.5" height="15.0" fill="rgb(206,52,19)" rx="2" ry="2" />
<text  x="49.68" y="607.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (14 samples, 0.02%)</title><rect x="587.5" y="565" width="0.2" height="15.0" fill="rgb(254,208,23)" rx="2" ry="2" />
<text  x="590.51" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (20 samples, 0.02%)</title><rect x="73.8" y="469" width="0.3" height="15.0" fill="rgb(251,185,33)" rx="2" ry="2" />
<text  x="76.78" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (244 samples, 0.28%)</title><rect x="399.1" y="517" width="3.3" height="15.0" fill="rgb(209,7,31)" rx="2" ry="2" />
<text  x="402.11" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_ptr (29 samples, 0.03%)</title><rect x="969.5" y="565" width="0.4" height="15.0" fill="rgb(253,3,7)" rx="2" ry="2" />
<text  x="972.49" y="575.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char&gt; (8 samples, 0.01%)</title><rect x="1097.9" y="533" width="0.1" height="15.0" fill="rgb(216,44,17)" rx="2" ry="2" />
<text  x="1100.86" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_Vector_impl::~_Vector_impl (9 samples, 0.01%)</title><rect x="684.3" y="629" width="0.2" height="15.0" fill="rgb(234,159,13)" rx="2" ry="2" />
<text  x="687.33" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (16 samples, 0.02%)</title><rect x="875.1" y="549" width="0.2" height="15.0" fill="rgb(210,188,43)" rx="2" ry="2" />
<text  x="878.08" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (242 samples, 0.28%)</title><rect x="165.4" y="533" width="3.3" height="15.0" fill="rgb(227,99,14)" rx="2" ry="2" />
<text  x="168.41" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (11 samples, 0.01%)</title><rect x="877.8" y="533" width="0.2" height="15.0" fill="rgb(253,223,27)" rx="2" ry="2" />
<text  x="880.82" y="543.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer&gt; (32 samples, 0.04%)</title><rect x="1035.4" y="453" width="0.4" height="15.0" fill="rgb(219,97,25)" rx="2" ry="2" />
<text  x="1038.40" y="463.5" ></text>
</g>
<g >
<title>ReadKeyValue (52,841 samples, 60.35%)</title><rect x="391.6" y="693" width="712.1" height="15.0" fill="rgb(219,170,53)" rx="2" ry="2" />
<text  x="394.60" y="703.5" >ReadKeyValue</text>
</g>
<g >
<title>std::allocator&lt;CTxOut&gt;::allocator (10 samples, 0.01%)</title><rect x="1168.7" y="757" width="0.1" height="15.0" fill="rgb(234,3,34)" rx="2" ry="2" />
<text  x="1171.69" y="767.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CWalletTx&amp;&gt; (1,030 samples, 1.18%)</title><rect x="1105.0" y="709" width="13.8" height="15.0" fill="rgb(208,37,19)" rx="2" ry="2" />
<text  x="1107.95" y="719.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.01%)</title><rect x="500.4" y="213" width="0.1" height="15.0" fill="rgb(209,0,44)" rx="2" ry="2" />
<text  x="503.36" y="223.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CTxOut&gt; (203 samples, 0.23%)</title><rect x="1033.2" y="533" width="2.8" height="15.0" fill="rgb(212,102,31)" rx="2" ry="2" />
<text  x="1036.23" y="543.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (8 samples, 0.01%)</title><rect x="482.0" y="213" width="0.1" height="15.0" fill="rgb(215,4,19)" rx="2" ry="2" />
<text  x="484.98" y="223.5" ></text>
</g>
<g >
<title>__dbc_iget (205 samples, 0.23%)</title><rect x="70.5" y="533" width="2.8" height="15.0" fill="rgb(249,154,18)" rx="2" ry="2" />
<text  x="73.51" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (41 samples, 0.05%)</title><rect x="508.6" y="293" width="0.5" height="15.0" fill="rgb(217,215,32)" rx="2" ry="2" />
<text  x="511.59" y="303.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="101.6" y="357" width="0.2" height="15.0" fill="rgb(213,75,51)" rx="2" ry="2" />
<text  x="104.64" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (11 samples, 0.01%)</title><rect x="1183.1" y="757" width="0.2" height="15.0" fill="rgb(205,74,53)" rx="2" ry="2" />
<text  x="1186.14" y="767.5" ></text>
</g>
<g >
<title>__bam_search (8 samples, 0.01%)</title><rect x="120.9" y="421" width="0.2" height="15.0" fill="rgb(223,200,5)" rx="2" ry="2" />
<text  x="123.95" y="431.5" ></text>
</g>
<g >
<title>QuadRound (96 samples, 0.11%)</title><rect x="1125.9" y="565" width="1.2" height="15.0" fill="rgb(210,190,6)" rx="2" ry="2" />
<text  x="1128.85" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (31 samples, 0.04%)</title><rect x="880.4" y="533" width="0.4" height="15.0" fill="rgb(220,5,42)" rx="2" ry="2" />
<text  x="883.39" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;::_Node_iterator (8 samples, 0.01%)</title><rect x="675.9" y="517" width="0.1" height="15.0" fill="rgb(232,41,36)" rx="2" ry="2" />
<text  x="678.92" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (32 samples, 0.04%)</title><rect x="1020.2" y="645" width="0.4" height="15.0" fill="rgb(236,176,0)" rx="2" ry="2" />
<text  x="1023.19" y="655.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::~variant (63 samples, 0.07%)</title><rect x="817.8" y="613" width="0.9" height="15.0" fill="rgb(206,20,5)" rx="2" ry="2" />
<text  x="820.82" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size (11 samples, 0.01%)</title><rect x="633.2" y="565" width="0.2" height="15.0" fill="rgb(219,29,34)" rx="2" ry="2" />
<text  x="636.23" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (8 samples, 0.01%)</title><rect x="1165.4" y="757" width="0.1" height="15.0" fill="rgb(215,94,17)" rx="2" ry="2" />
<text  x="1168.35" y="767.5" ></text>
</g>
<g >
<title>__memp_fget (8 samples, 0.01%)</title><rect x="81.1" y="437" width="0.1" height="15.0" fill="rgb(235,223,27)" rx="2" ry="2" />
<text  x="84.07" y="447.5" ></text>
</g>
<g >
<title>CTxOut::SetNull (18 samples, 0.02%)</title><rect x="535.0" y="293" width="0.2" height="15.0" fill="rgb(248,182,35)" rx="2" ry="2" />
<text  x="537.96" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_S_max_size (182 samples, 0.21%)</title><rect x="321.4" y="581" width="2.5" height="15.0" fill="rgb(240,13,15)" rx="2" ry="2" />
<text  x="324.43" y="591.5" ></text>
</g>
<g >
<title>__dbc_iput (291 samples, 0.33%)</title><rect x="117.4" y="469" width="4.0" height="15.0" fill="rgb(253,224,44)" rx="2" ry="2" />
<text  x="120.45" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (92 samples, 0.11%)</title><rect x="832.1" y="517" width="1.3" height="15.0" fill="rgb(252,166,1)" rx="2" ry="2" />
<text  x="835.14" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, void&gt; (278 samples, 0.32%)</title><rect x="1092.3" y="677" width="3.8" height="15.0" fill="rgb(208,31,10)" rx="2" ry="2" />
<text  x="1095.34" y="687.5" ></text>
</g>
<g >
<title>WriteBE32 (18 samples, 0.02%)</title><rect x="703.7" y="613" width="0.2" height="15.0" fill="rgb(225,69,34)" rx="2" ry="2" />
<text  x="706.66" y="623.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (104 samples, 0.12%)</title><rect x="547.8" y="149" width="1.4" height="15.0" fill="rgb(215,226,29)" rx="2" ry="2" />
<text  x="550.75" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (10 samples, 0.01%)</title><rect x="563.0" y="341" width="0.2" height="15.0" fill="rgb(253,215,42)" rx="2" ry="2" />
<text  x="566.05" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (11 samples, 0.01%)</title><rect x="1002.9" y="517" width="0.1" height="15.0" fill="rgb(251,140,26)" rx="2" ry="2" />
<text  x="1005.87" y="527.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="485" width="4.2" height="15.0" fill="rgb(254,144,13)" rx="2" ry="2" />
<text  x="1138.80" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (41 samples, 0.05%)</title><rect x="455.8" y="485" width="0.5" height="15.0" fill="rgb(243,187,42)" rx="2" ry="2" />
<text  x="458.76" y="495.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, 28u, unsigned char&gt; (141 samples, 0.16%)</title><rect x="410.3" y="565" width="1.9" height="15.0" fill="rgb(215,192,33)" rx="2" ry="2" />
<text  x="413.28" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_destroy_node (13 samples, 0.01%)</title><rect x="612.4" y="453" width="0.2" height="15.0" fill="rgb(249,190,36)" rx="2" ry="2" />
<text  x="615.41" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_M_ptr (17 samples, 0.02%)</title><rect x="927.6" y="533" width="0.3" height="15.0" fill="rgb(234,29,33)" rx="2" ry="2" />
<text  x="930.65" y="543.5" ></text>
</g>
<g >
<title>ser_writedata32&lt;CHashWriter&gt; (24 samples, 0.03%)</title><rect x="549.3" y="197" width="0.3" height="15.0" fill="rgb(209,17,14)" rx="2" ry="2" />
<text  x="552.30" y="207.5" ></text>
</g>
<g >
<title>DecodeBase58Check (184 samples, 0.21%)</title><rect x="1050.4" y="661" width="2.5" height="15.0" fill="rgb(226,107,44)" rx="2" ry="2" />
<text  x="1053.41" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;true&gt;::__destroy&lt;uint256*&gt; (13 samples, 0.01%)</title><rect x="604.5" y="581" width="0.2" height="15.0" fill="rgb(237,20,34)" rx="2" ry="2" />
<text  x="607.49" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (44 samples, 0.05%)</title><rect x="411.1" y="485" width="0.6" height="15.0" fill="rgb(206,185,37)" rx="2" ry="2" />
<text  x="414.10" y="495.5" ></text>
</g>
<g >
<title>CTxOut::Unserialize&lt;CDataStream&gt; (214 samples, 0.24%)</title><rect x="486.4" y="341" width="2.9" height="15.0" fill="rgb(245,153,38)" rx="2" ry="2" />
<text  x="489.38" y="351.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, char, uint256&gt; (28 samples, 0.03%)</title><rect x="39.3" y="629" width="0.4" height="15.0" fill="rgb(242,191,37)" rx="2" ry="2" />
<text  x="42.34" y="639.5" ></text>
</g>
<g >
<title>__db_lget (14 samples, 0.02%)</title><rect x="155.2" y="469" width="0.2" height="15.0" fill="rgb(243,91,32)" rx="2" ry="2" />
<text  x="158.21" y="479.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;void*, void*&gt; (53 samples, 0.06%)</title><rect x="878.1" y="517" width="0.7" height="15.0" fill="rgb(214,97,35)" rx="2" ry="2" />
<text  x="881.13" y="527.5" ></text>
</g>
<g >
<title>CSHA256::Write (10 samples, 0.01%)</title><rect x="536.9" y="37" width="0.2" height="15.0" fill="rgb(237,11,8)" rx="2" ry="2" />
<text  x="539.95" y="47.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, unsigned int&gt; (36 samples, 0.04%)</title><rect x="1028.7" y="405" width="0.5" height="15.0" fill="rgb(237,129,7)" rx="2" ry="2" />
<text  x="1031.68" y="415.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (8 samples, 0.01%)</title><rect x="148.2" y="453" width="0.1" height="15.0" fill="rgb(217,145,7)" rx="2" ry="2" />
<text  x="151.24" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="1051.2" y="581" width="0.3" height="15.0" fill="rgb(247,178,6)" rx="2" ry="2" />
<text  x="1054.25" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;CScriptID const&amp;&gt;::tuple (36 samples, 0.04%)</title><rect x="827.4" y="533" width="0.5" height="15.0" fill="rgb(245,162,24)" rx="2" ry="2" />
<text  x="830.38" y="543.5" ></text>
</g>
<g >
<title>FillableSigningProvider::AddCScript (98 samples, 0.11%)</title><rect x="1120.5" y="709" width="1.3" height="15.0" fill="rgb(228,166,33)" rx="2" ry="2" />
<text  x="1123.50" y="719.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (18 samples, 0.02%)</title><rect x="874.6" y="517" width="0.2" height="15.0" fill="rgb(205,118,26)" rx="2" ry="2" />
<text  x="877.58" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::operator[] (9 samples, 0.01%)</title><rect x="447.8" y="517" width="0.2" height="15.0" fill="rgb(239,14,21)" rx="2" ry="2" />
<text  x="450.84" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (18 samples, 0.02%)</title><rect x="561.4" y="293" width="0.3" height="15.0" fill="rgb(228,94,13)" rx="2" ry="2" />
<text  x="564.42" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (703 samples, 0.80%)</title><rect x="818.8" y="597" width="9.5" height="15.0" fill="rgb(244,25,29)" rx="2" ry="2" />
<text  x="821.79" y="607.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::operator&gt;&gt;= (27 samples, 0.03%)</title><rect x="50.7" y="629" width="0.4" height="15.0" fill="rgb(208,42,3)" rx="2" ry="2" />
<text  x="53.72" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, unsigned long, true&gt;::_S_equals (38 samples, 0.04%)</title><rect x="933.1" y="565" width="0.5" height="15.0" fill="rgb(243,44,8)" rx="2" ry="2" />
<text  x="936.06" y="575.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (18 samples, 0.02%)</title><rect x="664.4" y="565" width="0.3" height="15.0" fill="rgb(211,168,50)" rx="2" ry="2" />
<text  x="667.44" y="575.5" ></text>
</g>
<g >
<title>CHashWriter::CHashWriter (47 samples, 0.05%)</title><rect x="519.7" y="405" width="0.6" height="15.0" fill="rgb(235,157,2)" rx="2" ry="2" />
<text  x="522.66" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="1147.7" y="757" width="0.1" height="15.0" fill="rgb(228,27,38)" rx="2" ry="2" />
<text  x="1150.73" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (193 samples, 0.22%)</title><rect x="831.7" y="533" width="2.6" height="15.0" fill="rgb(252,89,7)" rx="2" ry="2" />
<text  x="834.70" y="543.5" ></text>
</g>
<g >
<title>DecodeBase58Check (184 samples, 0.21%)</title><rect x="1050.4" y="645" width="2.5" height="15.0" fill="rgb(215,120,38)" rx="2" ry="2" />
<text  x="1053.41" y="655.5" ></text>
</g>
<g >
<title>CSipHasher::Write (81 samples, 0.09%)</title><rect x="823.7" y="549" width="1.1" height="15.0" fill="rgb(239,37,44)" rx="2" ry="2" />
<text  x="826.70" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (19 samples, 0.02%)</title><rect x="855.5" y="309" width="0.3" height="15.0" fill="rgb(223,174,6)" rx="2" ry="2" />
<text  x="858.52" y="319.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, long&gt; (43 samples, 0.05%)</title><rect x="554.0" y="245" width="0.6" height="15.0" fill="rgb(248,84,32)" rx="2" ry="2" />
<text  x="557.01" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_right (10 samples, 0.01%)</title><rect x="583.4" y="549" width="0.2" height="15.0" fill="rgb(214,107,7)" rx="2" ry="2" />
<text  x="586.44" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;deserialize_type const&amp;&gt; (11 samples, 0.01%)</title><rect x="567.4" y="581" width="0.2" height="15.0" fill="rgb(227,169,33)" rx="2" ry="2" />
<text  x="570.41" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_get_node (11 samples, 0.01%)</title><rect x="674.7" y="501" width="0.1" height="15.0" fill="rgb(238,141,17)" rx="2" ry="2" />
<text  x="677.66" y="511.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.03%)</title><rect x="179.0" y="437" width="0.4" height="15.0" fill="rgb(212,63,10)" rx="2" ry="2" />
<text  x="182.05" y="447.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (164 samples, 0.19%)</title><rect x="180.9" y="261" width="2.2" height="15.0" fill="rgb(250,222,26)" rx="2" ry="2" />
<text  x="183.93" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (1,039 samples, 1.19%)</title><rect x="636.9" y="581" width="14.0" height="15.0" fill="rgb(252,5,28)" rx="2" ry="2" />
<text  x="639.91" y="591.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="179.3" y="389" width="0.1" height="15.0" fill="rgb(241,152,32)" rx="2" ry="2" />
<text  x="182.30" y="399.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (24 samples, 0.03%)</title><rect x="70.0" y="517" width="0.3" height="15.0" fill="rgb(237,22,18)" rx="2" ry="2" />
<text  x="73.02" y="527.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (11 samples, 0.01%)</title><rect x="1061.2" y="661" width="0.2" height="15.0" fill="rgb(230,187,50)" rx="2" ry="2" />
<text  x="1064.24" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_deleter (31 samples, 0.04%)</title><rect x="948.7" y="597" width="0.5" height="15.0" fill="rgb(219,208,46)" rx="2" ry="2" />
<text  x="951.75" y="607.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (10 samples, 0.01%)</title><rect x="59.2" y="517" width="0.1" height="15.0" fill="rgb(209,155,16)" rx="2" ry="2" />
<text  x="62.21" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::begin (17 samples, 0.02%)</title><rect x="560.7" y="293" width="0.2" height="15.0" fill="rgb(253,220,8)" rx="2" ry="2" />
<text  x="563.66" y="303.5" ></text>
</g>
<g >
<title>ShiftMessageC (12 samples, 0.01%)</title><rect x="1113.1" y="357" width="0.2" height="15.0" fill="rgb(210,127,47)" rx="2" ry="2" />
<text  x="1116.09" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_ptr (12 samples, 0.01%)</title><rect x="834.4" y="485" width="0.1" height="15.0" fill="rgb(232,111,54)" rx="2" ry="2" />
<text  x="837.38" y="495.5" ></text>
</g>
<g >
<title>__memp_pgread (35 samples, 0.04%)</title><rect x="179.8" y="565" width="0.4" height="15.0" fill="rgb(213,101,45)" rx="2" ry="2" />
<text  x="182.76" y="575.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void*&amp;, CLockLocation const&amp;&gt; (114 samples, 0.13%)</title><rect x="940.9" y="533" width="1.6" height="15.0" fill="rgb(230,109,37)" rx="2" ry="2" />
<text  x="943.93" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (77 samples, 0.09%)</title><rect x="999.1" y="517" width="1.1" height="15.0" fill="rgb(251,3,15)" rx="2" ry="2" />
<text  x="1002.12" y="527.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (17 samples, 0.02%)</title><rect x="945.1" y="517" width="0.2" height="15.0" fill="rgb(209,146,20)" rx="2" ry="2" />
<text  x="948.08" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_get_insert_unique_pos (96 samples, 0.11%)</title><rect x="51.1" y="645" width="1.3" height="15.0" fill="rgb(235,21,50)" rx="2" ry="2" />
<text  x="54.12" y="655.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;char*&gt;::move_iterator (10 samples, 0.01%)</title><rect x="1166.3" y="741" width="0.2" height="15.0" fill="rgb(246,12,37)" rx="2" ry="2" />
<text  x="1169.35" y="751.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, char&gt; (244 samples, 0.28%)</title><rect x="445.7" y="581" width="3.3" height="15.0" fill="rgb(250,18,52)" rx="2" ry="2" />
<text  x="448.72" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;long const, CWalletTx*&gt;, std::pair&lt;long, CWalletTx*&gt; &gt; (45 samples, 0.05%)</title><rect x="965.5" y="597" width="0.6" height="15.0" fill="rgb(253,96,7)" rx="2" ry="2" />
<text  x="968.46" y="607.5" ></text>
</g>
<g >
<title>__bam_cmp (44 samples, 0.05%)</title><rect x="91.3" y="405" width="0.6" height="15.0" fill="rgb(209,32,33)" rx="2" ry="2" />
<text  x="94.33" y="415.5" ></text>
</g>
<g >
<title>CDataStream::read (21 samples, 0.02%)</title><rect x="575.0" y="581" width="0.3" height="15.0" fill="rgb(212,142,41)" rx="2" ry="2" />
<text  x="578.03" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (30 samples, 0.03%)</title><rect x="580.4" y="565" width="0.4" height="15.0" fill="rgb(248,197,23)" rx="2" ry="2" />
<text  x="583.39" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (18 samples, 0.02%)</title><rect x="822.0" y="565" width="0.2" height="15.0" fill="rgb(243,213,45)" rx="2" ry="2" />
<text  x="824.99" y="575.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;bool&amp;&gt; (2,293 samples, 2.62%)</title><rect x="413.6" y="629" width="30.9" height="15.0" fill="rgb(251,147,1)" rx="2" ry="2" />
<text  x="416.60" y="639.5" >CD..</text>
</g>
<g >
<title>__os_id (23 samples, 0.03%)</title><rect x="351.0" y="565" width="0.3" height="15.0" fill="rgb(248,1,30)" rx="2" ry="2" />
<text  x="354.01" y="575.5" ></text>
</g>
<g >
<title>CHash256::Write (17 samples, 0.02%)</title><rect x="546.2" y="85" width="0.2" height="15.0" fill="rgb(220,30,47)" rx="2" ry="2" />
<text  x="549.18" y="95.5" ></text>
</g>
<g >
<title>uint160::uint160 (8 samples, 0.01%)</title><rect x="805.7" y="581" width="0.1" height="15.0" fill="rgb(229,49,48)" rx="2" ry="2" />
<text  x="808.74" y="591.5" ></text>
</g>
<g >
<title>CHash256::Finalize (315 samples, 0.36%)</title><rect x="1105.0" y="437" width="4.2" height="15.0" fill="rgb(212,65,1)" rx="2" ry="2" />
<text  x="1107.95" y="447.5" ></text>
</g>
<g >
<title>memory_cleanse (42 samples, 0.05%)</title><rect x="192.5" y="661" width="0.6" height="15.0" fill="rgb(208,71,41)" rx="2" ry="2" />
<text  x="195.51" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (29 samples, 0.03%)</title><rect x="682.9" y="485" width="0.3" height="15.0" fill="rgb(213,16,42)" rx="2" ry="2" />
<text  x="685.85" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;CKeyID const, CKey&gt;::pair&lt;CKeyID&amp;&amp;&gt; (1,698 samples, 1.94%)</title><rect x="845.5" y="549" width="22.9" height="15.0" fill="rgb(217,159,5)" rx="2" ry="2" />
<text  x="848.47" y="559.5" >s..</text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; (733 samples, 0.84%)</title><rect x="484.4" y="405" width="9.9" height="15.0" fill="rgb(216,142,35)" rx="2" ry="2" />
<text  x="487.44" y="415.5" ></text>
</g>
<g >
<title>CHash256::Write (10 samples, 0.01%)</title><rect x="553.4" y="53" width="0.1" height="15.0" fill="rgb(216,227,21)" rx="2" ry="2" />
<text  x="556.36" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::empty (19 samples, 0.02%)</title><rect x="540.9" y="389" width="0.2" height="15.0" fill="rgb(235,135,40)" rx="2" ry="2" />
<text  x="543.87" y="399.5" ></text>
</g>
<g >
<title>TLS wrapper function for g_thread_name (13 samples, 0.01%)</title><rect x="881.1" y="581" width="0.1" height="15.0" fill="rgb(206,40,0)" rx="2" ry="2" />
<text  x="884.06" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (9 samples, 0.01%)</title><rect x="494.2" y="341" width="0.1" height="15.0" fill="rgb(224,10,42)" rx="2" ry="2" />
<text  x="497.20" y="351.5" ></text>
</g>
<g >
<title>__env_attach_regions (28 samples, 0.03%)</title><rect x="180.4" y="597" width="0.4" height="15.0" fill="rgb(219,117,20)" rx="2" ry="2" />
<text  x="183.41" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;CKeyID const, CKeyMetadata&gt;::pair&lt;CKeyID const&amp;&gt; (67 samples, 0.08%)</title><rect x="891.9" y="581" width="0.9" height="15.0" fill="rgb(254,119,8)" rx="2" ry="2" />
<text  x="894.88" y="591.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.08%)</title><rect x="202.6" y="565" width="1.0" height="15.0" fill="rgb(206,143,8)" rx="2" ry="2" />
<text  x="205.59" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (328 samples, 0.37%)</title><rect x="1056.2" y="597" width="4.4" height="15.0" fill="rgb(229,31,16)" rx="2" ry="2" />
<text  x="1059.17" y="607.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::UniqueLock (554 samples, 0.63%)</title><rect x="828.3" y="629" width="7.4" height="15.0" fill="rgb(241,111,46)" rx="2" ry="2" />
<text  x="831.26" y="639.5" ></text>
</g>
<g >
<title>CScript::Unserialize&lt;CDataStream&gt; (9 samples, 0.01%)</title><rect x="26.3" y="741" width="0.1" height="15.0" fill="rgb(245,3,14)" rx="2" ry="2" />
<text  x="29.29" y="751.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (31 samples, 0.04%)</title><rect x="532.9" y="213" width="0.4" height="15.0" fill="rgb(246,71,35)" rx="2" ry="2" />
<text  x="535.93" y="223.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::apply_visitor&lt;(anonymous namespace)::CScriptVisitor const&gt; (765 samples, 0.87%)</title><rect x="806.9" y="581" width="10.3" height="15.0" fill="rgb(238,136,25)" rx="2" ry="2" />
<text  x="809.91" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_max_size (54 samples, 0.06%)</title><rect x="505.9" y="277" width="0.7" height="15.0" fill="rgb(216,45,48)" rx="2" ry="2" />
<text  x="508.88" y="287.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="169.4" y="533" width="0.2" height="15.0" fill="rgb(219,215,33)" rx="2" ry="2" />
<text  x="172.45" y="543.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (44 samples, 0.05%)</title><rect x="135.6" y="453" width="0.6" height="15.0" fill="rgb(232,145,4)" rx="2" ry="2" />
<text  x="138.60" y="463.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (34 samples, 0.04%)</title><rect x="89.8" y="453" width="0.5" height="15.0" fill="rgb(218,140,2)" rx="2" ry="2" />
<text  x="92.79" y="463.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (11 samples, 0.01%)</title><rect x="168.0" y="469" width="0.1" height="15.0" fill="rgb(223,7,9)" rx="2" ry="2" />
<text  x="170.99" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (18 samples, 0.02%)</title><rect x="729.6" y="549" width="0.3" height="15.0" fill="rgb(211,100,37)" rx="2" ry="2" />
<text  x="732.63" y="559.5" ></text>
</g>
<g >
<title>__bam_vrfy (1,363 samples, 1.56%)</title><rect x="59.6" y="581" width="18.4" height="15.0" fill="rgb(250,122,4)" rx="2" ry="2" />
<text  x="62.65" y="591.5" ></text>
</g>
<g >
<title>__lock_put (19 samples, 0.02%)</title><rect x="164.8" y="501" width="0.3" height="15.0" fill="rgb(250,116,21)" rx="2" ry="2" />
<text  x="167.83" y="511.5" ></text>
</g>
<g >
<title>LockedPool::alloc (1,313 samples, 1.50%)</title><rect x="846.2" y="421" width="17.6" height="15.0" fill="rgb(230,94,16)" rx="2" ry="2" />
<text  x="849.16" y="431.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="164.6" y="517" width="0.1" height="15.0" fill="rgb(225,131,21)" rx="2" ry="2" />
<text  x="167.57" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair (28 samples, 0.03%)</title><rect x="943.8" y="469" width="0.3" height="15.0" fill="rgb(248,181,14)" rx="2" ry="2" />
<text  x="946.75" y="479.5" ></text>
</g>
<g >
<title>__db_ret (63 samples, 0.07%)</title><rect x="358.9" y="629" width="0.8" height="15.0" fill="rgb(212,175,5)" rx="2" ry="2" />
<text  x="361.88" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;::allocate (13 samples, 0.01%)</title><rect x="849.3" y="325" width="0.2" height="15.0" fill="rgb(230,55,36)" rx="2" ry="2" />
<text  x="852.34" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::deallocate (8 samples, 0.01%)</title><rect x="682.2" y="453" width="0.1" height="15.0" fill="rgb(237,197,37)" rx="2" ry="2" />
<text  x="685.16" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;CTransaction const,  (14 samples, 0.02%)</title><rect x="931.3" y="629" width="0.2" height="15.0" fill="rgb(250,118,0)" rx="2" ry="2" />
<text  x="934.31" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::find (50 samples, 0.06%)</title><rect x="676.2" y="549" width="0.6" height="15.0" fill="rgb(208,33,42)" rx="2" ry="2" />
<text  x="679.17" y="559.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, unsigned char, secure_allocator&lt;unsigned char&gt; &gt; (1,769 samples, 2.02%)</title><rect x="610.1" y="661" width="23.8" height="15.0" fill="rgb(207,80,38)" rx="2" ry="2" />
<text  x="613.07" y="671.5" >U..</text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter&gt; (8 samples, 0.01%)</title><rect x="529.0" y="133" width="0.1" height="15.0" fill="rgb(236,128,35)" rx="2" ry="2" />
<text  x="531.98" y="143.5" ></text>
</g>
<g >
<title>bitcoind (443 samples, 0.51%)</title><rect x="1184.0" y="773" width="6.0" height="15.0" fill="rgb(228,69,50)" rx="2" ry="2" />
<text  x="1187.03" y="783.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (12 samples, 0.01%)</title><rect x="579.3" y="613" width="0.1" height="15.0" fill="rgb(252,188,29)" rx="2" ry="2" />
<text  x="582.27" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::_S_construct&lt;unsigned char&gt; (117 samples, 0.13%)</title><rect x="665.9" y="597" width="1.6" height="15.0" fill="rgb(208,200,44)" rx="2" ry="2" />
<text  x="668.88" y="607.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (164 samples, 0.19%)</title><rect x="180.9" y="229" width="2.2" height="15.0" fill="rgb(241,87,1)" rx="2" ry="2" />
<text  x="183.93" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt; &gt;::_M_node_allocator (24 samples, 0.03%)</title><rect x="996.5" y="597" width="0.3" height="15.0" fill="rgb(242,204,51)" rx="2" ry="2" />
<text  x="999.48" y="607.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (30 samples, 0.03%)</title><rect x="559.5" y="277" width="0.4" height="15.0" fill="rgb(208,139,31)" rx="2" ry="2" />
<text  x="562.53" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (40 samples, 0.05%)</title><rect x="826.1" y="517" width="0.5" height="15.0" fill="rgb(215,33,4)" rx="2" ry="2" />
<text  x="829.08" y="527.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 0.02%)</title><rect x="112.1" y="277" width="0.2" height="15.0" fill="rgb(240,105,2)" rx="2" ry="2" />
<text  x="115.12" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (47 samples, 0.05%)</title><rect x="1089.7" y="501" width="0.6" height="15.0" fill="rgb(240,224,24)" rx="2" ry="2" />
<text  x="1092.70" y="511.5" ></text>
</g>
<g >
<title>__bam_cmp (25 samples, 0.03%)</title><rect x="74.9" y="469" width="0.3" height="15.0" fill="rgb(253,228,2)" rx="2" ry="2" />
<text  x="77.90" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (240 samples, 0.27%)</title><rect x="399.2" y="501" width="3.2" height="15.0" fill="rgb(228,199,39)" rx="2" ry="2" />
<text  x="402.16" y="511.5" ></text>
</g>
<g >
<title>__memp_fput (27 samples, 0.03%)</title><rect x="112.3" y="405" width="0.4" height="15.0" fill="rgb(235,177,39)" rx="2" ry="2" />
<text  x="115.34" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (16 samples, 0.02%)</title><rect x="41.4" y="565" width="0.2" height="15.0" fill="rgb(220,183,11)" rx="2" ry="2" />
<text  x="44.37" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (15 samples, 0.02%)</title><rect x="592.0" y="565" width="0.3" height="15.0" fill="rgb(207,121,12)" rx="2" ry="2" />
<text  x="595.05" y="575.5" ></text>
</g>
<g >
<title>__GI___ctype_init (23 samples, 0.03%)</title><rect x="1146.6" y="725" width="0.3" height="15.0" fill="rgb(216,92,4)" rx="2" ry="2" />
<text  x="1149.57" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (10 samples, 0.01%)</title><rect x="905.0" y="565" width="0.1" height="15.0" fill="rgb(213,48,11)" rx="2" ry="2" />
<text  x="907.97" y="575.5" ></text>
</g>
<g >
<title>_mm_sha256msg2_epu32 (8 samples, 0.01%)</title><rect x="1118.3" y="213" width="0.1" height="15.0" fill="rgb(205,13,53)" rx="2" ry="2" />
<text  x="1121.27" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (46 samples, 0.05%)</title><rect x="676.2" y="533" width="0.6" height="15.0" fill="rgb(244,72,51)" rx="2" ry="2" />
<text  x="679.22" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (25 samples, 0.03%)</title><rect x="900.1" y="517" width="0.3" height="15.0" fill="rgb(216,79,44)" rx="2" ry="2" />
<text  x="903.10" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::__normal_iterator (15 samples, 0.02%)</title><rect x="539.9" y="277" width="0.2" height="15.0" fill="rgb(245,9,32)" rx="2" ry="2" />
<text  x="542.94" y="287.5" ></text>
</g>
<g >
<title>CTxIn::~CTxIn (40 samples, 0.05%)</title><rect x="525.4" y="309" width="0.5" height="15.0" fill="rgb(252,19,5)" rx="2" ry="2" />
<text  x="528.41" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::end (39 samples, 0.04%)</title><rect x="850.8" y="373" width="0.5" height="15.0" fill="rgb(248,105,33)" rx="2" ry="2" />
<text  x="853.76" y="383.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.01%)</title><rect x="1059.7" y="533" width="0.1" height="15.0" fill="rgb(248,185,13)" rx="2" ry="2" />
<text  x="1062.69" y="543.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (16 samples, 0.02%)</title><rect x="77.0" y="453" width="0.2" height="15.0" fill="rgb(241,106,18)" rx="2" ry="2" />
<text  x="80.02" y="463.5" ></text>
</g>
<g >
<title>SeedStartup (398 samples, 0.45%)</title><rect x="1184.2" y="645" width="5.4" height="15.0" fill="rgb(215,58,4)" rx="2" ry="2" />
<text  x="1187.21" y="655.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 0.03%)</title><rect x="136.4" y="421" width="0.4" height="15.0" fill="rgb(233,30,17)" rx="2" ry="2" />
<text  x="139.45" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase_aux (417 samples, 0.48%)</title><rect x="588.8" y="597" width="5.6" height="15.0" fill="rgb(242,0,41)" rx="2" ry="2" />
<text  x="591.77" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_insert_dispatch&lt;char const*&gt; (9,356 samples, 10.69%)</title><rect x="198.8" y="645" width="126.0" height="15.0" fill="rgb(232,182,9)" rx="2" ry="2" />
<text  x="201.76" y="655.5" >std::vector&lt;cha..</text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::~pair (13 samples, 0.01%)</title><rect x="879.7" y="581" width="0.2" height="15.0" fill="rgb(220,150,25)" rx="2" ry="2" />
<text  x="882.68" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (11 samples, 0.01%)</title><rect x="871.3" y="581" width="0.2" height="15.0" fill="rgb(220,161,12)" rx="2" ry="2" />
<text  x="874.32" y="591.5" ></text>
</g>
<g >
<title>__db_lget (10 samples, 0.01%)</title><rect x="66.5" y="453" width="0.1" height="15.0" fill="rgb(213,223,29)" rx="2" ry="2" />
<text  x="69.45" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_erase_at_end (357 samples, 0.41%)</title><rect x="404.4" y="597" width="4.8" height="15.0" fill="rgb(224,63,39)" rx="2" ry="2" />
<text  x="407.39" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="148.6" y="517" width="0.1" height="15.0" fill="rgb(225,29,23)" rx="2" ry="2" />
<text  x="151.56" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::max_size (23 samples, 0.03%)</title><rect x="398.2" y="437" width="0.3" height="15.0" fill="rgb(217,42,1)" rx="2" ry="2" />
<text  x="401.15" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl::~_Vector_impl (14 samples, 0.02%)</title><rect x="518.7" y="405" width="0.1" height="15.0" fill="rgb(231,15,38)" rx="2" ry="2" />
<text  x="521.66" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char* const&amp;&gt;, std::tuple&lt;&gt; &gt; (122 samples, 0.14%)</title><rect x="1083.0" y="533" width="1.7" height="15.0" fill="rgb(210,224,29)" rx="2" ry="2" />
<text  x="1086.04" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_get_Tp_allocator (9 samples, 0.01%)</title><rect x="481.3" y="325" width="0.2" height="15.0" fill="rgb(249,184,2)" rx="2" ry="2" />
<text  x="484.33" y="335.5" ></text>
</g>
<g >
<title>std::forward&lt;char const&amp;&gt; (13 samples, 0.01%)</title><rect x="41.2" y="549" width="0.2" height="15.0" fill="rgb(253,218,2)" rx="2" ry="2" />
<text  x="44.20" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (34 samples, 0.04%)</title><rect x="144.5" y="437" width="0.4" height="15.0" fill="rgb(214,92,54)" rx="2" ry="2" />
<text  x="147.48" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_rehash (139 samples, 0.16%)</title><rect x="921.8" y="549" width="1.9" height="15.0" fill="rgb(209,20,24)" rx="2" ry="2" />
<text  x="924.82" y="559.5" ></text>
</g>
<g >
<title>__db_lget (80 samples, 0.09%)</title><rect x="83.2" y="421" width="1.1" height="15.0" fill="rgb(225,187,48)" rx="2" ry="2" />
<text  x="86.20" y="431.5" ></text>
</g>
<g >
<title>__dbc_close (24 samples, 0.03%)</title><rect x="106.2" y="469" width="0.4" height="15.0" fill="rgb(214,19,8)" rx="2" ry="2" />
<text  x="109.25" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (23 samples, 0.03%)</title><rect x="1064.9" y="645" width="0.3" height="15.0" fill="rgb(213,181,42)" rx="2" ry="2" />
<text  x="1067.89" y="655.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (11 samples, 0.01%)</title><rect x="863.6" y="405" width="0.2" height="15.0" fill="rgb(232,9,18)" rx="2" ry="2" />
<text  x="866.61" y="415.5" ></text>
</g>
<g >
<title>__dbc_close (17 samples, 0.02%)</title><rect x="100.3" y="453" width="0.2" height="15.0" fill="rgb(234,114,23)" rx="2" ry="2" />
<text  x="103.28" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;::_Node_iterator (17 samples, 0.02%)</title><rect x="906.5" y="613" width="0.2" height="15.0" fill="rgb(234,146,36)" rx="2" ry="2" />
<text  x="909.47" y="623.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CDataStream, CSerActionUnserialize&gt; (246 samples, 0.28%)</title><rect x="475.6" y="245" width="3.3" height="15.0" fill="rgb(215,161,21)" rx="2" ry="2" />
<text  x="478.57" y="255.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (89 samples, 0.10%)</title><rect x="351.3" y="581" width="1.2" height="15.0" fill="rgb(231,0,7)" rx="2" ry="2" />
<text  x="354.32" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (9 samples, 0.01%)</title><rect x="1025.8" y="517" width="0.1" height="15.0" fill="rgb(254,115,18)" rx="2" ry="2" />
<text  x="1028.78" y="527.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (8 samples, 0.01%)</title><rect x="1151.5" y="757" width="0.1" height="15.0" fill="rgb(225,74,44)" rx="2" ry="2" />
<text  x="1154.54" y="767.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, COutPoint&gt; (112 samples, 0.13%)</title><rect x="545.8" y="229" width="1.5" height="15.0" fill="rgb(241,106,41)" rx="2" ry="2" />
<text  x="548.76" y="239.5" ></text>
</g>
<g >
<title>dl_main (15 samples, 0.02%)</title><rect x="1189.8" y="709" width="0.2" height="15.0" fill="rgb(236,143,53)" rx="2" ry="2" />
<text  x="1192.80" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::construct&lt;char, char const&amp;&gt; (94 samples, 0.11%)</title><rect x="40.3" y="581" width="1.3" height="15.0" fill="rgb(214,183,6)" rx="2" ry="2" />
<text  x="43.32" y="591.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (63 samples, 0.07%)</title><rect x="44.8" y="629" width="0.9" height="15.0" fill="rgb(227,24,4)" rx="2" ry="2" />
<text  x="47.84" y="639.5" ></text>
</g>
<g >
<title>CTxIn::Unserialize&lt;CDataStream&gt; (511 samples, 0.58%)</title><rect x="472.5" y="341" width="6.9" height="15.0" fill="rgb(212,65,29)" rx="2" ry="2" />
<text  x="475.54" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (19 samples, 0.02%)</title><rect x="493.2" y="309" width="0.3" height="15.0" fill="rgb(217,152,33)" rx="2" ry="2" />
<text  x="496.21" y="319.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (1,812 samples, 2.07%)</title><rect x="333.3" y="629" width="24.5" height="15.0" fill="rgb(210,137,46)" rx="2" ry="2" />
<text  x="336.33" y="639.5" >[..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (17 samples, 0.02%)</title><rect x="1103.0" y="629" width="0.2" height="15.0" fill="rgb(251,133,19)" rx="2" ry="2" />
<text  x="1105.96" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (1,053 samples, 1.20%)</title><rect x="636.7" y="613" width="14.2" height="15.0" fill="rgb(208,97,25)" rx="2" ry="2" />
<text  x="639.74" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.01%)</title><rect x="1082.3" y="517" width="0.2" height="15.0" fill="rgb(214,97,22)" rx="2" ry="2" />
<text  x="1085.33" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_S_key (12 samples, 0.01%)</title><rect x="54.4" y="629" width="0.1" height="15.0" fill="rgb(208,137,18)" rx="2" ry="2" />
<text  x="57.38" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;CScriptID const, CScript&gt;, false, true&gt;::operator (15 samples, 0.02%)</title><rect x="828.0" y="581" width="0.2" height="15.0" fill="rgb(215,46,35)" rx="2" ry="2" />
<text  x="830.99" y="591.5" ></text>
</g>
<g >
<title>CWalletTx::Init (45 samples, 0.05%)</title><rect x="1015.8" y="661" width="0.7" height="15.0" fill="rgb(213,145,6)" rx="2" ry="2" />
<text  x="1018.85" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::base (8 samples, 0.01%)</title><rect x="1049.4" y="629" width="0.2" height="15.0" fill="rgb(237,46,15)" rx="2" ry="2" />
<text  x="1052.44" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::empty (43 samples, 0.05%)</title><rect x="516.3" y="373" width="0.6" height="15.0" fill="rgb(209,33,36)" rx="2" ry="2" />
<text  x="519.27" y="383.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (9 samples, 0.01%)</title><rect x="582.2" y="581" width="0.1" height="15.0" fill="rgb(251,4,1)" rx="2" ry="2" />
<text  x="585.22" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::allocate (14 samples, 0.02%)</title><rect x="1079.8" y="485" width="0.2" height="15.0" fill="rgb(225,195,32)" rx="2" ry="2" />
<text  x="1082.78" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;::_Hash_node_value_base (15 samples, 0.02%)</title><rect x="927.3" y="533" width="0.2" height="15.0" fill="rgb(250,35,0)" rx="2" ry="2" />
<text  x="930.31" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_get_insert_equal_pos (898 samples, 1.03%)</title><rect x="967.5" y="629" width="12.1" height="15.0" fill="rgb(215,54,17)" rx="2" ry="2" />
<text  x="970.51" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::size (21 samples, 0.02%)</title><rect x="599.7" y="597" width="0.3" height="15.0" fill="rgb(238,76,35)" rx="2" ry="2" />
<text  x="602.70" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt;::allocate (43 samples, 0.05%)</title><rect x="844.5" y="565" width="0.6" height="15.0" fill="rgb(243,145,6)" rx="2" ry="2" />
<text  x="847.48" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (18 samples, 0.02%)</title><rect x="1058.0" y="501" width="0.3" height="15.0" fill="rgb(248,53,25)" rx="2" ry="2" />
<text  x="1061.01" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~vector (87 samples, 0.10%)</title><rect x="603.9" y="629" width="1.2" height="15.0" fill="rgb(254,75,30)" rx="2" ry="2" />
<text  x="606.94" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_S_left (8 samples, 0.01%)</title><rect x="1048.4" y="613" width="0.1" height="15.0" fill="rgb(211,146,35)" rx="2" ry="2" />
<text  x="1051.41" y="623.5" ></text>
</g>
<g >
<title>CSizeComputer::operator&lt;&lt; &lt;unsigned int&gt; (11 samples, 0.01%)</title><rect x="1037.0" y="581" width="0.1" height="15.0" fill="rgb(235,222,40)" rx="2" ry="2" />
<text  x="1039.98" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (28 samples, 0.03%)</title><rect x="814.7" y="421" width="0.4" height="15.0" fill="rgb(250,65,41)" rx="2" ry="2" />
<text  x="817.69" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (30 samples, 0.03%)</title><rect x="578.8" y="613" width="0.4" height="15.0" fill="rgb(224,68,38)" rx="2" ry="2" />
<text  x="581.79" y="623.5" ></text>
</g>
<g >
<title>__gthread_once (8 samples, 0.01%)</title><rect x="863.9" y="389" width="0.1" height="15.0" fill="rgb(206,157,8)" rx="2" ry="2" />
<text  x="866.93" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (14 samples, 0.02%)</title><rect x="1016.1" y="629" width="0.2" height="15.0" fill="rgb(251,172,22)" rx="2" ry="2" />
<text  x="1019.14" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (54 samples, 0.06%)</title><rect x="31.5" y="661" width="0.7" height="15.0" fill="rgb(229,51,34)" rx="2" ry="2" />
<text  x="34.47" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::operator+ (98 samples, 0.11%)</title><rect x="196.5" y="645" width="1.3" height="15.0" fill="rgb(229,120,46)" rx="2" ry="2" />
<text  x="199.51" y="655.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::at (541 samples, 0.62%)</title><rect x="898.1" y="613" width="7.3" height="15.0" fill="rgb(205,74,43)" rx="2" ry="2" />
<text  x="901.08" y="623.5" ></text>
</g>
<g >
<title>std::equal_to&lt;uint256&gt;::operator (52 samples, 0.06%)</title><rect x="1011.6" y="565" width="0.7" height="15.0" fill="rgb(252,76,14)" rx="2" ry="2" />
<text  x="1014.64" y="575.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="154.9" y="437" width="0.1" height="15.0" fill="rgb(234,162,38)" rx="2" ry="2" />
<text  x="157.87" y="447.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Unserialize&lt;CDataStream&gt; (24 samples, 0.03%)</title><rect x="39.4" y="597" width="0.3" height="15.0" fill="rgb(209,63,47)" rx="2" ry="2" />
<text  x="42.35" y="607.5" ></text>
</g>
<g >
<title>__os_io (41 samples, 0.05%)</title><rect x="135.6" y="437" width="0.6" height="15.0" fill="rgb(215,22,53)" rx="2" ry="2" />
<text  x="138.64" y="447.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (20 samples, 0.02%)</title><rect x="410.8" y="485" width="0.3" height="15.0" fill="rgb(252,162,34)" rx="2" ry="2" />
<text  x="413.84" y="495.5" ></text>
</g>
<g >
<title>CDataStream::Xor (108 samples, 0.12%)</title><rect x="41.7" y="645" width="1.4" height="15.0" fill="rgb(221,56,46)" rx="2" ry="2" />
<text  x="44.66" y="655.5" ></text>
</g>
<g >
<title>__db_vrfy_ccset (64 samples, 0.07%)</title><rect x="66.3" y="533" width="0.9" height="15.0" fill="rgb(253,139,15)" rx="2" ry="2" />
<text  x="69.32" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::_Vector_impl (13 samples, 0.01%)</title><rect x="1058.1" y="485" width="0.2" height="15.0" fill="rgb(217,82,53)" rx="2" ry="2" />
<text  x="1061.08" y="495.5" ></text>
</g>
<g >
<title>__db_vrfy_putpageinfo (69 samples, 0.08%)</title><rect x="104.8" y="485" width="0.9" height="15.0" fill="rgb(252,189,40)" rx="2" ry="2" />
<text  x="107.76" y="495.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="74.1" y="517" width="0.1" height="15.0" fill="rgb(207,79,36)" rx="2" ry="2" />
<text  x="77.12" y="527.5" ></text>
</g>
<g >
<title>__dbc_iget (54 samples, 0.06%)</title><rect x="162.8" y="533" width="0.7" height="15.0" fill="rgb(238,102,36)" rx="2" ry="2" />
<text  x="165.82" y="543.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (16 samples, 0.02%)</title><rect x="573.2" y="581" width="0.2" height="15.0" fill="rgb(230,127,31)" rx="2" ry="2" />
<text  x="576.17" y="591.5" ></text>
</g>
<g >
<title>DecodeDestination (187 samples, 0.21%)</title><rect x="1050.4" y="677" width="2.5" height="15.0" fill="rgb(247,22,31)" rx="2" ry="2" />
<text  x="1053.41" y="687.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (202 samples, 0.23%)</title><rect x="811.2" y="453" width="2.7" height="15.0" fill="rgb(248,171,13)" rx="2" ry="2" />
<text  x="814.18" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (54 samples, 0.06%)</title><rect x="592.3" y="581" width="0.7" height="15.0" fill="rgb(209,165,27)" rx="2" ry="2" />
<text  x="595.25" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="171.9" y="469" width="0.1" height="15.0" fill="rgb(224,81,52)" rx="2" ry="2" />
<text  x="174.86" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;uint256&gt;::operator (21 samples, 0.02%)</title><rect x="900.4" y="517" width="0.3" height="15.0" fill="rgb(250,134,40)" rx="2" ry="2" />
<text  x="903.44" y="527.5" ></text>
</g>
<g >
<title>CTxOut::CTxOut (43 samples, 0.05%)</title><rect x="491.5" y="261" width="0.6" height="15.0" fill="rgb(242,115,16)" rx="2" ry="2" />
<text  x="494.54" y="271.5" ></text>
</g>
<g >
<title>__env_alloc (13 samples, 0.01%)</title><rect x="177.3" y="549" width="0.2" height="15.0" fill="rgb(252,149,2)" rx="2" ry="2" />
<text  x="180.29" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_check_init_len (27 samples, 0.03%)</title><rect x="816.3" y="421" width="0.4" height="15.0" fill="rgb(235,176,36)" rx="2" ry="2" />
<text  x="819.35" y="431.5" ></text>
</g>
<g >
<title>CHashWriter::GetHash (53 samples, 0.06%)</title><rect x="46.0" y="613" width="0.7" height="15.0" fill="rgb(235,145,45)" rx="2" ry="2" />
<text  x="48.97" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::destroy&lt;char&gt; (34 samples, 0.04%)</title><rect x="408.7" y="533" width="0.5" height="15.0" fill="rgb(223,148,3)" rx="2" ry="2" />
<text  x="411.75" y="543.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, uint256&amp;&gt; (34 samples, 0.04%)</title><rect x="473.7" y="197" width="0.5" height="15.0" fill="rgb(228,218,47)" rx="2" ry="2" />
<text  x="476.74" y="207.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTransaction&gt; (328 samples, 0.37%)</title><rect x="180.9" y="725" width="4.5" height="15.0" fill="rgb(239,87,8)" rx="2" ry="2" />
<text  x="183.93" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt; &gt;::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, true&gt; (9 samples, 0.01%)</title><rect x="914.4" y="581" width="0.2" height="15.0" fill="rgb(213,149,40)" rx="2" ry="2" />
<text  x="917.44" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (63 samples, 0.07%)</title><rect x="858.0" y="373" width="0.9" height="15.0" fill="rgb(224,161,13)" rx="2" ry="2" />
<text  x="861.01" y="383.5" ></text>
</g>
<g >
<title>CScript::clear (35 samples, 0.04%)</title><rect x="485.0" y="341" width="0.5" height="15.0" fill="rgb(235,65,31)" rx="2" ry="2" />
<text  x="487.98" y="351.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (315 samples, 0.36%)</title><rect x="1105.0" y="421" width="4.2" height="15.0" fill="rgb(206,86,9)" rx="2" ry="2" />
<text  x="1107.95" y="431.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (1,306 samples, 1.49%)</title><rect x="767.2" y="565" width="17.6" height="15.0" fill="rgb(252,196,44)" rx="2" ry="2" />
<text  x="770.20" y="575.5" ></text>
</g>
<g >
<title>CScript::clear (20 samples, 0.02%)</title><rect x="491.9" y="229" width="0.2" height="15.0" fill="rgb(208,36,30)" rx="2" ry="2" />
<text  x="494.85" y="239.5" ></text>
</g>
<g >
<title>CSHA256::Reset (11 samples, 0.01%)</title><rect x="1054.7" y="645" width="0.1" height="15.0" fill="rgb(225,164,27)" rx="2" ry="2" />
<text  x="1057.66" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (8 samples, 0.01%)</title><rect x="860.7" y="277" width="0.1" height="15.0" fill="rgb(229,5,7)" rx="2" ry="2" />
<text  x="863.70" y="287.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (664 samples, 0.76%)</title><rect x="138.6" y="501" width="8.9" height="15.0" fill="rgb(216,191,48)" rx="2" ry="2" />
<text  x="141.58" y="511.5" ></text>
</g>
<g >
<title>__dbc_close (9 samples, 0.01%)</title><rect x="104.8" y="453" width="0.1" height="15.0" fill="rgb(224,169,35)" rx="2" ry="2" />
<text  x="107.80" y="463.5" ></text>
</g>
<g >
<title>ReadKeyValue (2,285 samples, 2.61%)</title><rect x="1105.0" y="741" width="30.7" height="15.0" fill="rgb(232,229,39)" rx="2" ry="2" />
<text  x="1107.95" y="751.5" >Re..</text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (8 samples, 0.01%)</title><rect x="813.8" y="437" width="0.1" height="15.0" fill="rgb(218,145,42)" rx="2" ry="2" />
<text  x="816.80" y="447.5" ></text>
</g>
<g >
<title>std::mutex::unlock (34 samples, 0.04%)</title><rect x="940.5" y="517" width="0.4" height="15.0" fill="rgb(216,227,12)" rx="2" ry="2" />
<text  x="943.48" y="527.5" ></text>
</g>
<g >
<title>base_blob&lt;160u&gt;::Compare (23 samples, 0.03%)</title><rect x="738.8" y="517" width="0.3" height="15.0" fill="rgb(234,71,32)" rx="2" ry="2" />
<text  x="741.82" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase_aux (193 samples, 0.22%)</title><rect x="589.3" y="581" width="2.6" height="15.0" fill="rgb(227,226,12)" rx="2" ry="2" />
<text  x="592.26" y="591.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.02%)</title><rect x="357.2" y="533" width="0.3" height="15.0" fill="rgb(230,123,17)" rx="2" ry="2" />
<text  x="360.21" y="543.5" ></text>
</g>
<g >
<title>bitcoin-net (10 samples, 0.01%)</title><rect x="1183.8" y="773" width="0.1" height="15.0" fill="rgb(251,129,38)" rx="2" ry="2" />
<text  x="1186.79" y="783.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (23 samples, 0.03%)</title><rect x="495.4" y="341" width="0.3" height="15.0" fill="rgb(236,208,6)" rx="2" ry="2" />
<text  x="498.40" y="351.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (16 samples, 0.02%)</title><rect x="1143.9" y="485" width="0.2" height="15.0" fill="rgb(234,60,19)" rx="2" ry="2" />
<text  x="1146.88" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (20 samples, 0.02%)</title><rect x="563.2" y="341" width="0.3" height="15.0" fill="rgb(241,2,7)" rx="2" ry="2" />
<text  x="566.18" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::__normal_iterator (17 samples, 0.02%)</title><rect x="195.9" y="645" width="0.2" height="15.0" fill="rgb(231,38,9)" rx="2" ry="2" />
<text  x="198.89" y="655.5" ></text>
</g>
<g >
<title>__libc_pwrite64 (16 samples, 0.02%)</title><rect x="1143.9" y="357" width="0.2" height="15.0" fill="rgb(237,137,33)" rx="2" ry="2" />
<text  x="1146.88" y="367.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, unsigned long&gt;, false, false&gt;, bool&gt; (13 samples, 0.01%)</title><rect x="617.2" y="469" width="0.2" height="15.0" fill="rgb(224,129,26)" rx="2" ry="2" />
<text  x="620.20" y="479.5" ></text>
</g>
<g >
<title>CHash256::CHash256 (17 samples, 0.02%)</title><rect x="1053.1" y="661" width="0.3" height="15.0" fill="rgb(250,200,34)" rx="2" ry="2" />
<text  x="1056.15" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;CKeyID const&amp;&gt;::tuple (12 samples, 0.01%)</title><rect x="892.8" y="581" width="0.1" height="15.0" fill="rgb(246,130,26)" rx="2" ry="2" />
<text  x="895.78" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (40 samples, 0.05%)</title><rect x="887.4" y="581" width="0.5" height="15.0" fill="rgb(225,88,30)" rx="2" ry="2" />
<text  x="890.41" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_default_append (20 samples, 0.02%)</title><rect x="1177.8" y="757" width="0.3" height="15.0" fill="rgb(241,11,10)" rx="2" ry="2" />
<text  x="1180.80" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_drop_node (14 samples, 0.02%)</title><rect x="1048.0" y="597" width="0.2" height="15.0" fill="rgb(207,86,48)" rx="2" ry="2" />
<text  x="1051.00" y="607.5" ></text>
</g>
<g >
<title>CScriptWitness::~CScriptWitness (10 samples, 0.01%)</title><rect x="18.4" y="741" width="0.1" height="15.0" fill="rgb(219,90,12)" rx="2" ry="2" />
<text  x="21.37" y="751.5" ></text>
</g>
<g >
<title>CHash256::Finalize (324 samples, 0.37%)</title><rect x="1109.2" y="437" width="4.4" height="15.0" fill="rgb(209,228,35)" rx="2" ry="2" />
<text  x="1112.20" y="447.5" ></text>
</g>
<g >
<title>CSipHasher::Finalize (34 samples, 0.04%)</title><rect x="823.2" y="549" width="0.5" height="15.0" fill="rgb(244,26,23)" rx="2" ry="2" />
<text  x="826.25" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::vector (55 samples, 0.06%)</title><rect x="603.2" y="629" width="0.7" height="15.0" fill="rgb(248,136,11)" rx="2" ry="2" />
<text  x="606.19" y="639.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (386 samples, 0.44%)</title><rect x="1113.6" y="261" width="5.2" height="15.0" fill="rgb(211,188,32)" rx="2" ry="2" />
<text  x="1116.56" y="271.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (17 samples, 0.02%)</title><rect x="58.2" y="549" width="0.2" height="15.0" fill="rgb(242,71,13)" rx="2" ry="2" />
<text  x="61.22" y="559.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::WalletClientImpl::verify (20 samples, 0.02%)</title><rect x="1144.6" y="741" width="0.2" height="15.0" fill="rgb(241,102,35)" rx="2" ry="2" />
<text  x="1147.57" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (57 samples, 0.07%)</title><rect x="682.6" y="533" width="0.8" height="15.0" fill="rgb(239,111,28)" rx="2" ry="2" />
<text  x="685.58" y="543.5" ></text>
</g>
<g >
<title>CDataStream::read (256 samples, 0.29%)</title><rect x="399.0" y="549" width="3.4" height="15.0" fill="rgb(232,169,2)" rx="2" ry="2" />
<text  x="401.98" y="559.5" ></text>
</g>
<g >
<title>CHash256::Write (13 samples, 0.01%)</title><rect x="1054.9" y="661" width="0.1" height="15.0" fill="rgb(230,213,39)" rx="2" ry="2" />
<text  x="1057.87" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair&lt;void*&amp;, true&gt; (88 samples, 0.10%)</title><rect x="873.7" y="565" width="1.2" height="15.0" fill="rgb(237,114,12)" rx="2" ry="2" />
<text  x="876.71" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (7,635 samples, 8.72%)</title><rect x="464.3" y="565" width="102.9" height="15.0" fill="rgb(222,214,38)" rx="2" ry="2" />
<text  x="467.34" y="575.5" >std::shared_..</text>
</g>
<g >
<title>operator== (16 samples, 0.02%)</title><rect x="962.1" y="517" width="0.2" height="15.0" fill="rgb(242,195,30)" rx="2" ry="2" />
<text  x="965.06" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;interfaces::Chain::Lock&gt;::operator (188 samples, 0.21%)</title><rect x="983.9" y="645" width="2.5" height="15.0" fill="rgb(207,46,32)" rx="2" ry="2" />
<text  x="986.91" y="655.5" ></text>
</g>
<g >
<title>CHash256::Write (14 samples, 0.02%)</title><rect x="546.9" y="85" width="0.2" height="15.0" fill="rgb(229,9,47)" rx="2" ry="2" />
<text  x="549.92" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CMerkleTx&gt;::new_allocator (14 samples, 0.02%)</title><rect x="602.0" y="565" width="0.2" height="15.0" fill="rgb(207,117,33)" rx="2" ry="2" />
<text  x="605.02" y="575.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (831 samples, 0.95%)</title><rect x="495.7" y="357" width="11.2" height="15.0" fill="rgb(218,196,50)" rx="2" ry="2" />
<text  x="498.71" y="367.5" ></text>
</g>
<g >
<title>std::less&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; &gt;::operator (9 samples, 0.01%)</title><rect x="1062.1" y="613" width="0.1" height="15.0" fill="rgb(218,50,50)" rx="2" ry="2" />
<text  x="1065.08" y="623.5" ></text>
</g>
<g >
<title>__memp_fget (18 samples, 0.02%)</title><rect x="105.2" y="389" width="0.3" height="15.0" fill="rgb(215,92,53)" rx="2" ry="2" />
<text  x="108.22" y="399.5" ></text>
</g>
<g >
<title>push_lock (26 samples, 0.03%)</title><rect x="1151.8" y="757" width="0.3" height="15.0" fill="rgb(243,17,7)" rx="2" ry="2" />
<text  x="1154.75" y="767.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (8 samples, 0.01%)</title><rect x="724.9" y="597" width="0.1" height="15.0" fill="rgb(209,110,33)" rx="2" ry="2" />
<text  x="727.88" y="607.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (16 samples, 0.02%)</title><rect x="1189.8" y="725" width="0.2" height="15.0" fill="rgb(254,38,5)" rx="2" ry="2" />
<text  x="1192.78" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (37 samples, 0.04%)</title><rect x="615.6" y="453" width="0.5" height="15.0" fill="rgb(220,124,40)" rx="2" ry="2" />
<text  x="618.62" y="463.5" ></text>
</g>
<g >
<title>QuadRound (92 samples, 0.11%)</title><rect x="1119.0" y="629" width="1.3" height="15.0" fill="rgb(252,36,16)" rx="2" ry="2" />
<text  x="1122.02" y="639.5" ></text>
</g>
<g >
<title>CWalletTx::GetDepthInMainChain (91 samples, 0.10%)</title><rect x="33.6" y="645" width="1.3" height="15.0" fill="rgb(235,82,7)" rx="2" ry="2" />
<text  x="36.64" y="655.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CWalletTx&amp;&gt; (14,299 samples, 16.33%)</title><rect x="412.4" y="661" width="192.7" height="15.0" fill="rgb(208,39,36)" rx="2" ry="2" />
<text  x="415.41" y="671.5" >Unserialize&lt;CDataStream, ..</text>
</g>
<g >
<title>__memp_alloc (29 samples, 0.03%)</title><rect x="156.6" y="469" width="0.4" height="15.0" fill="rgb(245,59,39)" rx="2" ry="2" />
<text  x="159.59" y="479.5" ></text>
</g>
<g >
<title>__bam_get_root (8 samples, 0.01%)</title><rect x="153.6" y="469" width="0.2" height="15.0" fill="rgb(232,202,0)" rx="2" ry="2" />
<text  x="156.64" y="479.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="373" width="4.2" height="15.0" fill="rgb(238,44,21)" rx="2" ry="2" />
<text  x="1138.80" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size (13 samples, 0.01%)</title><rect x="867.5" y="453" width="0.2" height="15.0" fill="rgb(248,142,34)" rx="2" ry="2" />
<text  x="870.53" y="463.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (42 samples, 0.05%)</title><rect x="497.4" y="309" width="0.6" height="15.0" fill="rgb(226,202,26)" rx="2" ry="2" />
<text  x="500.43" y="319.5" ></text>
</g>
<g >
<title>operator new (173 samples, 0.20%)</title><rect x="630.8" y="533" width="2.3" height="15.0" fill="rgb(247,113,5)" rx="2" ry="2" />
<text  x="633.81" y="543.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.01%)</title><rect x="707.0" y="581" width="0.1" height="15.0" fill="rgb(219,157,0)" rx="2" ry="2" />
<text  x="710.01" y="591.5" ></text>
</g>
<g >
<title>__db_lput (31 samples, 0.04%)</title><rect x="141.1" y="469" width="0.5" height="15.0" fill="rgb(212,173,29)" rx="2" ry="2" />
<text  x="144.14" y="479.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char&gt; (19 samples, 0.02%)</title><rect x="1093.7" y="533" width="0.3" height="15.0" fill="rgb(236,108,12)" rx="2" ry="2" />
<text  x="1096.70" y="543.5" ></text>
</g>
<g >
<title>Load (8 samples, 0.01%)</title><rect x="1140.5" y="165" width="0.1" height="15.0" fill="rgb(213,132,12)" rx="2" ry="2" />
<text  x="1143.53" y="175.5" ></text>
</g>
<g >
<title>CDiskBlockIndex::GetBlockHash (98 samples, 0.11%)</title><rect x="45.9" y="661" width="1.3" height="15.0" fill="rgb(207,146,49)" rx="2" ry="2" />
<text  x="48.93" y="671.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (27 samples, 0.03%)</title><rect x="73.7" y="517" width="0.4" height="15.0" fill="rgb(238,52,51)" rx="2" ry="2" />
<text  x="76.69" y="527.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (1,550 samples, 1.77%)</title><rect x="543.0" y="389" width="20.9" height="15.0" fill="rgb(212,164,50)" rx="2" ry="2" />
<text  x="545.98" y="399.5" ></text>
</g>
<g >
<title>CSHA256::Write (98 samples, 0.11%)</title><rect x="1120.5" y="629" width="1.3" height="15.0" fill="rgb(205,22,20)" rx="2" ry="2" />
<text  x="1123.50" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="93.4" y="357" width="0.1" height="15.0" fill="rgb(247,227,32)" rx="2" ry="2" />
<text  x="96.36" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;uint256&amp;, CWalletTx&amp;&gt; (1,273 samples, 1.45%)</title><rect x="987.1" y="629" width="17.2" height="15.0" fill="rgb(206,60,48)" rx="2" ry="2" />
<text  x="990.13" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (101 samples, 0.12%)</title><rect x="596.5" y="581" width="1.3" height="15.0" fill="rgb(245,41,54)" rx="2" ry="2" />
<text  x="599.48" y="591.5" ></text>
</g>
<g >
<title>CKeyMetadata::SetNull (23 samples, 0.03%)</title><rect x="684.7" y="661" width="0.3" height="15.0" fill="rgb(231,202,52)" rx="2" ry="2" />
<text  x="687.68" y="671.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::operator* (37 samples, 0.04%)</title><rect x="1051.6" y="613" width="0.5" height="15.0" fill="rgb(221,99,50)" rx="2" ry="2" />
<text  x="1054.57" y="623.5" ></text>
</g>
<g >
<title>__lock_put (30 samples, 0.03%)</title><rect x="89.8" y="421" width="0.5" height="15.0" fill="rgb(229,64,54)" rx="2" ry="2" />
<text  x="92.85" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::resize (350 samples, 0.40%)</title><rect x="479.7" y="357" width="4.7" height="15.0" fill="rgb(252,227,50)" rx="2" ry="2" />
<text  x="482.73" y="367.5" ></text>
</g>
<g >
<title>WriteBE32 (16 samples, 0.02%)</title><rect x="804.9" y="549" width="0.2" height="15.0" fill="rgb(224,144,48)" rx="2" ry="2" />
<text  x="807.92" y="559.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (152 samples, 0.17%)</title><rect x="1123.5" y="613" width="2.1" height="15.0" fill="rgb(228,24,27)" rx="2" ry="2" />
<text  x="1126.54" y="623.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.01%)</title><rect x="997.7" y="533" width="0.1" height="15.0" fill="rgb(209,136,15)" rx="2" ry="2" />
<text  x="1000.65" y="543.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (15 samples, 0.02%)</title><rect x="607.6" y="597" width="0.2" height="15.0" fill="rgb(253,157,12)" rx="2" ry="2" />
<text  x="610.63" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (8 samples, 0.01%)</title><rect x="106.0" y="437" width="0.1" height="15.0" fill="rgb(205,11,21)" rx="2" ry="2" />
<text  x="108.98" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_max_size&lt;zero_after_free_allocator&lt;char&gt; const&gt; (49 samples, 0.06%)</title><rect x="322.5" y="549" width="0.7" height="15.0" fill="rgb(209,56,31)" rx="2" ry="2" />
<text  x="325.53" y="559.5" ></text>
</g>
<g >
<title>CBlockIndexWorkComparator::operator (63 samples, 0.07%)</title><rect x="51.3" y="629" width="0.8" height="15.0" fill="rgb(230,183,52)" rx="2" ry="2" />
<text  x="54.28" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (10 samples, 0.01%)</title><rect x="1183.3" y="757" width="0.2" height="15.0" fill="rgb(241,159,46)" rx="2" ry="2" />
<text  x="1186.33" y="767.5" ></text>
</g>
<g >
<title>QuadRound (219 samples, 0.25%)</title><rect x="1136.4" y="165" width="3.0" height="15.0" fill="rgb(231,177,22)" rx="2" ry="2" />
<text  x="1139.45" y="175.5" ></text>
</g>
<g >
<title>CTxOut::Serialize&lt;CHashWriter&gt; (243 samples, 0.28%)</title><rect x="535.7" y="277" width="3.3" height="15.0" fill="rgb(248,228,53)" rx="2" ry="2" />
<text  x="538.68" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt; &gt;::allocate (45 samples, 0.05%)</title><rect x="997.2" y="581" width="0.6" height="15.0" fill="rgb(205,16,22)" rx="2" ry="2" />
<text  x="1000.22" y="591.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (150 samples, 0.17%)</title><rect x="410.2" y="597" width="2.0" height="15.0" fill="rgb(228,174,33)" rx="2" ry="2" />
<text  x="413.22" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::operator[] (9 samples, 0.01%)</title><rect x="606.3" y="629" width="0.1" height="15.0" fill="rgb(230,186,21)" rx="2" ry="2" />
<text  x="609.32" y="639.5" ></text>
</g>
<g >
<title>boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;::internal_apply_visitor_impl&lt;boost::detail::variant::destroyer, void*&gt; (31 samples, 0.04%)</title><rect x="818.2" y="565" width="0.4" height="15.0" fill="rgb(238,3,13)" rx="2" ry="2" />
<text  x="821.17" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_end (14 samples, 0.02%)</title><rect x="1040.0" y="613" width="0.2" height="15.0" fill="rgb(248,100,6)" rx="2" ry="2" />
<text  x="1043.01" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_allocate (10 samples, 0.01%)</title><rect x="1001.9" y="485" width="0.2" height="15.0" fill="rgb(230,190,54)" rx="2" ry="2" />
<text  x="1004.93" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::begin (8 samples, 0.01%)</title><rect x="766.7" y="597" width="0.1" height="15.0" fill="rgb(236,211,48)" rx="2" ry="2" />
<text  x="769.74" y="607.5" ></text>
</g>
<g >
<title>CTxIn::~CTxIn (41 samples, 0.05%)</title><rect x="544.8" y="309" width="0.5" height="15.0" fill="rgb(233,215,0)" rx="2" ry="2" />
<text  x="547.77" y="319.5" ></text>
</g>
<g >
<title>ser_writedata8&lt;CHashWriter&gt; (13 samples, 0.01%)</title><rect x="533.5" y="277" width="0.2" height="15.0" fill="rgb(210,144,13)" rx="2" ry="2" />
<text  x="536.51" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_get_Tp_allocator (14 samples, 0.02%)</title><rect x="500.7" y="293" width="0.2" height="15.0" fill="rgb(226,211,46)" rx="2" ry="2" />
<text  x="503.69" y="303.5" ></text>
</g>
<g >
<title>CDataStream::read (18 samples, 0.02%)</title><rect x="472.1" y="325" width="0.3" height="15.0" fill="rgb(219,229,41)" rx="2" ry="2" />
<text  x="475.11" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::deallocate (197 samples, 0.22%)</title><rect x="388.0" y="629" width="2.6" height="15.0" fill="rgb(233,145,42)" rx="2" ry="2" />
<text  x="390.98" y="639.5" ></text>
</g>
<g >
<title>CWalletTx::~CWalletTx (8 samples, 0.01%)</title><rect x="20.3" y="757" width="0.1" height="15.0" fill="rgb(243,119,23)" rx="2" ry="2" />
<text  x="23.32" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (78 samples, 0.09%)</title><rect x="936.5" y="533" width="1.0" height="15.0" fill="rgb(249,190,34)" rx="2" ry="2" />
<text  x="939.47" y="543.5" ></text>
</g>
<g >
<title>secure_allocator&lt;unsigned char&gt;::allocate (1,333 samples, 1.52%)</title><rect x="846.1" y="437" width="18.0" height="15.0" fill="rgb(223,103,21)" rx="2" ry="2" />
<text  x="849.13" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::tuple&lt;interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt;, true&gt; (37 samples, 0.04%)</title><rect x="946.7" y="581" width="0.5" height="15.0" fill="rgb(220,155,28)" rx="2" ry="2" />
<text  x="949.70" y="591.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;CTransaction const, std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (328 samples, 0.37%)</title><rect x="180.9" y="693" width="4.5" height="15.0" fill="rgb(210,18,26)" rx="2" ry="2" />
<text  x="183.93" y="703.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (15 samples, 0.02%)</title><rect x="142.4" y="453" width="0.2" height="15.0" fill="rgb(221,187,43)" rx="2" ry="2" />
<text  x="145.44" y="463.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, long&gt; (40 samples, 0.05%)</title><rect x="554.0" y="229" width="0.6" height="15.0" fill="rgb(218,200,54)" rx="2" ry="2" />
<text  x="557.05" y="239.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (44 samples, 0.05%)</title><rect x="162.8" y="517" width="0.6" height="15.0" fill="rgb(220,143,34)" rx="2" ry="2" />
<text  x="165.85" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;void*, CLockLocation&gt;*, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;::base (9 samples, 0.01%)</title><rect x="1148.8" y="741" width="0.1" height="15.0" fill="rgb(234,106,8)" rx="2" ry="2" />
<text  x="1151.82" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (343 samples, 0.39%)</title><rect x="957.8" y="581" width="4.6" height="15.0" fill="rgb(235,123,33)" rx="2" ry="2" />
<text  x="960.75" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, char*&gt;, unsigned long const&amp;, char*&amp;&gt; (14 samples, 0.02%)</title><rect x="849.0" y="309" width="0.2" height="15.0" fill="rgb(213,101,49)" rx="2" ry="2" />
<text  x="851.97" y="319.5" ></text>
</g>
<g >
<title>CDataStream::read (19 samples, 0.02%)</title><rect x="488.8" y="245" width="0.3" height="15.0" fill="rgb(232,221,6)" rx="2" ry="2" />
<text  x="491.84" y="255.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (11 samples, 0.01%)</title><rect x="548.8" y="85" width="0.1" height="15.0" fill="rgb(221,99,24)" rx="2" ry="2" />
<text  x="551.78" y="95.5" ></text>
</g>
<g >
<title>__memp_fput (30 samples, 0.03%)</title><rect x="172.0" y="485" width="0.4" height="15.0" fill="rgb(213,144,24)" rx="2" ry="2" />
<text  x="174.98" y="495.5" ></text>
</g>
<g >
<title>secp256k1_ecmult_context_build (34 samples, 0.04%)</title><rect x="1149.4" y="645" width="0.4" height="15.0" fill="rgb(223,120,53)" rx="2" ry="2" />
<text  x="1152.36" y="655.5" ></text>
</g>
<g >
<title>QuadRound (184 samples, 0.21%)</title><rect x="1140.6" y="165" width="2.5" height="15.0" fill="rgb(241,55,28)" rx="2" ry="2" />
<text  x="1143.64" y="175.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="1094.2" y="565" width="0.1" height="15.0" fill="rgb(232,69,18)" rx="2" ry="2" />
<text  x="1097.17" y="575.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (97 samples, 0.11%)</title><rect x="536.3" y="149" width="1.3" height="15.0" fill="rgb(251,33,16)" rx="2" ry="2" />
<text  x="539.27" y="159.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (24 samples, 0.03%)</title><rect x="532.0" y="101" width="0.3" height="15.0" fill="rgb(229,229,42)" rx="2" ry="2" />
<text  x="535.03" y="111.5" ></text>
</g>
<g >
<title>__lock_get_internal (19 samples, 0.02%)</title><rect x="119.0" y="373" width="0.3" height="15.0" fill="rgb(209,50,25)" rx="2" ry="2" />
<text  x="122.00" y="383.5" ></text>
</g>
<g >
<title>CDataStream::CDataStream (153 samples, 0.17%)</title><rect x="383.3" y="693" width="2.0" height="15.0" fill="rgb(253,39,42)" rx="2" ry="2" />
<text  x="386.26" y="703.5" ></text>
</g>
<g >
<title>__bam_search (46 samples, 0.05%)</title><rect x="103.3" y="405" width="0.6" height="15.0" fill="rgb(245,100,18)" rx="2" ry="2" />
<text  x="106.31" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (8 samples, 0.01%)</title><rect x="581.3" y="581" width="0.2" height="15.0" fill="rgb(246,168,8)" rx="2" ry="2" />
<text  x="584.35" y="591.5" ></text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; (8 samples, 0.01%)</title><rect x="1088.7" y="453" width="0.1" height="15.0" fill="rgb(244,36,53)" rx="2" ry="2" />
<text  x="1091.73" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_relocate (13 samples, 0.01%)</title><rect x="867.1" y="469" width="0.2" height="15.0" fill="rgb(241,39,35)" rx="2" ry="2" />
<text  x="870.08" y="479.5" ></text>
</g>
<g >
<title>CHashWriter::write (16 samples, 0.02%)</title><rect x="528.7" y="101" width="0.2" height="15.0" fill="rgb(230,32,18)" rx="2" ry="2" />
<text  x="531.71" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt; &gt;::_M_node_allocator (11 samples, 0.01%)</title><rect x="844.3" y="581" width="0.1" height="15.0" fill="rgb(241,223,4)" rx="2" ry="2" />
<text  x="847.27" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (26 samples, 0.03%)</title><rect x="1043.7" y="517" width="0.4" height="15.0" fill="rgb(211,204,1)" rx="2" ry="2" />
<text  x="1046.73" y="527.5" ></text>
</g>
<g >
<title>InitSignatureCache (69 samples, 0.08%)</title><rect x="31.3" y="709" width="0.9" height="15.0" fill="rgb(237,185,32)" rx="2" ry="2" />
<text  x="34.27" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID const&amp;&gt;, std::tuple&lt;&gt; &gt; (157 samples, 0.18%)</title><rect x="891.0" y="629" width="2.2" height="15.0" fill="rgb(237,21,8)" rx="2" ry="2" />
<text  x="894.04" y="639.5" ></text>
</g>
<g >
<title>WriteBE32 (8 samples, 0.01%)</title><rect x="16.5" y="741" width="0.2" height="15.0" fill="rgb(213,157,19)" rx="2" ry="2" />
<text  x="19.55" y="751.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, uint256&amp;&gt; (64 samples, 0.07%)</title><rect x="473.4" y="229" width="0.9" height="15.0" fill="rgb(221,33,18)" rx="2" ry="2" />
<text  x="476.40" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::__normal_iterator (9 samples, 0.01%)</title><rect x="555.3" y="277" width="0.1" height="15.0" fill="rgb(214,47,52)" rx="2" ry="2" />
<text  x="558.31" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_select_on_copy (27 samples, 0.03%)</title><rect x="999.6" y="485" width="0.4" height="15.0" fill="rgb(207,121,21)" rx="2" ry="2" />
<text  x="1002.65" y="495.5" ></text>
</g>
<g >
<title>__memp_fget (16 samples, 0.02%)</title><rect x="163.1" y="469" width="0.2" height="15.0" fill="rgb(208,195,22)" rx="2" ry="2" />
<text  x="166.12" y="479.5" ></text>
</g>
<g >
<title>__os_io (52 samples, 0.06%)</title><rect x="146.3" y="437" width="0.7" height="15.0" fill="rgb(210,149,33)" rx="2" ry="2" />
<text  x="149.32" y="447.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (35 samples, 0.04%)</title><rect x="549.2" y="245" width="0.5" height="15.0" fill="rgb(212,90,7)" rx="2" ry="2" />
<text  x="552.22" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (11 samples, 0.01%)</title><rect x="463.1" y="581" width="0.2" height="15.0" fill="rgb(212,69,51)" rx="2" ry="2" />
<text  x="466.11" y="591.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, CKeyID&amp;&gt; (13 samples, 0.01%)</title><rect x="395.2" y="597" width="0.2" height="15.0" fill="rgb(227,155,10)" rx="2" ry="2" />
<text  x="398.24" y="607.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::erase (910 samples, 1.04%)</title><rect x="588.1" y="629" width="12.3" height="15.0" fill="rgb(236,79,52)" rx="2" ry="2" />
<text  x="591.10" y="639.5" ></text>
</g>
<g >
<title>__memp_fput (27 samples, 0.03%)</title><rect x="162.1" y="485" width="0.4" height="15.0" fill="rgb(206,163,26)" rx="2" ry="2" />
<text  x="165.15" y="495.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (482 samples, 0.55%)</title><rect x="555.6" y="325" width="6.5" height="15.0" fill="rgb(249,79,2)" rx="2" ry="2" />
<text  x="558.58" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (59 samples, 0.07%)</title><rect x="1085.2" y="517" width="0.8" height="15.0" fill="rgb(215,208,10)" rx="2" ry="2" />
<text  x="1088.21" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (48 samples, 0.05%)</title><rect x="656.4" y="469" width="0.7" height="15.0" fill="rgb(226,219,14)" rx="2" ry="2" />
<text  x="659.41" y="479.5" ></text>
</g>
<g >
<title>CHashWriter::write (164 samples, 0.19%)</title><rect x="180.9" y="213" width="2.2" height="15.0" fill="rgb(228,226,27)" rx="2" ry="2" />
<text  x="183.93" y="223.5" ></text>
</g>
<g >
<title>CWalletTx::GetDepthInMainChain (205 samples, 0.23%)</title><rect x="55.0" y="661" width="2.8" height="15.0" fill="rgb(249,227,47)" rx="2" ry="2" />
<text  x="58.01" y="671.5" ></text>
</g>
<g >
<title>std::make_shared&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (328 samples, 0.37%)</title><rect x="180.9" y="709" width="4.5" height="15.0" fill="rgb(208,139,42)" rx="2" ry="2" />
<text  x="183.93" y="719.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="517" width="3.8" height="15.0" fill="rgb(207,98,46)" rx="2" ry="2" />
<text  x="1142.99" y="527.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="154.0" y="453" width="0.2" height="15.0" fill="rgb(220,37,14)" rx="2" ry="2" />
<text  x="157.05" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, unsigned long, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt; &gt;::find (101 samples, 0.12%)</title><rect x="1089.1" y="565" width="1.4" height="15.0" fill="rgb(226,122,3)" rx="2" ry="2" />
<text  x="1092.14" y="575.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (8 samples, 0.01%)</title><rect x="27.3" y="741" width="0.1" height="15.0" fill="rgb(248,96,26)" rx="2" ry="2" />
<text  x="30.26" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;long, CWalletTx*&gt; &gt; (116 samples, 0.13%)</title><rect x="964.5" y="613" width="1.6" height="15.0" fill="rgb(211,106,17)" rx="2" ry="2" />
<text  x="967.54" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (48 samples, 0.05%)</title><rect x="880.2" y="565" width="0.6" height="15.0" fill="rgb(244,165,0)" rx="2" ry="2" />
<text  x="883.20" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (14 samples, 0.02%)</title><rect x="678.7" y="453" width="0.2" height="15.0" fill="rgb(237,30,24)" rx="2" ry="2" />
<text  x="681.67" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;BerkeleyEnvironment&gt; &gt;::destroy&lt;BerkeleyEnvironment&gt; (11 samples, 0.01%)</title><rect x="180.8" y="549" width="0.1" height="15.0" fill="rgb(237,102,10)" rx="2" ry="2" />
<text  x="183.78" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKey&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (181 samples, 0.21%)</title><rect x="837.6" y="597" width="2.4" height="15.0" fill="rgb(224,138,13)" rx="2" ry="2" />
<text  x="840.56" y="607.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.01%)</title><rect x="87.3" y="293" width="0.2" height="15.0" fill="rgb(239,52,38)" rx="2" ry="2" />
<text  x="90.31" y="303.5" ></text>
</g>
<g >
<title>CRIPEMD160::Finalize (1,254 samples, 1.43%)</title><rect x="686.4" y="629" width="16.9" height="15.0" fill="rgb(242,193,20)" rx="2" ry="2" />
<text  x="689.38" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (18 samples, 0.02%)</title><rect x="142.6" y="453" width="0.3" height="15.0" fill="rgb(242,162,33)" rx="2" ry="2" />
<text  x="145.65" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (28 samples, 0.03%)</title><rect x="1051.2" y="597" width="0.4" height="15.0" fill="rgb(218,138,26)" rx="2" ry="2" />
<text  x="1054.20" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (45 samples, 0.05%)</title><rect x="480.6" y="325" width="0.6" height="15.0" fill="rgb(229,172,47)" rx="2" ry="2" />
<text  x="483.59" y="335.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (9 samples, 0.01%)</title><rect x="25.4" y="757" width="0.1" height="15.0" fill="rgb(206,165,8)" rx="2" ry="2" />
<text  x="28.42" y="767.5" ></text>
</g>
<g >
<title>std::distance&lt;unsigned char const*&gt; (8 samples, 0.01%)</title><rect x="816.2" y="421" width="0.1" height="15.0" fill="rgb(223,69,44)" rx="2" ry="2" />
<text  x="819.24" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, unsigned long, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (96 samples, 0.11%)</title><rect x="509.3" y="325" width="1.3" height="15.0" fill="rgb(221,107,52)" rx="2" ry="2" />
<text  x="512.32" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::end (15 samples, 0.02%)</title><rect x="907.8" y="581" width="0.2" height="15.0" fill="rgb(214,204,31)" rx="2" ry="2" />
<text  x="910.77" y="591.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (13 samples, 0.01%)</title><rect x="1090.9" y="549" width="0.2" height="15.0" fill="rgb(243,134,0)" rx="2" ry="2" />
<text  x="1093.91" y="559.5" ></text>
</g>
<g >
<title>__lock_get (409 samples, 0.47%)</title><rect x="336.5" y="581" width="5.5" height="15.0" fill="rgb(245,50,23)" rx="2" ry="2" />
<text  x="339.49" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~vector (8 samples, 0.01%)</title><rect x="1181.4" y="757" width="0.1" height="15.0" fill="rgb(206,2,39)" rx="2" ry="2" />
<text  x="1184.39" y="767.5" ></text>
</g>
<g >
<title>[unknown] (32 samples, 0.04%)</title><rect x="179.8" y="501" width="0.4" height="15.0" fill="rgb(242,8,49)" rx="2" ry="2" />
<text  x="182.80" y="511.5" ></text>
</g>
<g >
<title>__bam_cmp (28 samples, 0.03%)</title><rect x="71.2" y="469" width="0.3" height="15.0" fill="rgb(212,64,14)" rx="2" ry="2" />
<text  x="74.15" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_S_key (14 samples, 0.02%)</title><rect x="1080.5" y="533" width="0.2" height="15.0" fill="rgb(242,171,54)" rx="2" ry="2" />
<text  x="1083.48" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::max_size (23 samples, 0.03%)</title><rect x="513.1" y="293" width="0.3" height="15.0" fill="rgb(206,210,9)" rx="2" ry="2" />
<text  x="516.13" y="303.5" ></text>
</g>
<g >
<title>CHashWriter::write (12 samples, 0.01%)</title><rect x="562.5" y="293" width="0.2" height="15.0" fill="rgb(238,135,47)" rx="2" ry="2" />
<text  x="565.50" y="303.5" ></text>
</g>
<g >
<title>CMutableTransaction::CMutableTransaction&lt;CDataStream&gt; (3,806 samples, 4.35%)</title><rect x="466.5" y="453" width="51.3" height="15.0" fill="rgb(225,129,4)" rx="2" ry="2" />
<text  x="469.55" y="463.5" >CMuta..</text>
</g>
<g >
<title>__mutex_alloc_int (13 samples, 0.01%)</title><rect x="179.6" y="549" width="0.2" height="15.0" fill="rgb(229,92,35)" rx="2" ry="2" />
<text  x="182.58" y="559.5" ></text>
</g>
<g >
<title>CTransaction::Serialize&lt;CHashWriter&gt; (1,298 samples, 1.48%)</title><rect x="523.0" y="373" width="17.5" height="15.0" fill="rgb(237,196,21)" rx="2" ry="2" />
<text  x="526.00" y="383.5" ></text>
</g>
<g >
<title>_dl_start (21 samples, 0.02%)</title><rect x="1189.7" y="741" width="0.3" height="15.0" fill="rgb(251,173,51)" rx="2" ry="2" />
<text  x="1192.72" y="751.5" ></text>
</g>
<g >
<title>__bam_cmp (37 samples, 0.04%)</title><rect x="165.9" y="485" width="0.5" height="15.0" fill="rgb(218,22,43)" rx="2" ry="2" />
<text  x="168.85" y="495.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (8 samples, 0.01%)</title><rect x="120.8" y="421" width="0.1" height="15.0" fill="rgb(245,34,37)" rx="2" ry="2" />
<text  x="123.80" y="431.5" ></text>
</g>
<g >
<title>CheckTransaction (2,140 samples, 2.44%)</title><rect x="1021.6" y="677" width="28.8" height="15.0" fill="rgb(247,155,17)" rx="2" ry="2" />
<text  x="1024.57" y="687.5" >Ch..</text>
</g>
<g >
<title>std::_Destroy&lt;CMerkleTx*, CMerkleTx&gt; (18 samples, 0.02%)</title><rect x="602.4" y="613" width="0.3" height="15.0" fill="rgb(226,77,18)" rx="2" ry="2" />
<text  x="605.41" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.01%)</title><rect x="1082.9" y="533" width="0.1" height="15.0" fill="rgb(234,100,39)" rx="2" ry="2" />
<text  x="1085.89" y="543.5" ></text>
</g>
<g >
<title>std::map&lt;std::pair&lt;void*, void*&gt;, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::count (355 samples, 0.41%)</title><rect x="874.9" y="581" width="4.8" height="15.0" fill="rgb(224,99,14)" rx="2" ry="2" />
<text  x="877.90" y="591.5" ></text>
</g>
<g >
<title>__bam_iitem (15 samples, 0.02%)</title><rect x="104.5" y="421" width="0.2" height="15.0" fill="rgb(231,183,34)" rx="2" ry="2" />
<text  x="107.51" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::Chain::Lock, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt;::get_deleter (23 samples, 0.03%)</title><rect x="986.5" y="645" width="0.3" height="15.0" fill="rgb(252,10,45)" rx="2" ry="2" />
<text  x="989.46" y="655.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::UniqueLock (711 samples, 0.81%)</title><rect x="936.0" y="597" width="9.5" height="15.0" fill="rgb(246,174,0)" rx="2" ry="2" />
<text  x="938.96" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (26 samples, 0.03%)</title><rect x="559.1" y="261" width="0.3" height="15.0" fill="rgb(244,132,47)" rx="2" ry="2" />
<text  x="562.06" y="271.5" ></text>
</g>
<g >
<title>CHash160::Finalize (127 samples, 0.15%)</title><rect x="1121.8" y="645" width="1.7" height="15.0" fill="rgb(212,186,7)" rx="2" ry="2" />
<text  x="1124.82" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char* const&amp;&gt;, std::tuple&lt;&gt; &gt; (26 samples, 0.03%)</title><rect x="679.5" y="485" width="0.4" height="15.0" fill="rgb(236,182,44)" rx="2" ry="2" />
<text  x="682.51" y="495.5" ></text>
</g>
<g >
<title>CHash256::Finalize (101 samples, 0.12%)</title><rect x="541.4" y="389" width="1.4" height="15.0" fill="rgb(220,103,32)" rx="2" ry="2" />
<text  x="544.39" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::find (180 samples, 0.21%)</title><rect x="932.4" y="645" width="2.4" height="15.0" fill="rgb(246,206,2)" rx="2" ry="2" />
<text  x="935.39" y="655.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.02%)</title><rect x="1146.3" y="709" width="0.3" height="15.0" fill="rgb(245,45,20)" rx="2" ry="2" />
<text  x="1149.34" y="719.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (21 samples, 0.02%)</title><rect x="45.3" y="549" width="0.3" height="15.0" fill="rgb(216,197,29)" rx="2" ry="2" />
<text  x="48.35" y="559.5" ></text>
</g>
<g >
<title>CPubKey::end (9 samples, 0.01%)</title><rect x="704.4" y="677" width="0.1" height="15.0" fill="rgb(221,84,53)" rx="2" ry="2" />
<text  x="707.41" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt; (14 samples, 0.02%)</title><rect x="946.5" y="565" width="0.2" height="15.0" fill="rgb(238,105,47)" rx="2" ry="2" />
<text  x="949.51" y="575.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long, CWalletTx*&gt; &gt; (12 samples, 0.01%)</title><rect x="967.3" y="613" width="0.2" height="15.0" fill="rgb(228,61,10)" rx="2" ry="2" />
<text  x="970.35" y="623.5" ></text>
</g>
<g >
<title>COutPoint::IsNull (18 samples, 0.02%)</title><rect x="1022.8" y="645" width="0.3" height="15.0" fill="rgb(212,120,4)" rx="2" ry="2" />
<text  x="1025.84" y="655.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (39 samples, 0.04%)</title><rect x="163.7" y="517" width="0.5" height="15.0" fill="rgb(254,41,24)" rx="2" ry="2" />
<text  x="166.71" y="527.5" ></text>
</g>
<g >
<title>CScriptWitness::CScriptWitness (12 samples, 0.01%)</title><rect x="525.2" y="293" width="0.2" height="15.0" fill="rgb(212,164,6)" rx="2" ry="2" />
<text  x="528.25" y="303.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (19 samples, 0.02%)</title><rect x="112.4" y="389" width="0.3" height="15.0" fill="rgb(225,60,38)" rx="2" ry="2" />
<text  x="115.45" y="399.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;void*, void*&gt; &gt;::operator (42 samples, 0.05%)</title><rect x="833.7" y="517" width="0.6" height="15.0" fill="rgb(219,158,9)" rx="2" ry="2" />
<text  x="836.73" y="527.5" ></text>
</g>
<g >
<title>ReadLE32 (35 samples, 0.04%)</title><rect x="763.7" y="549" width="0.5" height="15.0" fill="rgb(245,59,43)" rx="2" ry="2" />
<text  x="766.75" y="559.5" ></text>
</g>
<g >
<title>CTxOut::Serialize&lt;CSizeComputer&gt; (183 samples, 0.21%)</title><rect x="1033.5" y="517" width="2.5" height="15.0" fill="rgb(220,203,6)" rx="2" ry="2" />
<text  x="1036.50" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;CKeyID, CKeyMetadata, SaltedIDHasher, std::equal_to&lt;CKeyID&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt; &gt;::operator[] (590 samples, 0.67%)</title><rect x="885.5" y="661" width="7.9" height="15.0" fill="rgb(223,162,24)" rx="2" ry="2" />
<text  x="888.47" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.01%)</title><rect x="936.8" y="501" width="0.2" height="15.0" fill="rgb(243,213,19)" rx="2" ry="2" />
<text  x="939.82" y="511.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="849.4" y="293" width="0.1" height="15.0" fill="rgb(211,130,10)" rx="2" ry="2" />
<text  x="852.40" y="303.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="396.0" y="469" width="0.1" height="15.0" fill="rgb(252,26,21)" rx="2" ry="2" />
<text  x="398.97" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_Vector_impl::~_Vector_impl (19 samples, 0.02%)</title><rect x="604.9" y="597" width="0.2" height="15.0" fill="rgb(225,38,28)" rx="2" ry="2" />
<text  x="607.85" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="165.2" y="533" width="0.1" height="15.0" fill="rgb(222,56,2)" rx="2" ry="2" />
<text  x="168.15" y="543.5" ></text>
</g>
<g >
<title>__os_malloc (24 samples, 0.03%)</title><rect x="145.0" y="421" width="0.3" height="15.0" fill="rgb(217,143,36)" rx="2" ry="2" />
<text  x="147.99" y="431.5" ></text>
</g>
<g >
<title>__memp_alloc (208 samples, 0.24%)</title><rect x="96.0" y="389" width="2.8" height="15.0" fill="rgb(251,142,10)" rx="2" ry="2" />
<text  x="98.98" y="399.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (23 samples, 0.03%)</title><rect x="130.5" y="469" width="0.3" height="15.0" fill="rgb(251,25,38)" rx="2" ry="2" />
<text  x="133.50" y="479.5" ></text>
</g>
<g >
<title>__db_lput (29 samples, 0.03%)</title><rect x="84.3" y="421" width="0.4" height="15.0" fill="rgb(205,149,4)" rx="2" ry="2" />
<text  x="87.28" y="431.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (25 samples, 0.03%)</title><rect x="104.2" y="421" width="0.3" height="15.0" fill="rgb(233,55,25)" rx="2" ry="2" />
<text  x="107.17" y="431.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock (37 samples, 0.04%)</title><rect x="985.8" y="565" width="0.5" height="15.0" fill="rgb(225,112,33)" rx="2" ry="2" />
<text  x="988.81" y="575.5" ></text>
</g>
<g >
<title>__dbc_iget (533 samples, 0.61%)</title><rect x="81.5" y="485" width="7.2" height="15.0" fill="rgb(231,170,37)" rx="2" ry="2" />
<text  x="84.48" y="495.5" ></text>
</g>
<g >
<title>ReadBE64 (23 samples, 0.03%)</title><rect x="1189.1" y="565" width="0.3" height="15.0" fill="rgb(240,72,46)" rx="2" ry="2" />
<text  x="1192.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (9 samples, 0.01%)</title><rect x="885.8" y="597" width="0.1" height="15.0" fill="rgb(250,198,5)" rx="2" ry="2" />
<text  x="888.80" y="607.5" ></text>
</g>
<g >
<title>pop_lock (29 samples, 0.03%)</title><rect x="734.7" y="613" width="0.4" height="15.0" fill="rgb(247,47,26)" rx="2" ry="2" />
<text  x="737.75" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (7,614 samples, 8.70%)</title><rect x="464.6" y="549" width="102.6" height="15.0" fill="rgb(226,56,26)" rx="2" ry="2" />
<text  x="467.55" y="559.5" >std::__share..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::deallocate (11 samples, 0.01%)</title><rect x="816.9" y="405" width="0.2" height="15.0" fill="rgb(214,181,12)" rx="2" ry="2" />
<text  x="819.91" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (104 samples, 0.12%)</title><rect x="1087.6" y="517" width="1.4" height="15.0" fill="rgb(217,147,47)" rx="2" ry="2" />
<text  x="1090.61" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CWalletTx&gt;, false, true&gt;::operator (12 samples, 0.01%)</title><rect x="963.3" y="661" width="0.2" height="15.0" fill="rgb(217,48,22)" rx="2" ry="2" />
<text  x="966.33" y="671.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (113 samples, 0.13%)</title><rect x="536.1" y="197" width="1.6" height="15.0" fill="rgb(207,220,48)" rx="2" ry="2" />
<text  x="539.14" y="207.5" ></text>
</g>
<g >
<title>std::bitset&lt;8ul&gt;::bitset (18 samples, 0.02%)</title><rect x="1016.6" y="645" width="0.2" height="15.0" fill="rgb(237,143,7)" rx="2" ry="2" />
<text  x="1019.59" y="655.5" ></text>
</g>
<g >
<title>__lock_get (14 samples, 0.02%)</title><rect x="155.2" y="453" width="0.2" height="15.0" fill="rgb(247,24,23)" rx="2" ry="2" />
<text  x="158.21" y="463.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (25 samples, 0.03%)</title><rect x="164.7" y="533" width="0.4" height="15.0" fill="rgb(213,162,20)" rx="2" ry="2" />
<text  x="167.75" y="543.5" ></text>
</g>
<g >
<title>zero_after_free_allocator&lt;char&gt;::~zero_after_free_allocator (41 samples, 0.05%)</title><rect x="391.0" y="629" width="0.6" height="15.0" fill="rgb(218,165,21)" rx="2" ry="2" />
<text  x="394.04" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_get_insert_equal_pos (14 samples, 0.02%)</title><rect x="1080.0" y="533" width="0.2" height="15.0" fill="rgb(249,180,14)" rx="2" ry="2" />
<text  x="1083.05" y="543.5" ></text>
</g>
<g >
<title>__db_vrfy_pgset_get (82 samples, 0.09%)</title><rect x="102.1" y="485" width="1.1" height="15.0" fill="rgb(232,18,29)" rx="2" ry="2" />
<text  x="105.07" y="495.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (62 samples, 0.07%)</title><rect x="447.3" y="549" width="0.9" height="15.0" fill="rgb(209,222,28)" rx="2" ry="2" />
<text  x="450.32" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (15 samples, 0.02%)</title><rect x="561.5" y="277" width="0.2" height="15.0" fill="rgb(222,145,33)" rx="2" ry="2" />
<text  x="564.46" y="287.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (18 samples, 0.02%)</title><rect x="562.4" y="325" width="0.3" height="15.0" fill="rgb(209,169,23)" rx="2" ry="2" />
<text  x="565.41" y="335.5" ></text>
</g>
<g >
<title>__memp_fget (47 samples, 0.05%)</title><rect x="156.4" y="485" width="0.6" height="15.0" fill="rgb(244,128,6)" rx="2" ry="2" />
<text  x="159.39" y="495.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (27 samples, 0.03%)</title><rect x="151.8" y="453" width="0.4" height="15.0" fill="rgb(227,53,5)" rx="2" ry="2" />
<text  x="154.82" y="463.5" ></text>
</g>
<g >
<title>__memp_fget (28 samples, 0.03%)</title><rect x="66.7" y="453" width="0.3" height="15.0" fill="rgb(211,85,17)" rx="2" ry="2" />
<text  x="69.65" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (15 samples, 0.02%)</title><rect x="496.9" y="309" width="0.2" height="15.0" fill="rgb(234,108,53)" rx="2" ry="2" />
<text  x="499.95" y="319.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (33 samples, 0.04%)</title><rect x="92.9" y="357" width="0.5" height="15.0" fill="rgb(239,96,25)" rx="2" ry="2" />
<text  x="95.92" y="367.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="1132.9" y="645" width="0.2" height="15.0" fill="rgb(225,90,25)" rx="2" ry="2" />
<text  x="1135.93" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CWalletTx&gt;, true&gt;::_M_next (41 samples, 0.05%)</title><rect x="992.6" y="565" width="0.5" height="15.0" fill="rgb(210,157,21)" rx="2" ry="2" />
<text  x="995.56" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase_aux (76 samples, 0.09%)</title><rect x="907.2" y="597" width="1.0" height="15.0" fill="rgb(208,196,9)" rx="2" ry="2" />
<text  x="910.16" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;char* const, unsigned long&gt; &gt;::_M_v (11 samples, 0.01%)</title><rect x="1089.8" y="469" width="0.2" height="15.0" fill="rgb(208,226,16)" rx="2" ry="2" />
<text  x="1092.83" y="479.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (8 samples, 0.01%)</title><rect x="469.2" y="325" width="0.1" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="472.17" y="335.5" ></text>
</g>
<g >
<title>CScript::clear (16 samples, 0.02%)</title><rect x="535.0" y="277" width="0.2" height="15.0" fill="rgb(234,214,27)" rx="2" ry="2" />
<text  x="537.99" y="287.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (47 samples, 0.05%)</title><rect x="532.8" y="245" width="0.6" height="15.0" fill="rgb(218,127,11)" rx="2" ry="2" />
<text  x="535.77" y="255.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (20 samples, 0.02%)</title><rect x="937.6" y="517" width="0.3" height="15.0" fill="rgb(230,127,48)" rx="2" ry="2" />
<text  x="940.59" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_assign (38 samples, 0.04%)</title><rect x="608.6" y="629" width="0.5" height="15.0" fill="rgb(215,160,49)" rx="2" ry="2" />
<text  x="611.61" y="639.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (67 samples, 0.08%)</title><rect x="1034.1" y="405" width="0.9" height="15.0" fill="rgb(230,227,43)" rx="2" ry="2" />
<text  x="1037.12" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.01%)</title><rect x="957.5" y="565" width="0.1" height="15.0" fill="rgb(249,193,37)" rx="2" ry="2" />
<text  x="960.47" y="575.5" ></text>
</g>
<g >
<title>std::make_pair&lt;COutPoint const&amp;, uint256 const&amp;&gt; (43 samples, 0.05%)</title><rect x="905.4" y="629" width="0.5" height="15.0" fill="rgb(220,176,34)" rx="2" ry="2" />
<text  x="908.37" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;::_Node_iterator (8 samples, 0.01%)</title><rect x="1080.9" y="533" width="0.1" height="15.0" fill="rgb(241,129,30)" rx="2" ry="2" />
<text  x="1083.90" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (24 samples, 0.03%)</title><rect x="681.4" y="501" width="0.3" height="15.0" fill="rgb(253,53,4)" rx="2" ry="2" />
<text  x="684.41" y="511.5" ></text>
</g>
<g >
<title>__dbc_close (35 samples, 0.04%)</title><rect x="157.6" y="549" width="0.5" height="15.0" fill="rgb(219,138,52)" rx="2" ry="2" />
<text  x="160.63" y="559.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (35 samples, 0.04%)</title><rect x="531.3" y="101" width="0.5" height="15.0" fill="rgb(205,80,54)" rx="2" ry="2" />
<text  x="534.29" y="111.5" ></text>
</g>
<g >
<title>SaltedIDHasher::operator (95 samples, 0.11%)</title><rect x="889.7" y="613" width="1.3" height="15.0" fill="rgb(206,25,42)" rx="2" ry="2" />
<text  x="892.70" y="623.5" ></text>
</g>
<g >
<title>AppInitMain (32 samples, 0.04%)</title><rect x="1145.8" y="693" width="0.4" height="15.0" fill="rgb(236,45,27)" rx="2" ry="2" />
<text  x="1148.81" y="703.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (12 samples, 0.01%)</title><rect x="1034.8" y="341" width="0.2" height="15.0" fill="rgb(236,158,45)" rx="2" ry="2" />
<text  x="1037.84" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40 samples, 0.05%)</title><rect x="48.3" y="549" width="0.6" height="15.0" fill="rgb(231,123,24)" rx="2" ry="2" />
<text  x="51.31" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTransaction&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (7,403 samples, 8.45%)</title><rect x="465.9" y="501" width="99.7" height="15.0" fill="rgb(230,218,54)" rx="2" ry="2" />
<text  x="468.89" y="511.5" >std::allocat..</text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;::_Node_iterator (17 samples, 0.02%)</title><rect x="914.0" y="597" width="0.3" height="15.0" fill="rgb(206,204,9)" rx="2" ry="2" />
<text  x="917.02" y="607.5" ></text>
</g>
<g >
<title>__db_put (308 samples, 0.35%)</title><rect x="168.9" y="565" width="4.1" height="15.0" fill="rgb(214,138,19)" rx="2" ry="2" />
<text  x="171.87" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt;::_M_next (73 samples, 0.08%)</title><rect x="922.7" y="517" width="1.0" height="15.0" fill="rgb(214,39,47)" rx="2" ry="2" />
<text  x="925.71" y="527.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (89 samples, 0.10%)</title><rect x="536.3" y="117" width="1.2" height="15.0" fill="rgb(231,90,23)" rx="2" ry="2" />
<text  x="539.31" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (2,232 samples, 2.55%)</title><rect x="414.3" y="533" width="30.1" height="15.0" fill="rgb(206,15,23)" rx="2" ry="2" />
<text  x="417.28" y="543.5" >st..</text>
</g>
<g >
<title>__db_get (263 samples, 0.30%)</title><rect x="69.7" y="549" width="3.6" height="15.0" fill="rgb(206,100,36)" rx="2" ry="2" />
<text  x="72.73" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (27 samples, 0.03%)</title><rect x="128.1" y="485" width="0.4" height="15.0" fill="rgb(236,110,15)" rx="2" ry="2" />
<text  x="131.13" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_ptr (12 samples, 0.01%)</title><rect x="905.2" y="549" width="0.2" height="15.0" fill="rgb(237,1,6)" rx="2" ry="2" />
<text  x="908.21" y="559.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (12 samples, 0.01%)</title><rect x="582.2" y="597" width="0.1" height="15.0" fill="rgb(209,50,47)" rx="2" ry="2" />
<text  x="585.18" y="607.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (24 samples, 0.03%)</title><rect x="1141.7" y="149" width="0.3" height="15.0" fill="rgb(207,6,30)" rx="2" ry="2" />
<text  x="1144.70" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;COutPoint&gt;::_M_valptr (14 samples, 0.02%)</title><rect x="1040.4" y="581" width="0.2" height="15.0" fill="rgb(237,118,3)" rx="2" ry="2" />
<text  x="1043.44" y="591.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (8 samples, 0.01%)</title><rect x="581.5" y="565" width="0.1" height="15.0" fill="rgb(211,134,7)" rx="2" ry="2" />
<text  x="584.46" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_insert_unique&lt;CBlockIndex* const&amp;&gt; (106 samples, 0.12%)</title><rect x="51.1" y="661" width="1.4" height="15.0" fill="rgb(235,125,41)" rx="2" ry="2" />
<text  x="54.12" y="671.5" ></text>
</g>
<g >
<title>__db_get (16 samples, 0.02%)</title><rect x="1143.9" y="517" width="0.2" height="15.0" fill="rgb(208,119,14)" rx="2" ry="2" />
<text  x="1146.88" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (8 samples, 0.01%)</title><rect x="601.0" y="549" width="0.1" height="15.0" fill="rgb(236,207,54)" rx="2" ry="2" />
<text  x="604.02" y="559.5" ></text>
</g>
<g >
<title>uint256::uint256 (10 samples, 0.01%)</title><rect x="1183.6" y="757" width="0.1" height="15.0" fill="rgb(206,119,44)" rx="2" ry="2" />
<text  x="1186.56" y="767.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void* const&amp;, void*&amp;&gt; (24 samples, 0.03%)</title><rect x="873.2" y="581" width="0.3" height="15.0" fill="rgb(249,54,36)" rx="2" ry="2" />
<text  x="876.20" y="591.5" ></text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (164 samples, 0.19%)</title><rect x="183.1" y="229" width="2.3" height="15.0" fill="rgb(237,177,52)" rx="2" ry="2" />
<text  x="186.14" y="239.5" ></text>
</g>
<g >
<title>__db_lput (18 samples, 0.02%)</title><rect x="109.5" y="405" width="0.2" height="15.0" fill="rgb(215,161,18)" rx="2" ry="2" />
<text  x="112.47" y="415.5" ></text>
</g>
<g >
<title>std::_List_node&lt;LockedPool::LockedPageArena&gt;::_M_valptr (10 samples, 0.01%)</title><rect x="1090.5" y="565" width="0.2" height="15.0" fill="rgb(218,56,46)" rx="2" ry="2" />
<text  x="1093.52" y="575.5" ></text>
</g>
<g >
<title>CDataStream::read (13 samples, 0.01%)</title><rect x="610.3" y="629" width="0.1" height="15.0" fill="rgb(252,125,25)" rx="2" ry="2" />
<text  x="613.26" y="639.5" ></text>
</g>
<g >
<title>__mutex_alloc_int (9 samples, 0.01%)</title><rect x="111.9" y="373" width="0.1" height="15.0" fill="rgb(224,111,20)" rx="2" ry="2" />
<text  x="114.91" y="383.5" ></text>
</g>
<g >
<title>CWallet::IsCrypted (18 samples, 0.02%)</title><rect x="741.1" y="645" width="0.3" height="15.0" fill="rgb(237,161,28)" rx="2" ry="2" />
<text  x="744.12" y="655.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (33 samples, 0.04%)</title><rect x="882.4" y="661" width="0.4" height="15.0" fill="rgb(235,49,17)" rx="2" ry="2" />
<text  x="885.37" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (11 samples, 0.01%)</title><rect x="550.5" y="293" width="0.2" height="15.0" fill="rgb(212,158,50)" rx="2" ry="2" />
<text  x="553.53" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (223 samples, 0.25%)</title><rect x="568.4" y="533" width="3.0" height="15.0" fill="rgb(211,13,13)" rx="2" ry="2" />
<text  x="571.40" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;CKeyID const, CKey&gt;, false, true&gt;::operator (8 samples, 0.01%)</title><rect x="868.8" y="597" width="0.1" height="15.0" fill="rgb(212,194,34)" rx="2" ry="2" />
<text  x="871.80" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_max_size (29 samples, 0.03%)</title><rect x="668.5" y="613" width="0.4" height="15.0" fill="rgb(250,0,9)" rx="2" ry="2" />
<text  x="671.54" y="623.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (10 samples, 0.01%)</title><rect x="548.9" y="101" width="0.2" height="15.0" fill="rgb(211,102,39)" rx="2" ry="2" />
<text  x="551.93" y="111.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (1,200 samples, 1.37%)</title><rect x="708.6" y="581" width="16.1" height="15.0" fill="rgb(234,84,49)" rx="2" ry="2" />
<text  x="711.56" y="591.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::Enter (684 samples, 0.78%)</title><rect x="936.1" y="581" width="9.2" height="15.0" fill="rgb(249,172,3)" rx="2" ry="2" />
<text  x="939.12" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_S_relocate (21 samples, 0.02%)</title><rect x="668.0" y="629" width="0.3" height="15.0" fill="rgb(229,184,9)" rx="2" ry="2" />
<text  x="670.99" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (12 samples, 0.01%)</title><rect x="525.8" y="261" width="0.1" height="15.0" fill="rgb(215,194,23)" rx="2" ry="2" />
<text  x="528.79" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (75 samples, 0.09%)</title><rect x="1043.1" y="581" width="1.0" height="15.0" fill="rgb(237,64,1)" rx="2" ry="2" />
<text  x="1046.07" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (11 samples, 0.01%)</title><rect x="180.8" y="581" width="0.1" height="15.0" fill="rgb(248,189,14)" rx="2" ry="2" />
<text  x="183.78" y="591.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="150.7" y="421" width="0.1" height="15.0" fill="rgb(244,26,41)" rx="2" ry="2" />
<text  x="153.70" y="431.5" ></text>
</g>
<g >
<title>CKey::~CKey (998 samples, 1.14%)</title><rect x="671.0" y="677" width="13.5" height="15.0" fill="rgb(226,96,3)" rx="2" ry="2" />
<text  x="674.01" y="687.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn&gt; (317 samples, 0.36%)</title><rect x="545.5" y="293" width="4.2" height="15.0" fill="rgb(236,209,32)" rx="2" ry="2" />
<text  x="548.46" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (12 samples, 0.01%)</title><rect x="1049.6" y="645" width="0.1" height="15.0" fill="rgb(230,66,30)" rx="2" ry="2" />
<text  x="1052.55" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char* const&amp;&gt; (12 samples, 0.01%)</title><rect x="679.6" y="469" width="0.2" height="15.0" fill="rgb(230,123,11)" rx="2" ry="2" />
<text  x="682.60" y="479.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (164 samples, 0.19%)</title><rect x="183.1" y="245" width="2.3" height="15.0" fill="rgb(206,43,22)" rx="2" ry="2" />
<text  x="186.14" y="255.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::emplace&lt;unsigned long const&amp;, char*&amp;&gt; (159 samples, 0.18%)</title><rect x="848.5" y="389" width="2.1" height="15.0" fill="rgb(232,149,3)" rx="2" ry="2" />
<text  x="851.47" y="399.5" ></text>
</g>
<g >
<title>__memp_alloc (39 samples, 0.04%)</title><rect x="101.4" y="373" width="0.5" height="15.0" fill="rgb(240,222,51)" rx="2" ry="2" />
<text  x="104.35" y="383.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, unsigned char*, unsigned char*&gt; (10 samples, 0.01%)</title><rect x="1098.6" y="533" width="0.1" height="15.0" fill="rgb(232,193,16)" rx="2" ry="2" />
<text  x="1101.59" y="543.5" ></text>
</g>
<g >
<title>std::map&lt;std::pair&lt;void*, void*&gt;, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::count (272 samples, 0.31%)</title><rect x="831.3" y="565" width="3.7" height="15.0" fill="rgb(251,94,52)" rx="2" ry="2" />
<text  x="834.29" y="575.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (441 samples, 0.50%)</title><rect x="422.8" y="517" width="5.9" height="15.0" fill="rgb(216,107,23)" rx="2" ry="2" />
<text  x="425.77" y="527.5" ></text>
</g>
<g >
<title>_mm_sha256rnds2_epu32 (98 samples, 0.11%)</title><rect x="1116.7" y="229" width="1.3" height="15.0" fill="rgb(249,139,46)" rx="2" ry="2" />
<text  x="1119.69" y="239.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.01%)</title><rect x="101.9" y="293" width="0.1" height="15.0" fill="rgb(221,216,28)" rx="2" ry="2" />
<text  x="104.89" y="303.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;&amp;&gt; (72 samples, 0.08%)</title><rect x="571.9" y="629" width="1.0" height="15.0" fill="rgb(218,69,13)" rx="2" ry="2" />
<text  x="574.93" y="639.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock (35 samples, 0.04%)</title><rect x="881.3" y="597" width="0.5" height="15.0" fill="rgb(230,73,35)" rx="2" ry="2" />
<text  x="884.34" y="607.5" ></text>
</g>
<g >
<title>CSHA256::Write (20 samples, 0.02%)</title><rect x="524.2" y="261" width="0.2" height="15.0" fill="rgb(207,191,2)" rx="2" ry="2" />
<text  x="527.16" y="271.5" ></text>
</g>
<g >
<title>CHash256::Write (386 samples, 0.44%)</title><rect x="1113.6" y="293" width="5.2" height="15.0" fill="rgb(211,41,48)" rx="2" ry="2" />
<text  x="1116.56" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_insert_dispatch&lt;unsigned char const*&gt; (258 samples, 0.29%)</title><rect x="1096.8" y="661" width="3.4" height="15.0" fill="rgb(245,190,29)" rx="2" ry="2" />
<text  x="1099.76" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (11 samples, 0.01%)</title><rect x="819.0" y="549" width="0.2" height="15.0" fill="rgb(227,140,22)" rx="2" ry="2" />
<text  x="822.04" y="559.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (32 samples, 0.04%)</title><rect x="396.1" y="469" width="0.5" height="15.0" fill="rgb(233,103,22)" rx="2" ry="2" />
<text  x="399.12" y="479.5" ></text>
</g>
<g >
<title>__os_io (46 samples, 0.05%)</title><rect x="178.8" y="517" width="0.6" height="15.0" fill="rgb(223,74,13)" rx="2" ry="2" />
<text  x="181.83" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKey&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (31 samples, 0.04%)</title><rect x="839.1" y="549" width="0.5" height="15.0" fill="rgb(223,51,52)" rx="2" ry="2" />
<text  x="842.13" y="559.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; (1,560 samples, 1.78%)</title><rect x="494.3" y="405" width="21.0" height="15.0" fill="rgb(227,28,30)" rx="2" ry="2" />
<text  x="497.32" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (10 samples, 0.01%)</title><rect x="49.1" y="517" width="0.1" height="15.0" fill="rgb(216,64,53)" rx="2" ry="2" />
<text  x="52.07" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;char*, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::hash&lt;char*&gt;, std::equal_to&lt;char*&gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; &gt;::emplace&lt;char*, std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt;&amp;&gt; (196 samples, 0.22%)</title><rect x="853.9" y="389" width="2.6" height="15.0" fill="rgb(209,21,10)" rx="2" ry="2" />
<text  x="856.86" y="399.5" ></text>
</g>
<g >
<title>CTransaction::ComputeWitnessHash (284 samples, 0.32%)</title><rect x="1140.0" y="565" width="3.8" height="15.0" fill="rgb(236,93,4)" rx="2" ry="2" />
<text  x="1142.99" y="575.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (16 samples, 0.02%)</title><rect x="153.1" y="485" width="0.2" height="15.0" fill="rgb(239,25,2)" rx="2" ry="2" />
<text  x="156.09" y="495.5" ></text>
</g>
<g >
<title>CChainState::PruneBlockIndexCandidates (17 samples, 0.02%)</title><rect x="33.0" y="693" width="0.2" height="15.0" fill="rgb(226,146,24)" rx="2" ry="2" />
<text  x="35.99" y="703.5" ></text>
</g>
<g >
<title>CSipHasher::Finalize (21 samples, 0.02%)</title><rect x="841.9" y="565" width="0.3" height="15.0" fill="rgb(208,65,42)" rx="2" ry="2" />
<text  x="844.91" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header (15 samples, 0.02%)</title><rect x="1017.3" y="613" width="0.2" height="15.0" fill="rgb(252,6,12)" rx="2" ry="2" />
<text  x="1020.34" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_valptr (33 samples, 0.04%)</title><rect x="981.4" y="597" width="0.4" height="15.0" fill="rgb(246,187,15)" rx="2" ry="2" />
<text  x="984.38" y="607.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (16 samples, 0.02%)</title><rect x="1143.9" y="533" width="0.2" height="15.0" fill="rgb(208,131,39)" rx="2" ry="2" />
<text  x="1146.88" y="543.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_unlock (9 samples, 0.01%)</title><rect x="735.3" y="581" width="0.1" height="15.0" fill="rgb(214,228,45)" rx="2" ry="2" />
<text  x="738.29" y="591.5" ></text>
</g>
<g >
<title>CHashWriter::write (17 samples, 0.02%)</title><rect x="538.5" y="181" width="0.2" height="15.0" fill="rgb(206,67,53)" rx="2" ry="2" />
<text  x="541.49" y="191.5" ></text>
</g>
<g >
<title>std::make_pair&lt;void* const&amp;, void*&amp;&gt; (14 samples, 0.02%)</title><rect x="830.5" y="565" width="0.2" height="15.0" fill="rgb(233,99,26)" rx="2" ry="2" />
<text  x="833.54" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (15 samples, 0.02%)</title><rect x="824.9" y="565" width="0.2" height="15.0" fill="rgb(205,94,27)" rx="2" ry="2" />
<text  x="827.89" y="575.5" ></text>
</g>
<g >
<title>CTransaction::ComputeHash (1,575 samples, 1.80%)</title><rect x="519.3" y="437" width="21.2" height="15.0" fill="rgb(218,26,40)" rx="2" ry="2" />
<text  x="522.26" y="447.5" ></text>
</g>
<g >
<title>CValidationState::~CValidationState (20 samples, 0.02%)</title><rect x="705.1" y="677" width="0.3" height="15.0" fill="rgb(238,210,40)" rx="2" ry="2" />
<text  x="708.09" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;char*, unsigned long&amp;&gt; (50 samples, 0.06%)</title><rect x="616.5" y="469" width="0.6" height="15.0" fill="rgb(254,62,39)" rx="2" ry="2" />
<text  x="619.45" y="479.5" ></text>
</g>
<g >
<title>base_uint&lt;256u&gt;::base_uint (8 samples, 0.01%)</title><rect x="50.1" y="645" width="0.1" height="15.0" fill="rgb(251,31,51)" rx="2" ry="2" />
<text  x="53.09" y="655.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, long&gt; (85 samples, 0.10%)</title><rect x="537.7" y="245" width="1.2" height="15.0" fill="rgb(230,93,9)" rx="2" ry="2" />
<text  x="540.74" y="255.5" ></text>
</g>
<g >
<title>__bam_search (31 samples, 0.04%)</title><rect x="163.7" y="485" width="0.4" height="15.0" fill="rgb(236,28,46)" rx="2" ry="2" />
<text  x="166.71" y="495.5" ></text>
</g>
<g >
<title>std::mutex::unlock (15 samples, 0.02%)</title><rect x="1091.1" y="565" width="0.2" height="15.0" fill="rgb(250,171,37)" rx="2" ry="2" />
<text  x="1094.13" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::size (10 samples, 0.01%)</title><rect x="1003.2" y="517" width="0.1" height="15.0" fill="rgb(214,36,42)" rx="2" ry="2" />
<text  x="1006.19" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.01%)</title><rect x="1163.3" y="757" width="0.1" height="15.0" fill="rgb(236,28,14)" rx="2" ry="2" />
<text  x="1166.33" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt;::construct&lt;std::pair&lt;COutPoint const, uint256&gt;, std::pair&lt;COutPoint, uint256&gt; &gt; (50 samples, 0.06%)</title><rect x="929.3" y="533" width="0.6" height="15.0" fill="rgb(243,200,53)" rx="2" ry="2" />
<text  x="932.26" y="543.5" ></text>
</g>
<g >
<title>__bam_defcmp (16 samples, 0.02%)</title><rect x="170.4" y="469" width="0.2" height="15.0" fill="rgb(222,93,51)" rx="2" ry="2" />
<text  x="173.38" y="479.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::Compare (68 samples, 0.08%)</title><rect x="37.2" y="629" width="0.9" height="15.0" fill="rgb(221,16,52)" rx="2" ry="2" />
<text  x="40.19" y="639.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (164 samples, 0.19%)</title><rect x="183.1" y="357" width="2.3" height="15.0" fill="rgb(219,10,49)" rx="2" ry="2" />
<text  x="186.14" y="367.5" ></text>
</g>
<g >
<title>__lock_get (22 samples, 0.03%)</title><rect x="114.9" y="389" width="0.3" height="15.0" fill="rgb(226,31,34)" rx="2" ry="2" />
<text  x="117.86" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="667.9" y="613" width="0.1" height="15.0" fill="rgb(241,24,7)" rx="2" ry="2" />
<text  x="670.88" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (47 samples, 0.05%)</title><rect x="142.9" y="453" width="0.6" height="15.0" fill="rgb(235,9,30)" rx="2" ry="2" />
<text  x="145.89" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (29 samples, 0.03%)</title><rect x="1087.2" y="501" width="0.4" height="15.0" fill="rgb(221,97,38)" rx="2" ry="2" />
<text  x="1090.22" y="511.5" ></text>
</g>
<g >
<title>CBlockIndex::GetAncestor (8 samples, 0.01%)</title><rect x="38.4" y="645" width="0.1" height="15.0" fill="rgb(213,17,2)" rx="2" ry="2" />
<text  x="41.43" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (18 samples, 0.02%)</title><rect x="1102.9" y="645" width="0.3" height="15.0" fill="rgb(225,213,47)" rx="2" ry="2" />
<text  x="1105.94" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (531 samples, 0.61%)</title><rect x="1005.3" y="629" width="7.2" height="15.0" fill="rgb(205,33,37)" rx="2" ry="2" />
<text  x="1008.30" y="639.5" ></text>
</g>
<g >
<title>BlockManager::LoadBlockIndex (1,074 samples, 1.23%)</title><rect x="38.4" y="693" width="14.5" height="15.0" fill="rgb(230,100,49)" rx="2" ry="2" />
<text  x="41.43" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;::operator (9 samples, 0.01%)</title><rect x="897.0" y="613" width="0.2" height="15.0" fill="rgb(254,62,5)" rx="2" ry="2" />
<text  x="900.04" y="623.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char const*&gt; (13 samples, 0.01%)</title><rect x="319.5" y="597" width="0.2" height="15.0" fill="rgb(226,90,39)" rx="2" ry="2" />
<text  x="322.49" y="607.5" ></text>
</g>
<g >
<title>CTransaction::IsCoinBase (22 samples, 0.03%)</title><rect x="931.0" y="629" width="0.3" height="15.0" fill="rgb(248,30,22)" rx="2" ry="2" />
<text  x="934.02" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (11 samples, 0.01%)</title><rect x="1082.2" y="517" width="0.1" height="15.0" fill="rgb(233,116,0)" rx="2" ry="2" />
<text  x="1085.15" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::equal_range (63 samples, 0.07%)</title><rect x="908.2" y="597" width="0.8" height="15.0" fill="rgb(207,78,19)" rx="2" ry="2" />
<text  x="911.19" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_valptr (25 samples, 0.03%)</title><rect x="996.1" y="597" width="0.4" height="15.0" fill="rgb(237,171,9)" rx="2" ry="2" />
<text  x="999.15" y="607.5" ></text>
</g>
<g >
<title>std::map&lt;std::pair&lt;void*, void*&gt;, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::count (301 samples, 0.34%)</title><rect x="729.4" y="581" width="4.1" height="15.0" fill="rgb(219,146,35)" rx="2" ry="2" />
<text  x="732.43" y="591.5" ></text>
</g>
<g >
<title>std::bitset&lt;8ul&gt;::reset (25 samples, 0.03%)</title><rect x="950.1" y="613" width="0.3" height="15.0" fill="rgb(227,53,26)" rx="2" ry="2" />
<text  x="953.10" y="623.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (9 samples, 0.01%)</title><rect x="557.0" y="213" width="0.1" height="15.0" fill="rgb(249,13,50)" rx="2" ry="2" />
<text  x="559.98" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (524 samples, 0.60%)</title><rect x="1005.4" y="613" width="7.1" height="15.0" fill="rgb(245,128,49)" rx="2" ry="2" />
<text  x="1008.39" y="623.5" ></text>
</g>
<g >
<title>ReadKeyValue (63 samples, 0.07%)</title><rect x="22.0" y="757" width="0.8" height="15.0" fill="rgb(251,106,49)" rx="2" ry="2" />
<text  x="24.97" y="767.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (17 samples, 0.02%)</title><rect x="488.2" y="149" width="0.2" height="15.0" fill="rgb(211,16,13)" rx="2" ry="2" />
<text  x="491.20" y="159.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1,175 samples, 1.34%)</title><rect x="468.6" y="389" width="15.8" height="15.0" fill="rgb(247,108,9)" rx="2" ry="2" />
<text  x="471.61" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (34 samples, 0.04%)</title><rect x="880.3" y="549" width="0.5" height="15.0" fill="rgb(252,96,39)" rx="2" ry="2" />
<text  x="883.34" y="559.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (15 samples, 0.02%)</title><rect x="55.2" y="597" width="0.2" height="15.0" fill="rgb(205,221,53)" rx="2" ry="2" />
<text  x="58.17" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_left (14 samples, 0.02%)</title><rect x="731.7" y="533" width="0.2" height="15.0" fill="rgb(244,194,15)" rx="2" ry="2" />
<text  x="734.74" y="543.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (11 samples, 0.01%)</title><rect x="1124.6" y="549" width="0.1" height="15.0" fill="rgb(237,111,52)" rx="2" ry="2" />
<text  x="1127.60" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_value (43 samples, 0.05%)</title><rect x="981.2" y="613" width="0.6" height="15.0" fill="rgb(247,203,39)" rx="2" ry="2" />
<text  x="984.24" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="115.3" y="357" width="0.2" height="15.0" fill="rgb(224,105,46)" rx="2" ry="2" />
<text  x="118.30" y="367.5" ></text>
</g>
<g >
<title>CScriptWitness::IsNull (15 samples, 0.02%)</title><rect x="562.7" y="325" width="0.2" height="15.0" fill="rgb(252,31,45)" rx="2" ry="2" />
<text  x="565.68" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (53 samples, 0.06%)</title><rect x="600.8" y="581" width="0.7" height="15.0" fill="rgb(238,222,51)" rx="2" ry="2" />
<text  x="603.78" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::__normal_iterator (49 samples, 0.06%)</title><rect x="325.4" y="629" width="0.6" height="15.0" fill="rgb(230,165,32)" rx="2" ry="2" />
<text  x="328.38" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::construct&lt;std::pair&lt;void*, CLockLocation&gt;, std::pair&lt;void*, CLockLocation&gt; &gt; (12 samples, 0.01%)</title><rect x="733.9" y="549" width="0.1" height="15.0" fill="rgb(252,65,6)" rx="2" ry="2" />
<text  x="736.86" y="559.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (715 samples, 0.82%)</title><rect x="1109.2" y="469" width="9.6" height="15.0" fill="rgb(226,198,51)" rx="2" ry="2" />
<text  x="1112.20" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (42 samples, 0.05%)</title><rect x="48.3" y="565" width="0.6" height="15.0" fill="rgb(241,25,33)" rx="2" ry="2" />
<text  x="51.29" y="575.5" ></text>
</g>
<g >
<title>LoadBlockIndex (1,075 samples, 1.23%)</title><rect x="38.4" y="725" width="14.5" height="15.0" fill="rgb(244,223,46)" rx="2" ry="2" />
<text  x="41.43" y="735.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, 28u, unsigned char&gt; (12 samples, 0.01%)</title><rect x="27.7" y="757" width="0.2" height="15.0" fill="rgb(233,215,12)" rx="2" ry="2" />
<text  x="30.72" y="767.5" ></text>
</g>
<g >
<title>__memp_fput (8 samples, 0.01%)</title><rect x="163.3" y="469" width="0.1" height="15.0" fill="rgb(240,53,30)" rx="2" ry="2" />
<text  x="166.33" y="479.5" ></text>
</g>
<g >
<title>CHash160::Finalize (98 samples, 0.11%)</title><rect x="1120.5" y="661" width="1.3" height="15.0" fill="rgb(223,105,27)" rx="2" ry="2" />
<text  x="1123.50" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (139 samples, 0.16%)</title><rect x="400.5" y="485" width="1.9" height="15.0" fill="rgb(239,104,21)" rx="2" ry="2" />
<text  x="403.53" y="495.5" ></text>
</g>
<g >
<title>__memp_fget (406 samples, 0.46%)</title><rect x="141.6" y="469" width="5.4" height="15.0" fill="rgb(243,53,48)" rx="2" ry="2" />
<text  x="144.55" y="479.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (51 samples, 0.06%)</title><rect x="46.0" y="581" width="0.7" height="15.0" fill="rgb(244,178,29)" rx="2" ry="2" />
<text  x="48.97" y="591.5" ></text>
</g>
<g >
<title>CuckooCache::bit_packed_atomic_flags::setup (15 samples, 0.02%)</title><rect x="31.3" y="661" width="0.2" height="15.0" fill="rgb(205,176,18)" rx="2" ry="2" />
<text  x="34.27" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (29 samples, 0.03%)</title><rect x="854.4" y="341" width="0.4" height="15.0" fill="rgb(209,126,53)" rx="2" ry="2" />
<text  x="857.40" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (18 samples, 0.02%)</title><rect x="1100.8" y="661" width="0.3" height="15.0" fill="rgb(253,190,47)" rx="2" ry="2" />
<text  x="1103.83" y="671.5" ></text>
</g>
<g >
<title>ECCVerifyHandle::ECCVerifyHandle (34 samples, 0.04%)</title><rect x="1149.4" y="677" width="0.4" height="15.0" fill="rgb(214,162,1)" rx="2" ry="2" />
<text  x="1152.36" y="687.5" ></text>
</g>
<g >
<title>WalletBatch::VerifyEnvironment (29 samples, 0.03%)</title><rect x="180.4" y="677" width="0.4" height="15.0" fill="rgb(208,106,31)" rx="2" ry="2" />
<text  x="183.39" y="687.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1,423 samples, 1.63%)</title><rect x="494.7" y="373" width="19.2" height="15.0" fill="rgb(210,53,14)" rx="2" ry="2" />
<text  x="497.68" y="383.5" ></text>
</g>
<g >
<title>CWallet::SyncMetaData (10 samples, 0.01%)</title><rect x="19.2" y="757" width="0.2" height="15.0" fill="rgb(230,185,36)" rx="2" ry="2" />
<text  x="22.23" y="767.5" ></text>
</g>
<g >
<title>CHashWriter::write (284 samples, 0.32%)</title><rect x="1140.0" y="229" width="3.8" height="15.0" fill="rgb(223,23,7)" rx="2" ry="2" />
<text  x="1142.99" y="239.5" ></text>
</g>
<g >
<title>__memp_fget (27 samples, 0.03%)</title><rect x="114.4" y="389" width="0.4" height="15.0" fill="rgb(246,134,24)" rx="2" ry="2" />
<text  x="117.44" y="399.5" ></text>
</g>
<g >
<title>__dbc_close (37 samples, 0.04%)</title><rect x="121.9" y="469" width="0.5" height="15.0" fill="rgb(251,128,4)" rx="2" ry="2" />
<text  x="124.85" y="479.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CSizeComputer, CTransaction&gt; (8 samples, 0.01%)</title><rect x="25.2" y="757" width="0.1" height="15.0" fill="rgb(217,115,16)" rx="2" ry="2" />
<text  x="28.20" y="767.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (164 samples, 0.19%)</title><rect x="183.1" y="309" width="2.3" height="15.0" fill="rgb(210,160,42)" rx="2" ry="2" />
<text  x="186.14" y="319.5" ></text>
</g>
<g >
<title>__lock_put (273 samples, 0.31%)</title><rect x="365.8" y="565" width="3.6" height="15.0" fill="rgb(231,33,49)" rx="2" ry="2" />
<text  x="368.77" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::base (12 samples, 0.01%)</title><rect x="558.4" y="229" width="0.2" height="15.0" fill="rgb(251,77,35)" rx="2" ry="2" />
<text  x="561.41" y="239.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (814 samples, 0.93%)</title><rect x="89.2" y="501" width="10.9" height="15.0" fill="rgb(223,91,54)" rx="2" ry="2" />
<text  x="92.17" y="511.5" ></text>
</g>
<g >
<title>__bam_get_root (9 samples, 0.01%)</title><rect x="163.8" y="469" width="0.1" height="15.0" fill="rgb(209,182,41)" rx="2" ry="2" />
<text  x="166.79" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (17 samples, 0.02%)</title><rect x="506.7" y="309" width="0.2" height="15.0" fill="rgb(254,119,52)" rx="2" ry="2" />
<text  x="509.68" y="319.5" ></text>
</g>
<g >
<title>__dbc_cleanup (9 samples, 0.01%)</title><rect x="73.1" y="517" width="0.2" height="15.0" fill="rgb(230,62,50)" rx="2" ry="2" />
<text  x="76.15" y="527.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="421" width="4.2" height="15.0" fill="rgb(208,85,20)" rx="2" ry="2" />
<text  x="1138.80" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (15 samples, 0.02%)</title><rect x="563.3" y="325" width="0.2" height="15.0" fill="rgb(247,52,9)" rx="2" ry="2" />
<text  x="566.25" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (25 samples, 0.03%)</title><rect x="959.8" y="565" width="0.4" height="15.0" fill="rgb(248,138,2)" rx="2" ry="2" />
<text  x="962.83" y="575.5" ></text>
</g>
<g >
<title>__bam_search (54 samples, 0.06%)</title><rect x="66.3" y="469" width="0.8" height="15.0" fill="rgb(230,134,46)" rx="2" ry="2" />
<text  x="69.34" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_find_before_node (97 samples, 0.11%)</title><rect x="910.5" y="581" width="1.3" height="15.0" fill="rgb(234,207,51)" rx="2" ry="2" />
<text  x="913.49" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;char const  (14 samples, 0.02%)</title><rect x="945.9" y="613" width="0.2" height="15.0" fill="rgb(245,219,11)" rx="2" ry="2" />
<text  x="948.87" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_put_node (27 samples, 0.03%)</title><rect x="1047.5" y="597" width="0.4" height="15.0" fill="rgb(209,128,22)" rx="2" ry="2" />
<text  x="1050.53" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_destroy_node (15 samples, 0.02%)</title><rect x="592.5" y="533" width="0.2" height="15.0" fill="rgb(241,222,5)" rx="2" ry="2" />
<text  x="595.48" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;, std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt; &gt;::operator= (20 samples, 0.02%)</title><rect x="905.9" y="629" width="0.3" height="15.0" fill="rgb(208,53,25)" rx="2" ry="2" />
<text  x="908.95" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (16 samples, 0.02%)</title><rect x="1016.1" y="645" width="0.2" height="15.0" fill="rgb(213,1,4)" rx="2" ry="2" />
<text  x="1019.12" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (21 samples, 0.02%)</title><rect x="39.4" y="533" width="0.3" height="15.0" fill="rgb(250,170,36)" rx="2" ry="2" />
<text  x="42.39" y="543.5" ></text>
</g>
<g >
<title>CRIPEMD160::Write (1,286 samples, 1.47%)</title><rect x="767.3" y="549" width="17.3" height="15.0" fill="rgb(211,128,48)" rx="2" ry="2" />
<text  x="770.27" y="559.5" ></text>
</g>
<g >
<title>WriteLE32 (15 samples, 0.02%)</title><rect x="784.6" y="549" width="0.2" height="15.0" fill="rgb(208,125,7)" rx="2" ry="2" />
<text  x="787.60" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::max_size (226 samples, 0.26%)</title><rect x="320.8" y="597" width="3.1" height="15.0" fill="rgb(247,122,23)" rx="2" ry="2" />
<text  x="323.84" y="607.5" ></text>
</g>
<g >
<title>__bam_cmp (22 samples, 0.03%)</title><rect x="139.1" y="469" width="0.3" height="15.0" fill="rgb(224,130,19)" rx="2" ry="2" />
<text  x="142.07" y="479.5" ></text>
</g>
<g >
<title>LookupBlockIndex (8 samples, 0.01%)</title><rect x="21.8" y="757" width="0.1" height="15.0" fill="rgb(230,18,36)" rx="2" ry="2" />
<text  x="24.76" y="767.5" ></text>
</g>
<g >
<title>SaltedTxidHasher::operator (305 samples, 0.35%)</title><rect x="900.9" y="565" width="4.1" height="15.0" fill="rgb(214,112,47)" rx="2" ry="2" />
<text  x="903.86" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (36 samples, 0.04%)</title><rect x="658.6" y="485" width="0.4" height="15.0" fill="rgb(208,51,34)" rx="2" ry="2" />
<text  x="661.55" y="495.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (315 samples, 0.36%)</title><rect x="1105.0" y="469" width="4.2" height="15.0" fill="rgb(247,220,31)" rx="2" ry="2" />
<text  x="1107.95" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (169 samples, 0.19%)</title><rect x="1046.5" y="645" width="2.3" height="15.0" fill="rgb(217,155,47)" rx="2" ry="2" />
<text  x="1049.53" y="655.5" ></text>
</g>
<g >
<title>CKey::operator= (177 samples, 0.20%)</title><rect x="741.5" y="629" width="2.4" height="15.0" fill="rgb(254,19,49)" rx="2" ry="2" />
<text  x="744.53" y="639.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (55 samples, 0.06%)</title><rect x="66.3" y="501" width="0.8" height="15.0" fill="rgb(215,56,42)" rx="2" ry="2" />
<text  x="69.33" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;::_M_valptr (13 samples, 0.01%)</title><rect x="53.8" y="613" width="0.2" height="15.0" fill="rgb(249,19,22)" rx="2" ry="2" />
<text  x="56.82" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (14 samples, 0.02%)</title><rect x="1096.4" y="645" width="0.2" height="15.0" fill="rgb(219,154,2)" rx="2" ry="2" />
<text  x="1099.37" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::allocate (105 samples, 0.12%)</title><rect x="202.2" y="581" width="1.4" height="15.0" fill="rgb(254,12,0)" rx="2" ry="2" />
<text  x="205.16" y="591.5" ></text>
</g>
<g >
<title>CSHA256::Finalize (245 samples, 0.28%)</title><rect x="1127.6" y="693" width="3.3" height="15.0" fill="rgb(244,96,6)" rx="2" ry="2" />
<text  x="1130.58" y="703.5" ></text>
</g>
<g >
<title>Db::verify (9,097 samples, 10.39%)</title><rect x="57.8" y="629" width="122.6" height="15.0" fill="rgb(224,204,8)" rx="2" ry="2" />
<text  x="60.80" y="639.5" >Db::verify</text>
</g>
<g >
<title>TLS wrapper function for g_thread_name (15 samples, 0.02%)</title><rect x="944.4" y="533" width="0.2" height="15.0" fill="rgb(251,46,31)" rx="2" ry="2" />
<text  x="947.40" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (23 samples, 0.03%)</title><rect x="1026.1" y="501" width="0.3" height="15.0" fill="rgb(229,146,35)" rx="2" ry="2" />
<text  x="1029.08" y="511.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;&amp;&gt; (86 samples, 0.10%)</title><rect x="573.7" y="629" width="1.2" height="15.0" fill="rgb(221,142,41)" rx="2" ry="2" />
<text  x="576.72" y="639.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, unsigned char  (24 samples, 0.03%)</title><rect x="398.5" y="533" width="0.4" height="15.0" fill="rgb(235,190,24)" rx="2" ry="2" />
<text  x="401.53" y="543.5" ></text>
</g>
<g >
<title>__gthread_active_p (9 samples, 0.01%)</title><rect x="568.9" y="501" width="0.1" height="15.0" fill="rgb(240,166,19)" rx="2" ry="2" />
<text  x="571.91" y="511.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (8 samples, 0.01%)</title><rect x="1151.4" y="741" width="0.1" height="15.0" fill="rgb(230,113,11)" rx="2" ry="2" />
<text  x="1154.43" y="751.5" ></text>
</g>
<g >
<title>CHashWriter::write (40 samples, 0.05%)</title><rect x="523.9" y="293" width="0.5" height="15.0" fill="rgb(227,180,8)" rx="2" ry="2" />
<text  x="526.89" y="303.5" ></text>
</g>
<g >
<title>std::swap&lt;CTransaction const*&gt; (15 samples, 0.02%)</title><rect x="571.4" y="549" width="0.2" height="15.0" fill="rgb(227,17,39)" rx="2" ry="2" />
<text  x="574.40" y="559.5" ></text>
</g>
<g >
<title>uint256::uint256 (13 samples, 0.01%)</title><rect x="544.1" y="277" width="0.2" height="15.0" fill="rgb(246,111,8)" rx="2" ry="2" />
<text  x="547.10" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::select_on_container_copy_construction (20 samples, 0.02%)</title><rect x="999.7" y="469" width="0.3" height="15.0" fill="rgb(252,78,54)" rx="2" ry="2" />
<text  x="1002.74" y="479.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::~LockImpl (172 samples, 0.20%)</title><rect x="984.1" y="629" width="2.3" height="15.0" fill="rgb(212,27,3)" rx="2" ry="2" />
<text  x="987.12" y="639.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::WalletClientImpl::start (350 samples, 0.40%)</title><rect x="33.5" y="709" width="4.7" height="15.0" fill="rgb(226,59,42)" rx="2" ry="2" />
<text  x="36.52" y="719.5" ></text>
</g>
<g >
<title>CHashWriter::GetHash (178 samples, 0.20%)</title><rect x="520.3" y="405" width="2.4" height="15.0" fill="rgb(216,197,42)" rx="2" ry="2" />
<text  x="523.29" y="415.5" ></text>
</g>
<g >
<title>CSHA256::Write (10 samples, 0.01%)</title><rect x="547.0" y="69" width="0.1" height="15.0" fill="rgb(233,98,11)" rx="2" ry="2" />
<text  x="549.97" y="79.5" ></text>
</g>
<g >
<title>CScript::clear (15 samples, 0.02%)</title><rect x="551.4" y="277" width="0.2" height="15.0" fill="rgb(212,212,40)" rx="2" ry="2" />
<text  x="554.43" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_M_insert_node (110 samples, 0.13%)</title><rect x="979.6" y="629" width="1.5" height="15.0" fill="rgb(252,224,6)" rx="2" ry="2" />
<text  x="982.61" y="639.5" ></text>
</g>
<g >
<title>__subvdi3 (8 samples, 0.01%)</title><rect x="524.3" y="245" width="0.1" height="15.0" fill="rgb(236,158,10)" rx="2" ry="2" />
<text  x="527.32" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_free (22 samples, 0.03%)</title><rect x="191.9" y="661" width="0.3" height="15.0" fill="rgb(227,146,27)" rx="2" ry="2" />
<text  x="194.86" y="671.5" ></text>
</g>
<g >
<title>CHash256::Finalize (51 samples, 0.06%)</title><rect x="46.0" y="597" width="0.7" height="15.0" fill="rgb(210,128,40)" rx="2" ry="2" />
<text  x="48.97" y="607.5" ></text>
</g>
<g >
<title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (534 samples, 0.61%)</title><rect x="1038.5" y="661" width="7.2" height="15.0" fill="rgb(235,101,47)" rx="2" ry="2" />
<text  x="1041.46" y="671.5" ></text>
</g>
<g >
<title>CHash256::Write (311 samples, 0.36%)</title><rect x="1135.8" y="213" width="4.2" height="15.0" fill="rgb(238,195,54)" rx="2" ry="2" />
<text  x="1138.80" y="223.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; &gt; (64 samples, 0.07%)</title><rect x="742.4" y="581" width="0.8" height="15.0" fill="rgb(237,225,33)" rx="2" ry="2" />
<text  x="745.38" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_right (18 samples, 0.02%)</title><rect x="970.4" y="613" width="0.3" height="15.0" fill="rgb(220,203,43)" rx="2" ry="2" />
<text  x="973.43" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="1096.6" y="661" width="0.2" height="15.0" fill="rgb(205,127,45)" rx="2" ry="2" />
<text  x="1099.56" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (32 samples, 0.04%)</title><rect x="457.9" y="549" width="0.5" height="15.0" fill="rgb(227,125,14)" rx="2" ry="2" />
<text  x="460.95" y="559.5" ></text>
</g>
<g >
<title>__memp_fget (531 samples, 0.61%)</title><rect x="173.1" y="581" width="7.1" height="15.0" fill="rgb(253,170,24)" rx="2" ry="2" />
<text  x="176.08" y="591.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (57 samples, 0.07%)</title><rect x="43.8" y="549" width="0.8" height="15.0" fill="rgb(222,19,33)" rx="2" ry="2" />
<text  x="46.84" y="559.5" ></text>
</g>
<g >
<title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (503 samples, 0.57%)</title><rect x="526.6" y="261" width="6.8" height="15.0" fill="rgb(251,159,16)" rx="2" ry="2" />
<text  x="529.62" y="271.5" ></text>
</g>
<g >
<title>__dbc_iget (454 samples, 0.52%)</title><rect x="106.6" y="469" width="6.1" height="15.0" fill="rgb(219,151,25)" rx="2" ry="2" />
<text  x="109.58" y="479.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::begin (20 samples, 0.02%)</title><rect x="810.5" y="437" width="0.2" height="15.0" fill="rgb(220,103,53)" rx="2" ry="2" />
<text  x="813.46" y="447.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CSizeComputer&gt; (86 samples, 0.10%)</title><rect x="1033.9" y="437" width="1.2" height="15.0" fill="rgb(229,170,51)" rx="2" ry="2" />
<text  x="1036.91" y="447.5" ></text>
</g>
<g >
<title>VerifyWallets (20 samples, 0.02%)</title><rect x="1144.6" y="725" width="0.2" height="15.0" fill="rgb(209,194,50)" rx="2" ry="2" />
<text  x="1147.57" y="735.5" ></text>
</g>
<g >
<title>__memp_alloc (408 samples, 0.47%)</title><rect x="174.3" y="565" width="5.5" height="15.0" fill="rgb(205,180,48)" rx="2" ry="2" />
<text  x="177.26" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, uint256&gt;, false, true&gt;::operator (11 samples, 0.01%)</title><rect x="897.5" y="613" width="0.2" height="15.0" fill="rgb(254,112,47)" rx="2" ry="2" />
<text  x="900.51" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_value (12 samples, 0.01%)</title><rect x="878.9" y="533" width="0.1" height="15.0" fill="rgb(226,146,21)" rx="2" ry="2" />
<text  x="881.88" y="543.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer&gt; (8 samples, 0.01%)</title><rect x="1028.9" y="373" width="0.1" height="15.0" fill="rgb(217,115,48)" rx="2" ry="2" />
<text  x="1031.92" y="383.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (12 samples, 0.01%)</title><rect x="879.7" y="565" width="0.2" height="15.0" fill="rgb(234,168,52)" rx="2" ry="2" />
<text  x="882.70" y="575.5" ></text>
</g>
<g >
<title>ser_readdata64&lt;CDataStream&gt; (27 samples, 0.03%)</title><rect x="488.8" y="261" width="0.4" height="15.0" fill="rgb(245,20,45)" rx="2" ry="2" />
<text  x="491.81" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::push_back (24 samples, 0.03%)</title><rect x="733.7" y="581" width="0.4" height="15.0" fill="rgb(248,110,36)" rx="2" ry="2" />
<text  x="736.74" y="591.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;void*, void*&gt; (31 samples, 0.04%)</title><rect x="833.9" y="501" width="0.4" height="15.0" fill="rgb(212,44,13)" rx="2" ry="2" />
<text  x="836.88" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::construct&lt;unsigned char&gt; (74 samples, 0.08%)</title><rect x="865.8" y="421" width="1.0" height="15.0" fill="rgb(216,114,42)" rx="2" ry="2" />
<text  x="868.83" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (101 samples, 0.12%)</title><rect x="869.6" y="581" width="1.4" height="15.0" fill="rgb(237,113,37)" rx="2" ry="2" />
<text  x="872.60" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (8 samples, 0.01%)</title><rect x="1151.4" y="757" width="0.1" height="15.0" fill="rgb(226,146,16)" rx="2" ry="2" />
<text  x="1154.43" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (736 samples, 0.84%)</title><rect x="1004.9" y="645" width="9.9" height="15.0" fill="rgb(209,31,22)" rx="2" ry="2" />
<text  x="1007.88" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, CWalletTx*&gt;, std::_Select1st&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt; &gt;::_S_key (10 samples, 0.01%)</title><rect x="1156.0" y="757" width="0.2" height="15.0" fill="rgb(225,155,18)" rx="2" ry="2" />
<text  x="1159.03" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_destroy&lt;zero_after_free_allocator&lt;char&gt;, char&gt; (732 samples, 0.84%)</title><rect x="434.5" y="501" width="9.9" height="15.0" fill="rgb(223,31,37)" rx="2" ry="2" />
<text  x="437.50" y="511.5" ></text>
</g>
<g >
<title>__bam_vrfy_itemorder (46 samples, 0.05%)</title><rect x="69.0" y="565" width="0.7" height="15.0" fill="rgb(223,229,10)" rx="2" ry="2" />
<text  x="72.04" y="575.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (8 samples, 0.01%)</title><rect x="940.8" y="485" width="0.1" height="15.0" fill="rgb(222,74,54)" rx="2" ry="2" />
<text  x="943.83" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt;::clear (26 samples, 0.03%)</title><rect x="572.5" y="581" width="0.4" height="15.0" fill="rgb(239,208,17)" rx="2" ry="2" />
<text  x="575.55" y="591.5" ></text>
</g>
<g >
<title>CSHA256::Write (11 samples, 0.01%)</title><rect x="538.6" y="149" width="0.1" height="15.0" fill="rgb(243,212,43)" rx="2" ry="2" />
<text  x="541.58" y="159.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.01%)</title><rect x="459.7" y="485" width="0.1" height="15.0" fill="rgb(217,27,24)" rx="2" ry="2" />
<text  x="462.69" y="495.5" ></text>
</g>
<g >
<title>__memp_fput (23 samples, 0.03%)</title><rect x="76.9" y="469" width="0.3" height="15.0" fill="rgb(230,178,43)" rx="2" ry="2" />
<text  x="79.92" y="479.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (52 samples, 0.06%)</title><rect x="323.2" y="565" width="0.7" height="15.0" fill="rgb(238,172,18)" rx="2" ry="2" />
<text  x="326.19" y="575.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (27 samples, 0.03%)</title><rect x="474.7" y="181" width="0.4" height="15.0" fill="rgb(223,10,54)" rx="2" ry="2" />
<text  x="477.73" y="191.5" ></text>
</g>
<g >
<title>__db_cursor (24 samples, 0.03%)</title><rect x="73.3" y="533" width="0.3" height="15.0" fill="rgb(232,61,25)" rx="2" ry="2" />
<text  x="76.31" y="543.5" ></text>
</g>
<g >
<title>sha256_shani::Transform (324 samples, 0.37%)</title><rect x="1109.2" y="389" width="4.4" height="15.0" fill="rgb(216,45,46)" rx="2" ry="2" />
<text  x="1112.20" y="399.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (8 samples, 0.01%)</title><rect x="1172.6" y="741" width="0.2" height="15.0" fill="rgb(252,177,24)" rx="2" ry="2" />
<text  x="1175.64" y="751.5" ></text>
</g>
<g >
<title>CWalletTx::IsCoinBase (42 samples, 0.05%)</title><rect x="930.9" y="645" width="0.6" height="15.0" fill="rgb(238,31,36)" rx="2" ry="2" />
<text  x="933.93" y="655.5" ></text>
</g>
<g >
<title>__db_get (740 samples, 0.85%)</title><rect x="137.6" y="549" width="10.0" height="15.0" fill="rgb(240,195,2)" rx="2" ry="2" />
<text  x="140.58" y="559.5" ></text>
</g>
<g >
<title>WalletBatch::VerifyDatabaseFile (39 samples, 0.04%)</title><rect x="1143.9" y="709" width="0.5" height="15.0" fill="rgb(230,43,36)" rx="2" ry="2" />
<text  x="1146.88" y="719.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (623 samples, 0.71%)</title><rect x="148.8" y="517" width="8.3" height="15.0" fill="rgb(228,46,16)" rx="2" ry="2" />
<text  x="151.75" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree_impl&lt;std::less&lt;COutPoint&gt;, true&gt;::~_Rb_tree_impl (19 samples, 0.02%)</title><rect x="1048.6" y="629" width="0.2" height="15.0" fill="rgb(222,202,4)" rx="2" ry="2" />
<text  x="1051.55" y="639.5" ></text>
</g>
<g >
<title>__lock_put (27 samples, 0.03%)</title><rect x="116.8" y="421" width="0.4" height="15.0" fill="rgb(229,121,38)" rx="2" ry="2" />
<text  x="119.83" y="431.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="261" width="4.2" height="15.0" fill="rgb(210,120,11)" rx="2" ry="2" />
<text  x="1138.80" y="271.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (9 samples, 0.01%)</title><rect x="488.1" y="149" width="0.1" height="15.0" fill="rgb(212,34,31)" rx="2" ry="2" />
<text  x="491.08" y="159.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (19 samples, 0.02%)</title><rect x="707.6" y="581" width="0.3" height="15.0" fill="rgb(247,117,15)" rx="2" ry="2" />
<text  x="710.65" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="658.2" y="469" width="0.2" height="15.0" fill="rgb(219,48,33)" rx="2" ry="2" />
<text  x="661.19" y="479.5" ></text>
</g>
<g >
<title>WriteCompactSize&lt;CHashWriter&gt; (18 samples, 0.02%)</title><rect x="533.4" y="293" width="0.3" height="15.0" fill="rgb(231,7,2)" rx="2" ry="2" />
<text  x="536.44" y="303.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (16 samples, 0.02%)</title><rect x="863.9" y="405" width="0.2" height="15.0" fill="rgb(250,212,43)" rx="2" ry="2" />
<text  x="866.88" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="1050.2" y="645" width="0.1" height="15.0" fill="rgb(237,147,37)" rx="2" ry="2" />
<text  x="1053.16" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_S_key (27 samples, 0.03%)</title><rect x="53.7" y="645" width="0.4" height="15.0" fill="rgb(226,21,43)" rx="2" ry="2" />
<text  x="56.69" y="655.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (21 samples, 0.02%)</title><rect x="738.8" y="501" width="0.3" height="15.0" fill="rgb(252,2,24)" rx="2" ry="2" />
<text  x="741.84" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::max_size (15 samples, 0.02%)</title><rect x="484.0" y="293" width="0.2" height="15.0" fill="rgb(244,19,35)" rx="2" ry="2" />
<text  x="486.97" y="303.5" ></text>
</g>
<g >
<title>CScriptWitness::CScriptWitness (17 samples, 0.02%)</title><rect x="482.2" y="245" width="0.2" height="15.0" fill="rgb(222,188,18)" rx="2" ry="2" />
<text  x="485.18" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (15 samples, 0.02%)</title><rect x="458.1" y="533" width="0.2" height="15.0" fill="rgb(216,153,24)" rx="2" ry="2" />
<text  x="461.11" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;BerkeleyDatabase&gt;::operator (11 samples, 0.01%)</title><rect x="180.8" y="661" width="0.1" height="15.0" fill="rgb(240,97,1)" rx="2" ry="2" />
<text  x="183.78" y="671.5" ></text>
</g>
<g >
<title>__lock_get (10 samples, 0.01%)</title><rect x="66.5" y="437" width="0.1" height="15.0" fill="rgb(227,135,51)" rx="2" ry="2" />
<text  x="69.45" y="447.5" ></text>
</g>
<g >
<title>__os_malloc (16 samples, 0.02%)</title><rect x="68.7" y="533" width="0.2" height="15.0" fill="rgb(222,91,27)" rx="2" ry="2" />
<text  x="71.72" y="543.5" ></text>
</g>
<g >
<title>__memp_alloc (40 samples, 0.05%)</title><rect x="155.8" y="453" width="0.5" height="15.0" fill="rgb(250,9,12)" rx="2" ry="2" />
<text  x="158.76" y="463.5" ></text>
</g>
<g >
<title>AssertLockHeldInternal (11 samples, 0.01%)</title><rect x="55.4" y="597" width="0.1" height="15.0" fill="rgb(232,191,49)" rx="2" ry="2" />
<text  x="58.37" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (13 samples, 0.01%)</title><rect x="993.3" y="613" width="0.2" height="15.0" fill="rgb(210,139,47)" rx="2" ry="2" />
<text  x="996.34" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (14 samples, 0.02%)</title><rect x="676.3" y="517" width="0.2" height="15.0" fill="rgb(221,111,38)" rx="2" ry="2" />
<text  x="679.30" y="527.5" ></text>
</g>
<g >
<title>__db_vrfy_ovfl_structure (11 samples, 0.01%)</title><rect x="1144.1" y="533" width="0.1" height="15.0" fill="rgb(244,130,3)" rx="2" ry="2" />
<text  x="1147.10" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::construct&lt;char, char const&amp;&gt; (66 samples, 0.08%)</title><rect x="1170.6" y="741" width="0.9" height="15.0" fill="rgb(248,189,26)" rx="2" ry="2" />
<text  x="1173.57" y="751.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (78 samples, 0.09%)</title><rect x="1064.2" y="661" width="1.0" height="15.0" fill="rgb(234,75,36)" rx="2" ry="2" />
<text  x="1067.16" y="671.5" ></text>
</g>
<g >
<title>__dbc_close (16 samples, 0.02%)</title><rect x="113.3" y="469" width="0.2" height="15.0" fill="rgb(227,123,3)" rx="2" ry="2" />
<text  x="116.29" y="479.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (747 samples, 0.85%)</title><rect x="137.5" y="565" width="10.1" height="15.0" fill="rgb(246,100,44)" rx="2" ry="2" />
<text  x="140.54" y="575.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_unlock (17 samples, 0.02%)</title><rect x="836.6" y="565" width="0.2" height="15.0" fill="rgb(213,81,29)" rx="2" ry="2" />
<text  x="839.60" y="575.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (106 samples, 0.12%)</title><rect x="487.0" y="213" width="1.5" height="15.0" fill="rgb(244,69,49)" rx="2" ry="2" />
<text  x="490.03" y="223.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (15 samples, 0.02%)</title><rect x="548.7" y="101" width="0.2" height="15.0" fill="rgb(215,213,31)" rx="2" ry="2" />
<text  x="551.72" y="111.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (24 samples, 0.03%)</title><rect x="80.9" y="469" width="0.3" height="15.0" fill="rgb(227,150,5)" rx="2" ry="2" />
<text  x="83.86" y="479.5" ></text>
</g>
<g >
<title>CWallet::LoadToWallet (8,947 samples, 10.22%)</title><rect x="894.5" y="677" width="120.5" height="15.0" fill="rgb(251,90,6)" rx="2" ry="2" />
<text  x="897.47" y="687.5" >CWallet::LoadTo..</text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::erase (33 samples, 0.04%)</title><rect x="705.9" y="565" width="0.5" height="15.0" fill="rgb(239,139,4)" rx="2" ry="2" />
<text  x="708.92" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, unsigned long&gt; (89 samples, 0.10%)</title><rect x="509.4" y="309" width="1.2" height="15.0" fill="rgb(235,167,7)" rx="2" ry="2" />
<text  x="512.41" y="319.5" ></text>
</g>
<g >
<title>CLockLocation::~CLockLocation (15 samples, 0.02%)</title><rect x="871.5" y="597" width="0.2" height="15.0" fill="rgb(232,4,23)" rx="2" ry="2" />
<text  x="874.54" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::end (23 samples, 0.03%)</title><rect x="1092.0" y="677" width="0.3" height="15.0" fill="rgb(225,9,50)" rx="2" ry="2" />
<text  x="1095.03" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_Vector_impl::~_Vector_impl (71 samples, 0.08%)</title><rect x="390.6" y="645" width="1.0" height="15.0" fill="rgb(211,189,31)" rx="2" ry="2" />
<text  x="393.63" y="655.5" ></text>
</g>
<g >
<title>[unknown] (35 samples, 0.04%)</title><rect x="146.5" y="357" width="0.5" height="15.0" fill="rgb(230,65,20)" rx="2" ry="2" />
<text  x="149.53" y="367.5" ></text>
</g>
<g >
<title>std::move&lt;std::shared_ptr&lt;CTransaction const&gt;&amp;&gt; (9 samples, 0.01%)</title><rect x="1017.8" y="661" width="0.1" height="15.0" fill="rgb(222,88,39)" rx="2" ry="2" />
<text  x="1020.80" y="671.5" ></text>
</g>
<g >
<title>CPubKey::GetID (1,625 samples, 1.86%)</title><rect x="743.9" y="629" width="21.9" height="15.0" fill="rgb(254,194,26)" rx="2" ry="2" />
<text  x="746.91" y="639.5" >C..</text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTxIn&gt; (533 samples, 0.61%)</title><rect x="526.3" y="293" width="7.1" height="15.0" fill="rgb(245,40,27)" rx="2" ry="2" />
<text  x="529.26" y="303.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (1,542 samples, 1.76%)</title><rect x="543.1" y="357" width="20.8" height="15.0" fill="rgb(219,132,12)" rx="2" ry="2" />
<text  x="546.09" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (48 samples, 0.05%)</title><rect x="822.2" y="549" width="0.7" height="15.0" fill="rgb(222,106,20)" rx="2" ry="2" />
<text  x="825.24" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (47 samples, 0.05%)</title><rect x="564.2" y="421" width="0.6" height="15.0" fill="rgb(234,121,53)" rx="2" ry="2" />
<text  x="567.21" y="431.5" ></text>
</g>
<g >
<title>CHash256::Write (15 samples, 0.02%)</title><rect x="548.3" y="53" width="0.2" height="15.0" fill="rgb(208,176,52)" rx="2" ry="2" />
<text  x="551.32" y="63.5" ></text>
</g>
<g >
<title>__lock_get (88 samples, 0.10%)</title><rect x="140.0" y="453" width="1.1" height="15.0" fill="rgb(222,113,17)" rx="2" ry="2" />
<text  x="142.95" y="463.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;int&amp;&gt; (52 samples, 0.06%)</title><rect x="467.7" y="405" width="0.7" height="15.0" fill="rgb(210,102,20)" rx="2" ry="2" />
<text  x="470.74" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;CTxIn&gt;::allocator (13 samples, 0.01%)</title><rect x="564.6" y="389" width="0.1" height="15.0" fill="rgb(208,46,45)" rx="2" ry="2" />
<text  x="567.57" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char&gt; (8 samples, 0.01%)</title><rect x="1098.6" y="517" width="0.1" height="15.0" fill="rgb(252,188,39)" rx="2" ry="2" />
<text  x="1101.62" y="527.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (17 samples, 0.02%)</title><rect x="1030.8" y="341" width="0.2" height="15.0" fill="rgb(232,217,37)" rx="2" ry="2" />
<text  x="1033.81" y="351.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="309" width="4.2" height="15.0" fill="rgb(241,35,2)" rx="2" ry="2" />
<text  x="1138.80" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (16 samples, 0.02%)</title><rect x="580.5" y="549" width="0.2" height="15.0" fill="rgb(254,12,50)" rx="2" ry="2" />
<text  x="583.51" y="559.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (9 samples, 0.01%)</title><rect x="88.4" y="437" width="0.1" height="15.0" fill="rgb(222,124,53)" rx="2" ry="2" />
<text  x="91.40" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::select_on_container_copy_construction (10 samples, 0.01%)</title><rect x="1001.3" y="501" width="0.2" height="15.0" fill="rgb(236,174,5)" rx="2" ry="2" />
<text  x="1004.35" y="511.5" ></text>
</g>
<g >
<title>__libc_pread (16 samples, 0.02%)</title><rect x="87.2" y="373" width="0.3" height="15.0" fill="rgb(209,60,39)" rx="2" ry="2" />
<text  x="90.25" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;CTransaction&gt;::construct&lt;CTransaction const, deserialize_type const&amp;, CDataStream&amp;&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="613" width="8.0" height="15.0" fill="rgb(233,70,44)" rx="2" ry="2" />
<text  x="1138.80" y="623.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.01%)</title><rect x="357.3" y="501" width="0.2" height="15.0" fill="rgb(235,186,2)" rx="2" ry="2" />
<text  x="360.29" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;uint256*, uint256&gt; (32 samples, 0.04%)</title><rect x="604.2" y="613" width="0.5" height="15.0" fill="rgb(239,110,5)" rx="2" ry="2" />
<text  x="607.23" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (11 samples, 0.01%)</title><rect x="462.5" y="581" width="0.1" height="15.0" fill="rgb(243,118,0)" rx="2" ry="2" />
<text  x="465.48" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (123 samples, 0.14%)</title><rect x="579.9" y="597" width="1.7" height="15.0" fill="rgb(215,3,49)" rx="2" ry="2" />
<text  x="582.92" y="607.5" ></text>
</g>
<g >
<title>CChainState::RewindBlockIndex (147 samples, 0.17%)</title><rect x="53.0" y="709" width="2.0" height="15.0" fill="rgb(242,63,1)" rx="2" ry="2" />
<text  x="56.00" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (27 samples, 0.03%)</title><rect x="614.0" y="437" width="0.4" height="15.0" fill="rgb(246,18,49)" rx="2" ry="2" />
<text  x="617.00" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;CTransaction&gt;, deserialize_type const&amp;, CDataStream&amp;&gt; (595 samples, 0.68%)</title><rect x="1135.8" y="693" width="8.0" height="15.0" fill="rgb(222,50,1)" rx="2" ry="2" />
<text  x="1138.80" y="703.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, unsigned int&gt; (40 samples, 0.05%)</title><rect x="532.9" y="229" width="0.5" height="15.0" fill="rgb(227,176,37)" rx="2" ry="2" />
<text  x="535.86" y="239.5" ></text>
</g>
<g >
<title>COutPoint::COutPoint (17 samples, 0.02%)</title><rect x="544.0" y="293" width="0.3" height="15.0" fill="rgb(215,67,7)" rx="2" ry="2" />
<text  x="547.05" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;, secure_allocator&lt;unsigned char&gt; &gt; (13 samples, 0.01%)</title><rect x="742.0" y="597" width="0.1" height="15.0" fill="rgb(243,167,35)" rx="2" ry="2" />
<text  x="744.96" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (7,461 samples, 8.52%)</title><rect x="465.2" y="517" width="100.6" height="15.0" fill="rgb(225,37,16)" rx="2" ry="2" />
<text  x="468.22" y="527.5" >std::_Sp_cou..</text>
</g>
<g >
<title>_dl_relocate_object (14 samples, 0.02%)</title><rect x="1189.8" y="693" width="0.2" height="15.0" fill="rgb(229,7,24)" rx="2" ry="2" />
<text  x="1192.81" y="703.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (24 samples, 0.03%)</title><rect x="585.2" y="613" width="0.4" height="15.0" fill="rgb(245,3,20)" rx="2" ry="2" />
<text  x="588.24" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt;::base (10 samples, 0.01%)</title><rect x="1095.4" y="581" width="0.2" height="15.0" fill="rgb(210,111,26)" rx="2" ry="2" />
<text  x="1098.42" y="591.5" ></text>
</g>
<g >
<title>CDataStream::write (9,803 samples, 11.20%)</title><rect x="194.6" y="677" width="132.1" height="15.0" fill="rgb(222,107,44)" rx="2" ry="2" />
<text  x="197.60" y="687.5" >CDataStream::write</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (67 samples, 0.08%)</title><rect x="873.9" y="533" width="0.9" height="15.0" fill="rgb(218,188,31)" rx="2" ry="2" />
<text  x="876.92" y="543.5" ></text>
</g>
<g >
<title>interfaces::(anonymous namespace)::LockImpl::UniqueLock (725 samples, 0.83%)</title><rect x="935.9" y="613" width="9.7" height="15.0" fill="rgb(243,226,38)" rx="2" ry="2" />
<text  x="938.85" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator&lt;unsigned char*&gt; (21 samples, 0.02%)</title><rect x="1060.8" y="677" width="0.2" height="15.0" fill="rgb(212,138,20)" rx="2" ry="2" />
<text  x="1063.76" y="687.5" ></text>
</g>
<g >
<title>CPubKey::GetID (46 samples, 0.05%)</title><rect x="893.5" y="661" width="0.6" height="15.0" fill="rgb(248,25,26)" rx="2" ry="2" />
<text  x="896.47" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::push_back (97 samples, 0.11%)</title><rect x="942.9" y="533" width="1.3" height="15.0" fill="rgb(215,214,48)" rx="2" ry="2" />
<text  x="945.89" y="543.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::Enter (618 samples, 0.71%)</title><rect x="726.2" y="629" width="8.3" height="15.0" fill="rgb(222,40,8)" rx="2" ry="2" />
<text  x="729.19" y="639.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, unsigned int&amp;&gt; (68 samples, 0.08%)</title><rect x="474.3" y="229" width="0.9" height="15.0" fill="rgb(217,38,27)" rx="2" ry="2" />
<text  x="477.27" y="239.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (265 samples, 0.30%)</title><rect x="69.7" y="565" width="3.6" height="15.0" fill="rgb(231,196,42)" rx="2" ry="2" />
<text  x="72.70" y="575.5" ></text>
</g>
<g >
<title>__bam_search (205 samples, 0.23%)</title><rect x="74.5" y="485" width="2.7" height="15.0" fill="rgb(251,202,51)" rx="2" ry="2" />
<text  x="77.47" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_base (29 samples, 0.03%)</title><rect x="1058.4" y="501" width="0.4" height="15.0" fill="rgb(247,30,38)" rx="2" ry="2" />
<text  x="1061.41" y="511.5" ></text>
</g>
<g >
<title>CPubKey::GetID (152 samples, 0.17%)</title><rect x="1123.5" y="661" width="2.1" height="15.0" fill="rgb(228,5,25)" rx="2" ry="2" />
<text  x="1126.54" y="671.5" ></text>
</g>
<g >
<title>__lock_vec (185 samples, 0.21%)</title><rect x="342.0" y="581" width="2.5" height="15.0" fill="rgb(235,58,13)" rx="2" ry="2" />
<text  x="345.00" y="591.5" ></text>
</g>
<g >
<title>__db_lput (15 samples, 0.02%)</title><rect x="100.3" y="421" width="0.2" height="15.0" fill="rgb(238,15,8)" rx="2" ry="2" />
<text  x="103.28" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;uint256&gt;::allocator (24 samples, 0.03%)</title><rect x="603.6" y="581" width="0.3" height="15.0" fill="rgb(254,133,35)" rx="2" ry="2" />
<text  x="606.61" y="591.5" ></text>
</g>
<g >
<title>__memp_fput (10 samples, 0.01%)</title><rect x="100.0" y="437" width="0.1" height="15.0" fill="rgb(208,172,24)" rx="2" ry="2" />
<text  x="103.01" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_default_append (336 samples, 0.38%)</title><rect x="479.8" y="341" width="4.5" height="15.0" fill="rgb(212,47,50)" rx="2" ry="2" />
<text  x="482.82" y="351.5" ></text>
</g>
<g >
<title>CHash256::Write (19 samples, 0.02%)</title><rect x="533.1" y="165" width="0.2" height="15.0" fill="rgb(251,184,27)" rx="2" ry="2" />
<text  x="536.06" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;long const, CWalletTx*&gt;::pair&lt;long, CWalletTx*, true&gt; (16 samples, 0.02%)</title><rect x="965.8" y="565" width="0.2" height="15.0" fill="rgb(209,26,40)" rx="2" ry="2" />
<text  x="968.80" y="575.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (10 samples, 0.01%)</title><rect x="181.8" y="133" width="0.2" height="15.0" fill="rgb(212,136,34)" rx="2" ry="2" />
<text  x="184.83" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (39 samples, 0.04%)</title><rect x="459.3" y="517" width="0.5" height="15.0" fill="rgb(249,168,22)" rx="2" ry="2" />
<text  x="462.28" y="527.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;char*&gt; (30 samples, 0.03%)</title><rect x="1086.3" y="533" width="0.4" height="15.0" fill="rgb(208,222,46)" rx="2" ry="2" />
<text  x="1089.33" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_get (9 samples, 0.01%)</title><rect x="993.4" y="597" width="0.1" height="15.0" fill="rgb(205,76,29)" rx="2" ry="2" />
<text  x="996.40" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (486 samples, 0.56%)</title><rect x="1038.7" y="645" width="6.6" height="15.0" fill="rgb(206,45,23)" rx="2" ry="2" />
<text  x="1041.74" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;CTxOut const*, CTxOut*&gt; (9 samples, 0.01%)</title><rect x="492.5" y="277" width="0.1" height="15.0" fill="rgb(228,152,37)" rx="2" ry="2" />
<text  x="495.51" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (23 samples, 0.03%)</title><rect x="997.5" y="549" width="0.3" height="15.0" fill="rgb(245,152,31)" rx="2" ry="2" />
<text  x="1000.52" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (8 samples, 0.01%)</title><rect x="924.1" y="549" width="0.1" height="15.0" fill="rgb(247,153,12)" rx="2" ry="2" />
<text  x="927.10" y="559.5" ></text>
</g>
<g >
<title>__lock_get (30 samples, 0.03%)</title><rect x="154.6" y="469" width="0.4" height="15.0" fill="rgb(216,69,46)" rx="2" ry="2" />
<text  x="157.61" y="479.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CTransaction&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="517" width="4.2" height="15.0" fill="rgb(247,161,1)" rx="2" ry="2" />
<text  x="1138.80" y="527.5" ></text>
</g>
<g >
<title>KeyOriginInfo::operator= (151 samples, 0.17%)</title><rect x="882.9" y="645" width="2.0" height="15.0" fill="rgb(221,142,31)" rx="2" ry="2" />
<text  x="885.89" y="655.5" ></text>
</g>
<g >
<title>CScript::Unserialize&lt;CDataStream&gt; (115 samples, 0.13%)</title><rect x="486.9" y="261" width="1.6" height="15.0" fill="rgb(214,65,33)" rx="2" ry="2" />
<text  x="489.91" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (14 samples, 0.02%)</title><rect x="586.1" y="629" width="0.2" height="15.0" fill="rgb(229,11,33)" rx="2" ry="2" />
<text  x="589.13" y="639.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="155.6" y="453" width="0.2" height="15.0" fill="rgb(235,20,42)" rx="2" ry="2" />
<text  x="158.61" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;char*, unsigned long&amp;&gt; (120 samples, 0.14%)</title><rect x="661.5" y="501" width="1.6" height="15.0" fill="rgb(222,93,28)" rx="2" ry="2" />
<text  x="664.46" y="511.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter&gt; (34 samples, 0.04%)</title><rect x="546.7" y="133" width="0.4" height="15.0" fill="rgb(206,102,40)" rx="2" ry="2" />
<text  x="549.69" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (50 samples, 0.06%)</title><rect x="457.2" y="549" width="0.7" height="15.0" fill="rgb(238,51,23)" rx="2" ry="2" />
<text  x="460.19" y="559.5" ></text>
</g>
<g >
<title>CHash256::Write (9 samples, 0.01%)</title><rect x="543.7" y="277" width="0.1" height="15.0" fill="rgb(216,11,26)" rx="2" ry="2" />
<text  x="546.72" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_key_compare&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_key_compare (9 samples, 0.01%)</title><rect x="1017.5" y="613" width="0.2" height="15.0" fill="rgb(246,172,48)" rx="2" ry="2" />
<text  x="1020.55" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::pair&lt;char* const&amp;&gt; (15 samples, 0.02%)</title><rect x="1084.0" y="485" width="0.2" height="15.0" fill="rgb(249,224,37)" rx="2" ry="2" />
<text  x="1087.01" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_valptr (43 samples, 0.05%)</title><rect x="969.3" y="581" width="0.6" height="15.0" fill="rgb(227,178,39)" rx="2" ry="2" />
<text  x="972.30" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (9 samples, 0.01%)</title><rect x="517.1" y="405" width="0.1" height="15.0" fill="rgb(235,189,8)" rx="2" ry="2" />
<text  x="520.11" y="415.5" ></text>
</g>
<g >
<title>WriteLE32 (11 samples, 0.01%)</title><rect x="703.1" y="613" width="0.1" height="15.0" fill="rgb(238,24,5)" rx="2" ry="2" />
<text  x="706.05" y="623.5" ></text>
</g>
<g >
<title>operator== (13 samples, 0.01%)</title><rect x="900.5" y="501" width="0.2" height="15.0" fill="rgb(219,87,9)" rx="2" ry="2" />
<text  x="903.55" y="511.5" ></text>
</g>
<g >
<title>__bam_ca_di (11 samples, 0.01%)</title><rect x="104.5" y="405" width="0.2" height="15.0" fill="rgb(221,52,10)" rx="2" ry="2" />
<text  x="107.55" y="415.5" ></text>
</g>
<g >
<title>CBlockIndexWorkComparator::operator (8 samples, 0.01%)</title><rect x="54.7" y="645" width="0.1" height="15.0" fill="rgb(226,29,16)" rx="2" ry="2" />
<text  x="57.73" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::base (18 samples, 0.02%)</title><rect x="201.1" y="613" width="0.2" height="15.0" fill="rgb(220,75,30)" rx="2" ry="2" />
<text  x="204.05" y="623.5" ></text>
</g>
<g >
<title>[unknown] (47 samples, 0.05%)</title><rect x="98.9" y="341" width="0.6" height="15.0" fill="rgb(253,160,25)" rx="2" ry="2" />
<text  x="101.90" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;CTransaction const,  (60 samples, 0.07%)</title><rect x="34.9" y="613" width="0.8" height="15.0" fill="rgb(212,36,7)" rx="2" ry="2" />
<text  x="37.92" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (31 samples, 0.04%)</title><rect x="737.4" y="581" width="0.4" height="15.0" fill="rgb(245,206,33)" rx="2" ry="2" />
<text  x="740.38" y="591.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (204 samples, 0.23%)</title><rect x="529.9" y="181" width="2.7" height="15.0" fill="rgb(227,98,13)" rx="2" ry="2" />
<text  x="532.86" y="191.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, CChainState*, std::default_delete&lt;CChainState&gt; &gt; (22 samples, 0.03%)</title><rect x="954.6" y="565" width="0.3" height="15.0" fill="rgb(245,56,23)" rx="2" ry="2" />
<text  x="957.64" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (15 samples, 0.02%)</title><rect x="32.0" y="533" width="0.2" height="15.0" fill="rgb(206,148,52)" rx="2" ry="2" />
<text  x="34.95" y="543.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (61 samples, 0.07%)</title><rect x="58.5" y="549" width="0.8" height="15.0" fill="rgb(236,77,10)" rx="2" ry="2" />
<text  x="61.53" y="559.5" ></text>
</g>
<g >
<title>std::operator!= (21 samples, 0.02%)</title><rect x="593.9" y="581" width="0.3" height="15.0" fill="rgb(253,184,18)" rx="2" ry="2" />
<text  x="596.94" y="591.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (42 samples, 0.05%)</title><rect x="319.1" y="613" width="0.6" height="15.0" fill="rgb(233,125,20)" rx="2" ry="2" />
<text  x="322.10" y="623.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (47 samples, 0.05%)</title><rect x="478.1" y="165" width="0.6" height="15.0" fill="rgb(210,165,52)" rx="2" ry="2" />
<text  x="481.05" y="175.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 0.02%)</title><rect x="1143.9" y="309" width="0.2" height="15.0" fill="rgb(237,207,46)" rx="2" ry="2" />
<text  x="1146.90" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, interfaces::(anonymous namespace)::LockImpl*, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_head (9 samples, 0.01%)</title><rect x="1166.2" y="741" width="0.1" height="15.0" fill="rgb(247,170,19)" rx="2" ry="2" />
<text  x="1169.16" y="751.5" ></text>
</g>
<g >
<title>_int_free (9 samples, 0.01%)</title><rect x="590.8" y="501" width="0.1" height="15.0" fill="rgb(252,169,13)" rx="2" ry="2" />
<text  x="593.80" y="511.5" ></text>
</g>
<g >
<title>CSHA256::Write (164 samples, 0.19%)</title><rect x="183.1" y="181" width="2.3" height="15.0" fill="rgb(254,171,48)" rx="2" ry="2" />
<text  x="186.14" y="191.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (235 samples, 0.27%)</title><rect x="568.2" y="549" width="3.2" height="15.0" fill="rgb(232,136,11)" rx="2" ry="2" />
<text  x="571.24" y="559.5" ></text>
</g>
<g >
<title>__memp_fget (700 samples, 0.80%)</title><rect x="127.4" y="501" width="9.4" height="15.0" fill="rgb(240,5,20)" rx="2" ry="2" />
<text  x="130.39" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::construct&lt;char, char const&amp;&gt; (15 samples, 0.02%)</title><rect x="1171.7" y="757" width="0.2" height="15.0" fill="rgb(206,60,7)" rx="2" ry="2" />
<text  x="1174.66" y="767.5" ></text>
</g>
<g >
<title>__bam_ca_di (44 samples, 0.05%)</title><rect x="152.3" y="485" width="0.6" height="15.0" fill="rgb(228,36,7)" rx="2" ry="2" />
<text  x="155.31" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CBlockIndex*, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt; &gt;::find (488 samples, 0.56%)</title><rect x="956.7" y="629" width="6.6" height="15.0" fill="rgb(237,56,14)" rx="2" ry="2" />
<text  x="959.69" y="639.5" ></text>
</g>
<g >
<title>[unknown] (35 samples, 0.04%)</title><rect x="179.0" y="453" width="0.4" height="15.0" fill="rgb(250,175,52)" rx="2" ry="2" />
<text  x="181.98" y="463.5" ></text>
</g>
<g >
<title>__bam_ca_split (8 samples, 0.01%)</title><rect x="153.3" y="485" width="0.1" height="15.0" fill="rgb(217,113,15)" rx="2" ry="2" />
<text  x="156.31" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;CTransaction const,  (595 samples, 0.68%)</title><rect x="1135.8" y="677" width="8.0" height="15.0" fill="rgb(247,199,31)" rx="2" ry="2" />
<text  x="1138.80" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (39 samples, 0.04%)</title><rect x="1000.4" y="501" width="0.6" height="15.0" fill="rgb(250,47,54)" rx="2" ry="2" />
<text  x="1003.43" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (8 samples, 0.01%)</title><rect x="1161.9" y="757" width="0.1" height="15.0" fill="rgb(212,130,52)" rx="2" ry="2" />
<text  x="1164.89" y="767.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::base_blob (13 samples, 0.01%)</title><rect x="522.5" y="373" width="0.2" height="15.0" fill="rgb(211,44,1)" rx="2" ry="2" />
<text  x="525.51" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (159 samples, 0.18%)</title><rect x="1042.0" y="613" width="2.2" height="15.0" fill="rgb(233,218,36)" rx="2" ry="2" />
<text  x="1045.03" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::~_Vector_base (845 samples, 0.97%)</title><rect x="673.1" y="645" width="11.4" height="15.0" fill="rgb(233,25,33)" rx="2" ry="2" />
<text  x="676.07" y="655.5" ></text>
</g>
<g >
<title>WalletBatch::LoadWallet (8 samples, 0.01%)</title><rect x="28.3" y="757" width="0.1" height="15.0" fill="rgb(214,140,24)" rx="2" ry="2" />
<text  x="31.34" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40 samples, 0.05%)</title><rect x="887.4" y="597" width="0.5" height="15.0" fill="rgb(207,146,34)" rx="2" ry="2" />
<text  x="890.41" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (24 samples, 0.03%)</title><rect x="120.2" y="405" width="0.4" height="15.0" fill="rgb(249,196,47)" rx="2" ry="2" />
<text  x="123.24" y="415.5" ></text>
</g>
<g >
<title>AppInitMain (10,589 samples, 12.09%)</title><rect x="38.2" y="741" width="142.7" height="15.0" fill="rgb(212,122,40)" rx="2" ry="2" />
<text  x="41.23" y="751.5" >AppInitMain</text>
</g>
<g >
<title>std::_Destroy&lt;unsigned char*, secure_allocator&lt;unsigned char&gt; &gt; (139 samples, 0.16%)</title><rect x="671.2" y="645" width="1.8" height="15.0" fill="rgb(243,207,2)" rx="2" ry="2" />
<text  x="674.17" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (27 samples, 0.03%)</title><rect x="910.1" y="581" width="0.3" height="15.0" fill="rgb(248,176,41)" rx="2" ry="2" />
<text  x="913.06" y="591.5" ></text>
</g>
<g >
<title>CDataStream::read (12 samples, 0.01%)</title><rect x="515.8" y="357" width="0.2" height="15.0" fill="rgb(237,228,1)" rx="2" ry="2" />
<text  x="518.81" y="367.5" ></text>
</g>
<g >
<title>CBlockPolicyEstimator::Read (9 samples, 0.01%)</title><rect x="30.3" y="709" width="0.1" height="15.0" fill="rgb(253,210,1)" rx="2" ry="2" />
<text  x="33.27" y="719.5" ></text>
</g>
<g >
<title>__db_tas_mutex_readlock (13 samples, 0.01%)</title><rect x="130.8" y="469" width="0.2" height="15.0" fill="rgb(250,72,7)" rx="2" ry="2" />
<text  x="133.81" y="479.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (71 samples, 0.08%)</title><rect x="939.4" y="533" width="1.0" height="15.0" fill="rgb(220,161,6)" rx="2" ry="2" />
<text  x="942.42" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (16 samples, 0.02%)</title><rect x="68.7" y="517" width="0.2" height="15.0" fill="rgb(242,56,35)" rx="2" ry="2" />
<text  x="71.72" y="527.5" ></text>
</g>
<g >
<title>__db_lget (23 samples, 0.03%)</title><rect x="171.0" y="485" width="0.3" height="15.0" fill="rgb(213,215,29)" rx="2" ry="2" />
<text  x="173.99" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (10 samples, 0.01%)</title><rect x="1014.9" y="661" width="0.1" height="15.0" fill="rgb(249,32,29)" rx="2" ry="2" />
<text  x="1017.90" y="671.5" ></text>
</g>
<g >
<title>__dbc_cleanup (12 samples, 0.01%)</title><rect x="168.7" y="533" width="0.2" height="15.0" fill="rgb(229,110,43)" rx="2" ry="2" />
<text  x="171.70" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::allocator&lt;std::pair&lt;COutPoint const, uint256&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_find_node (102 samples, 0.12%)</title><rect x="910.4" y="597" width="1.4" height="15.0" fill="rgb(224,96,25)" rx="2" ry="2" />
<text  x="913.42" y="607.5" ></text>
</g>
<g >
<title>__dbc_iput (635 samples, 0.73%)</title><rect x="148.7" y="533" width="8.6" height="15.0" fill="rgb(209,36,22)" rx="2" ry="2" />
<text  x="151.71" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.01%)</title><rect x="1081.2" y="533" width="0.2" height="15.0" fill="rgb(226,26,33)" rx="2" ry="2" />
<text  x="1084.22" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (10 samples, 0.01%)</title><rect x="490.9" y="325" width="0.1" height="15.0" fill="rgb(228,22,24)" rx="2" ry="2" />
<text  x="493.86" y="335.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (40 samples, 0.05%)</title><rect x="400.0" y="485" width="0.5" height="15.0" fill="rgb(218,146,1)" rx="2" ry="2" />
<text  x="402.99" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_value (13 samples, 0.01%)</title><rect x="587.1" y="565" width="0.1" height="15.0" fill="rgb(227,35,15)" rx="2" ry="2" />
<text  x="590.06" y="575.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (9 samples, 0.01%)</title><rect x="553.6" y="101" width="0.1" height="15.0" fill="rgb(231,69,15)" rx="2" ry="2" />
<text  x="556.62" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (19 samples, 0.02%)</title><rect x="677.0" y="517" width="0.3" height="15.0" fill="rgb(222,194,53)" rx="2" ry="2" />
<text  x="680.03" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_Vector_impl_data::_Vector_impl_data (21 samples, 0.02%)</title><rect x="384.7" y="629" width="0.3" height="15.0" fill="rgb(245,83,10)" rx="2" ry="2" />
<text  x="387.72" y="639.5" ></text>
</g>
<g >
<title>secp256k1_fe_sqr_inner (8 samples, 0.01%)</title><rect x="1149.7" y="581" width="0.1" height="15.0" fill="rgb(209,179,16)" rx="2" ry="2" />
<text  x="1152.71" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, unsigned long, true&gt;::_S_equals (56 samples, 0.06%)</title><rect x="910.8" y="549" width="0.7" height="15.0" fill="rgb(238,104,32)" rx="2" ry="2" />
<text  x="913.79" y="559.5" ></text>
</g>
<g >
<title>CSHA256::Write (127 samples, 0.15%)</title><rect x="1121.8" y="613" width="1.7" height="15.0" fill="rgb(239,184,15)" rx="2" ry="2" />
<text  x="1124.82" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;CWalletTx&amp;&gt; (22 samples, 0.03%)</title><rect x="1004.3" y="645" width="0.3" height="15.0" fill="rgb(244,45,50)" rx="2" ry="2" />
<text  x="1007.30" y="655.5" ></text>
</g>
<g >
<title>KeyOriginInfo::KeyOriginInfo (18 samples, 0.02%)</title><rect x="685.0" y="661" width="0.2" height="15.0" fill="rgb(239,7,11)" rx="2" ry="2" />
<text  x="687.99" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (27 samples, 0.03%)</title><rect x="1094.3" y="629" width="0.3" height="15.0" fill="rgb(205,155,24)" rx="2" ry="2" />
<text  x="1097.28" y="639.5" ></text>
</g>
<g >
<title>CDataStream::read (12 samples, 0.01%)</title><rect x="515.6" y="357" width="0.1" height="15.0" fill="rgb(211,92,32)" rx="2" ry="2" />
<text  x="518.57" y="367.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (19 samples, 0.02%)</title><rect x="486.0" y="357" width="0.2" height="15.0" fill="rgb(231,120,41)" rx="2" ry="2" />
<text  x="488.96" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, interfaces::Chain::Lock*, std::default_delete&lt;interfaces::Chain::Lock&gt; &gt; (46 samples, 0.05%)</title><rect x="982.6" y="613" width="0.6" height="15.0" fill="rgb(206,205,54)" rx="2" ry="2" />
<text  x="985.57" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::data (17 samples, 0.02%)</title><rect x="557.9" y="261" width="0.2" height="15.0" fill="rgb(223,102,32)" rx="2" ry="2" />
<text  x="560.89" y="271.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.02%)</title><rect x="112.1" y="293" width="0.2" height="15.0" fill="rgb(243,87,53)" rx="2" ry="2" />
<text  x="115.07" y="303.5" ></text>
</g>
<g >
<title>RewindBlockIndex (18 samples, 0.02%)</title><rect x="33.3" y="709" width="0.2" height="15.0" fill="rgb(222,60,40)" rx="2" ry="2" />
<text  x="36.26" y="719.5" ></text>
</g>
<g >
<title>__memp_bhwrite (61 samples, 0.07%)</title><rect x="178.8" y="549" width="0.8" height="15.0" fill="rgb(250,190,40)" rx="2" ry="2" />
<text  x="181.76" y="559.5" ></text>
</g>
<g >
<title>__db_cursor (19 samples, 0.02%)</title><rect x="157.4" y="549" width="0.2" height="15.0" fill="rgb(208,124,5)" rx="2" ry="2" />
<text  x="160.38" y="559.5" ></text>
</g>
<g >
<title>__memp_fget (64 samples, 0.07%)</title><rect x="155.4" y="469" width="0.9" height="15.0" fill="rgb(252,127,15)" rx="2" ry="2" />
<text  x="158.43" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (13 samples, 0.01%)</title><rect x="656.7" y="453" width="0.2" height="15.0" fill="rgb(216,27,54)" rx="2" ry="2" />
<text  x="659.71" y="463.5" ></text>
</g>
<g >
<title>QuadRound (18 samples, 0.02%)</title><rect x="46.8" y="421" width="0.3" height="15.0" fill="rgb(253,166,43)" rx="2" ry="2" />
<text  x="49.84" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10 samples, 0.01%)</title><rect x="1018.3" y="629" width="0.1" height="15.0" fill="rgb(241,95,46)" rx="2" ry="2" />
<text  x="1021.26" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (158 samples, 0.18%)</title><rect x="1087.0" y="549" width="2.1" height="15.0" fill="rgb(222,60,4)" rx="2" ry="2" />
<text  x="1090.02" y="559.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (33 samples, 0.04%)</title><rect x="116.7" y="453" width="0.5" height="15.0" fill="rgb(254,120,39)" rx="2" ry="2" />
<text  x="119.74" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (62 samples, 0.07%)</title><rect x="56.5" y="533" width="0.8" height="15.0" fill="rgb(212,174,5)" rx="2" ry="2" />
<text  x="59.45" y="543.5" ></text>
</g>
<g >
<title>__memp_fget (26 samples, 0.03%)</title><rect x="123.4" y="389" width="0.4" height="15.0" fill="rgb(214,142,32)" rx="2" ry="2" />
<text  x="126.40" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_free (12 samples, 0.01%)</title><rect x="985.3" y="469" width="0.2" height="15.0" fill="rgb(205,205,49)" rx="2" ry="2" />
<text  x="988.30" y="479.5" ></text>
</g>
<g >
<title>boost::detail::thread_data&lt;AppInitMain (35 samples, 0.04%)</title><rect x="1145.8" y="709" width="0.4" height="15.0" fill="rgb(208,176,53)" rx="2" ry="2" />
<text  x="1148.77" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (79 samples, 0.09%)</title><rect x="660.0" y="501" width="1.1" height="15.0" fill="rgb(250,8,25)" rx="2" ry="2" />
<text  x="663.05" y="511.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="341" width="3.8" height="15.0" fill="rgb(230,136,45)" rx="2" ry="2" />
<text  x="1142.99" y="351.5" ></text>
</g>
<g >
<title>BerkeleyBatch::ReadAtCursor (22 samples, 0.03%)</title><rect x="13.2" y="757" width="0.3" height="15.0" fill="rgb(251,162,31)" rx="2" ry="2" />
<text  x="16.23" y="767.5" ></text>
</g>
<g >
<title>CDataStream::Init (8 samples, 0.01%)</title><rect x="13.8" y="741" width="0.1" height="15.0" fill="rgb(237,9,5)" rx="2" ry="2" />
<text  x="16.81" y="751.5" ></text>
</g>
<g >
<title>[unknown] (35 samples, 0.04%)</title><rect x="135.7" y="389" width="0.5" height="15.0" fill="rgb(205,126,32)" rx="2" ry="2" />
<text  x="138.71" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (11 samples, 0.01%)</title><rect x="534.0" y="293" width="0.2" height="15.0" fill="rgb(223,153,11)" rx="2" ry="2" />
<text  x="537.02" y="303.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;LockedPool::LockedPageArena&gt;::operator* (11 samples, 0.01%)</title><rect x="1090.5" y="581" width="0.2" height="15.0" fill="rgb(218,95,31)" rx="2" ry="2" />
<text  x="1093.51" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::allocate (958 samples, 1.09%)</title><rect x="651.8" y="613" width="12.9" height="15.0" fill="rgb(227,96,53)" rx="2" ry="2" />
<text  x="654.78" y="623.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (31 samples, 0.04%)</title><rect x="1146.9" y="725" width="0.4" height="15.0" fill="rgb(209,204,44)" rx="2" ry="2" />
<text  x="1149.93" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (48 samples, 0.05%)</title><rect x="30.6" y="645" width="0.7" height="15.0" fill="rgb(206,51,17)" rx="2" ry="2" />
<text  x="33.61" y="655.5" ></text>
</g>
<g >
<title>__memp_fput (9 samples, 0.01%)</title><rect x="136.8" y="501" width="0.1" height="15.0" fill="rgb(229,198,45)" rx="2" ry="2" />
<text  x="139.82" y="511.5" ></text>
</g>
<g >
<title>CBlockIndex::CBlockIndex (13 samples, 0.01%)</title><rect x="47.9" y="597" width="0.1" height="15.0" fill="rgb(213,3,45)" rx="2" ry="2" />
<text  x="50.85" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (12 samples, 0.01%)</title><rect x="1080.8" y="549" width="0.2" height="15.0" fill="rgb(206,182,18)" rx="2" ry="2" />
<text  x="1083.84" y="559.5" ></text>
</g>
<g >
<title>_mm_add_epi32 (28 samples, 0.03%)</title><rect x="1110.8" y="357" width="0.4" height="15.0" fill="rgb(213,56,32)" rx="2" ry="2" />
<text  x="1113.83" y="367.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (164 samples, 0.19%)</title><rect x="180.9" y="517" width="2.2" height="15.0" fill="rgb(242,66,46)" rx="2" ry="2" />
<text  x="183.93" y="527.5" ></text>
</g>
<g >
<title>CHash256::Write (361 samples, 0.41%)</title><rect x="1130.9" y="709" width="4.8" height="15.0" fill="rgb(242,133,18)" rx="2" ry="2" />
<text  x="1133.88" y="719.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (16 samples, 0.02%)</title><rect x="1143.9" y="389" width="0.2" height="15.0" fill="rgb(205,168,6)" rx="2" ry="2" />
<text  x="1146.88" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CScriptID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (187 samples, 0.21%)</title><rect x="819.3" y="565" width="2.5" height="15.0" fill="rgb(248,44,35)" rx="2" ry="2" />
<text  x="822.26" y="575.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (104 samples, 0.12%)</title><rect x="536.2" y="181" width="1.4" height="15.0" fill="rgb(245,53,31)" rx="2" ry="2" />
<text  x="539.18" y="191.5" ></text>
</g>
<g >
<title>std::_Construct&lt;CTxOut&gt; (55 samples, 0.06%)</title><rect x="491.4" y="277" width="0.8" height="15.0" fill="rgb(244,178,33)" rx="2" ry="2" />
<text  x="494.44" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_Vector_impl::_Vector_impl (49 samples, 0.06%)</title><rect x="603.3" y="597" width="0.6" height="15.0" fill="rgb(248,145,29)" rx="2" ry="2" />
<text  x="606.27" y="607.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (20 samples, 0.02%)</title><rect x="478.4" y="149" width="0.3" height="15.0" fill="rgb(229,37,31)" rx="2" ry="2" />
<text  x="481.42" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (22 samples, 0.03%)</title><rect x="386.6" y="661" width="0.3" height="15.0" fill="rgb(217,119,8)" rx="2" ry="2" />
<text  x="389.56" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (12 samples, 0.01%)</title><rect x="482.2" y="197" width="0.2" height="15.0" fill="rgb(215,64,28)" rx="2" ry="2" />
<text  x="485.25" y="207.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (124 samples, 0.14%)</title><rect x="1118.8" y="709" width="1.7" height="15.0" fill="rgb(252,46,44)" rx="2" ry="2" />
<text  x="1121.83" y="719.5" ></text>
</g>
<g >
<title>CScript::clear (12 samples, 0.01%)</title><rect x="17.0" y="757" width="0.2" height="15.0" fill="rgb(236,18,9)" rx="2" ry="2" />
<text  x="20.01" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_get_insert_equal_pos (28 samples, 0.03%)</title><rect x="674.8" y="517" width="0.4" height="15.0" fill="rgb(224,174,22)" rx="2" ry="2" />
<text  x="677.85" y="527.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream&gt; (29 samples, 0.03%)</title><rect x="474.7" y="197" width="0.4" height="15.0" fill="rgb(217,41,26)" rx="2" ry="2" />
<text  x="477.70" y="207.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (8 samples, 0.01%)</title><rect x="411.8" y="533" width="0.1" height="15.0" fill="rgb(210,67,7)" rx="2" ry="2" />
<text  x="414.78" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (24 samples, 0.03%)</title><rect x="1166.7" y="757" width="0.3" height="15.0" fill="rgb(222,25,6)" rx="2" ry="2" />
<text  x="1169.67" y="767.5" ></text>
</g>
<g >
<title>CWallet::ReacceptWalletTransactions (350 samples, 0.40%)</title><rect x="33.5" y="661" width="4.7" height="15.0" fill="rgb(211,124,13)" rx="2" ry="2" />
<text  x="36.52" y="671.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (38 samples, 0.04%)</title><rect x="471.8" y="357" width="0.6" height="15.0" fill="rgb(238,131,37)" rx="2" ry="2" />
<text  x="474.84" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (10 samples, 0.01%)</title><rect x="31.1" y="533" width="0.1" height="15.0" fill="rgb(242,165,16)" rx="2" ry="2" />
<text  x="34.09" y="543.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (253 samples, 0.29%)</title><rect x="529.4" y="245" width="3.4" height="15.0" fill="rgb(222,156,54)" rx="2" ry="2" />
<text  x="532.36" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;CBlockIndex*, std::pair&lt;CBlockIndex* const, CBlockIndex*&gt;, std::_Select1st&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;CBlockIndex* const, CBlockIndex*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;CBlockIndex*, CBlockIndex*&gt; &gt; (9 samples, 0.01%)</title><rect x="54.2" y="645" width="0.1" height="15.0" fill="rgb(228,225,26)" rx="2" ry="2" />
<text  x="57.19" y="655.5" ></text>
</g>
<g >
<title>CDataStream::read (10 samples, 0.01%)</title><rect x="403.3" y="565" width="0.1" height="15.0" fill="rgb(233,221,3)" rx="2" ry="2" />
<text  x="406.27" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::max_size (67 samples, 0.08%)</title><rect x="502.8" y="277" width="0.9" height="15.0" fill="rgb(254,5,53)" rx="2" ry="2" />
<text  x="505.81" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_insert_node (30 samples, 0.03%)</title><rect x="675.2" y="517" width="0.4" height="15.0" fill="rgb(208,216,40)" rx="2" ry="2" />
<text  x="678.22" y="527.5" ></text>
</g>
<g >
<title>__bam_cmp (41 samples, 0.05%)</title><rect x="170.0" y="485" width="0.6" height="15.0" fill="rgb(247,124,17)" rx="2" ry="2" />
<text  x="173.04" y="495.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (15 samples, 0.02%)</title><rect x="108.9" y="357" width="0.2" height="15.0" fill="rgb(227,83,43)" rx="2" ry="2" />
<text  x="111.90" y="367.5" ></text>
</g>
<g >
<title>FillableSigningProvider::ImplicitlyLearnRelatedKeyScripts (4,634 samples, 5.29%)</title><rect x="765.8" y="629" width="62.5" height="15.0" fill="rgb(209,8,32)" rx="2" ry="2" />
<text  x="768.81" y="639.5" >Fillab..</text>
</g>
<g >
<title>CHashWriter::write (12 samples, 0.01%)</title><rect x="543.7" y="293" width="0.1" height="15.0" fill="rgb(225,60,24)" rx="2" ry="2" />
<text  x="546.68" y="303.5" ></text>
</g>
<g >
<title>AppInitSanityChecks (36 samples, 0.04%)</title><rect x="1149.4" y="693" width="0.4" height="15.0" fill="rgb(231,185,17)" rx="2" ry="2" />
<text  x="1152.36" y="703.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (26 samples, 0.03%)</title><rect x="340.2" y="549" width="0.4" height="15.0" fill="rgb(237,81,3)" rx="2" ry="2" />
<text  x="343.22" y="559.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (41 samples, 0.05%)</title><rect x="940.4" y="533" width="0.5" height="15.0" fill="rgb(221,219,19)" rx="2" ry="2" />
<text  x="943.38" y="543.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (58 samples, 0.07%)</title><rect x="459.0" y="533" width="0.8" height="15.0" fill="rgb(249,106,38)" rx="2" ry="2" />
<text  x="462.03" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (43 samples, 0.05%)</title><rect x="860.4" y="325" width="0.6" height="15.0" fill="rgb(217,20,13)" rx="2" ry="2" />
<text  x="863.37" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (19 samples, 0.02%)</title><rect x="590.7" y="517" width="0.2" height="15.0" fill="rgb(206,141,53)" rx="2" ry="2" />
<text  x="593.69" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_check_len (74 samples, 0.08%)</title><rect x="510.6" y="325" width="1.0" height="15.0" fill="rgb(240,82,9)" rx="2" ry="2" />
<text  x="513.61" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (35 samples, 0.04%)</title><rect x="480.7" y="309" width="0.5" height="15.0" fill="rgb(232,127,38)" rx="2" ry="2" />
<text  x="483.72" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (9 samples, 0.01%)</title><rect x="659.8" y="485" width="0.1" height="15.0" fill="rgb(206,185,18)" rx="2" ry="2" />
<text  x="662.82" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned int&gt; &gt;::allocate (10 samples, 0.01%)</title><rect x="397.1" y="421" width="0.1" height="15.0" fill="rgb(235,135,13)" rx="2" ry="2" />
<text  x="400.09" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (9 samples, 0.01%)</title><rect x="942.3" y="485" width="0.1" height="15.0" fill="rgb(216,11,6)" rx="2" ry="2" />
<text  x="945.28" y="495.5" ></text>
</g>
<g >
<title>__db_lget (93 samples, 0.11%)</title><rect x="139.9" y="469" width="1.2" height="15.0" fill="rgb(220,32,48)" rx="2" ry="2" />
<text  x="142.88" y="479.5" ></text>
</g>
<g >
<title>__lock_get_internal (30 samples, 0.03%)</title><rect x="154.6" y="453" width="0.4" height="15.0" fill="rgb(228,185,19)" rx="2" ry="2" />
<text  x="157.61" y="463.5" ></text>
</g>
<g >
<title>_int_free (26 samples, 0.03%)</title><rect x="192.2" y="661" width="0.3" height="15.0" fill="rgb(235,13,21)" rx="2" ry="2" />
<text  x="195.16" y="671.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (1,296 samples, 1.48%)</title><rect x="523.0" y="357" width="17.5" height="15.0" fill="rgb(237,87,18)" rx="2" ry="2" />
<text  x="526.02" y="367.5" ></text>
</g>
<g >
<title>GetLockData (15 samples, 0.02%)</title><rect x="938.8" y="533" width="0.2" height="15.0" fill="rgb(248,218,12)" rx="2" ry="2" />
<text  x="941.80" y="543.5" ></text>
</g>
<g >
<title>__bam_get_root (34 samples, 0.04%)</title><rect x="118.5" y="405" width="0.4" height="15.0" fill="rgb(219,60,38)" rx="2" ry="2" />
<text  x="121.48" y="415.5" ></text>
</g>
<g >
<title>__bam_copy (13 samples, 0.01%)</title><rect x="153.1" y="469" width="0.2" height="15.0" fill="rgb(216,106,15)" rx="2" ry="2" />
<text  x="156.13" y="479.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; (1,187 samples, 1.36%)</title><rect x="468.4" y="405" width="16.0" height="15.0" fill="rgb(243,201,50)" rx="2" ry="2" />
<text  x="471.45" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt;::_Node_iterator_base (8 samples, 0.01%)</title><rect x="841.3" y="565" width="0.1" height="15.0" fill="rgb(221,154,22)" rx="2" ry="2" />
<text  x="844.30" y="575.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (1,604 samples, 1.83%)</title><rect x="744.2" y="613" width="21.6" height="15.0" fill="rgb(227,149,2)" rx="2" ry="2" />
<text  x="747.19" y="623.5" >H..</text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (91 samples, 0.10%)</title><rect x="677.9" y="517" width="1.3" height="15.0" fill="rgb(209,121,30)" rx="2" ry="2" />
<text  x="680.93" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;CKeyID const, CKey&gt;::pair&lt;CKeyID&amp;&amp;, 0ul&gt; (1,690 samples, 1.93%)</title><rect x="845.6" y="533" width="22.8" height="15.0" fill="rgb(215,176,18)" rx="2" ry="2" />
<text  x="848.58" y="543.5" >s..</text>
</g>
<g >
<title>__db_fchk (19 samples, 0.02%)</title><rect x="330.9" y="613" width="0.3" height="15.0" fill="rgb(213,155,9)" rx="2" ry="2" />
<text  x="333.89" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (16 samples, 0.02%)</title><rect x="878.8" y="549" width="0.3" height="15.0" fill="rgb(240,165,45)" rx="2" ry="2" />
<text  x="881.85" y="559.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.03%)</title><rect x="1043.7" y="533" width="0.4" height="15.0" fill="rgb(239,133,29)" rx="2" ry="2" />
<text  x="1046.69" y="543.5" ></text>
</g>
<g >
<title>_start (431 samples, 0.49%)</title><rect x="1184.2" y="757" width="5.8" height="15.0" fill="rgb(210,99,30)" rx="2" ry="2" />
<text  x="1187.19" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (22 samples, 0.03%)</title><rect x="870.3" y="565" width="0.3" height="15.0" fill="rgb(236,139,28)" rx="2" ry="2" />
<text  x="873.33" y="575.5" ></text>
</g>
<g >
<title>__dbt_userfree (32 samples, 0.04%)</title><rect x="382.8" y="645" width="0.5" height="15.0" fill="rgb(217,160,4)" rx="2" ry="2" />
<text  x="385.83" y="655.5" ></text>
</g>
<g >
<title>__db_put (68 samples, 0.08%)</title><rect x="104.8" y="469" width="0.9" height="15.0" fill="rgb(215,58,3)" rx="2" ry="2" />
<text  x="107.78" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (48 samples, 0.05%)</title><rect x="615.6" y="469" width="0.6" height="15.0" fill="rgb(244,211,31)" rx="2" ry="2" />
<text  x="618.55" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;CTxIn*, CTxIn&gt; (9 samples, 0.01%)</title><rect x="563.5" y="325" width="0.2" height="15.0" fill="rgb(216,135,21)" rx="2" ry="2" />
<text  x="566.55" y="335.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (8 samples, 0.01%)</title><rect x="70.4" y="517" width="0.1" height="15.0" fill="rgb(231,78,30)" rx="2" ry="2" />
<text  x="73.40" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned int&gt;::allocate (15 samples, 0.02%)</title><rect x="883.6" y="565" width="0.2" height="15.0" fill="rgb(213,48,7)" rx="2" ry="2" />
<text  x="886.61" y="575.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (48 samples, 0.05%)</title><rect x="1098.4" y="565" width="0.6" height="15.0" fill="rgb(222,72,47)" rx="2" ry="2" />
<text  x="1101.38" y="575.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (37 samples, 0.04%)</title><rect x="177.8" y="533" width="0.5" height="15.0" fill="rgb(242,42,26)" rx="2" ry="2" />
<text  x="180.76" y="543.5" ></text>
</g>
<g >
<title>operator== (23 samples, 0.03%)</title><rect x="738.8" y="533" width="0.3" height="15.0" fill="rgb(227,101,31)" rx="2" ry="2" />
<text  x="741.82" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (252 samples, 0.29%)</title><rect x="451.6" y="533" width="3.4" height="15.0" fill="rgb(225,65,1)" rx="2" ry="2" />
<text  x="454.59" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (33 samples, 0.04%)</title><rect x="544.9" y="277" width="0.4" height="15.0" fill="rgb(249,194,6)" rx="2" ry="2" />
<text  x="547.88" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (9 samples, 0.01%)</title><rect x="576.4" y="597" width="0.1" height="15.0" fill="rgb(215,208,2)" rx="2" ry="2" />
<text  x="579.39" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::_S_construct&lt;char, char const&amp;&gt; (22 samples, 0.03%)</title><rect x="39.0" y="565" width="0.3" height="15.0" fill="rgb(207,12,44)" rx="2" ry="2" />
<text  x="41.97" y="575.5" ></text>
</g>
<g >
<title>operator== (68 samples, 0.08%)</title><rect x="37.2" y="645" width="0.9" height="15.0" fill="rgb(237,42,23)" rx="2" ry="2" />
<text  x="40.19" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::~vector (423 samples, 0.48%)</title><rect x="385.9" y="677" width="5.7" height="15.0" fill="rgb(250,200,44)" rx="2" ry="2" />
<text  x="388.89" y="687.5" ></text>
</g>
<g >
<title>ShiftMessageA (8 samples, 0.01%)</title><rect x="1108.6" y="357" width="0.1" height="15.0" fill="rgb(251,0,36)" rx="2" ry="2" />
<text  x="1111.60" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::max_size (92 samples, 0.11%)</title><rect x="512.3" y="325" width="1.3" height="15.0" fill="rgb(249,15,32)" rx="2" ry="2" />
<text  x="515.32" y="335.5" ></text>
</g>
<g >
<title>__dbc_iput (57 samples, 0.07%)</title><rect x="104.9" y="453" width="0.8" height="15.0" fill="rgb(220,71,26)" rx="2" ry="2" />
<text  x="107.93" y="463.5" ></text>
</g>
<g >
<title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (98 samples, 0.11%)</title><rect x="545.9" y="181" width="1.3" height="15.0" fill="rgb(206,212,53)" rx="2" ry="2" />
<text  x="548.88" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (8 samples, 0.01%)</title><rect x="813.9" y="453" width="0.1" height="15.0" fill="rgb(224,149,1)" rx="2" ry="2" />
<text  x="816.91" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_check_len (39 samples, 0.04%)</title><rect x="667.5" y="629" width="0.5" height="15.0" fill="rgb(250,49,22)" rx="2" ry="2" />
<text  x="670.46" y="639.5" ></text>
</g>
<g >
<title>CWallet::AddKeyPubKeyInner (10,484 samples, 11.97%)</title><rect x="741.0" y="661" width="141.3" height="15.0" fill="rgb(237,118,48)" rx="2" ry="2" />
<text  x="744.03" y="671.5" >CWallet::AddKeyPu..</text>
</g>
<g >
<title>Serialize_impl&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (364 samples, 0.42%)</title><rect x="535.3" y="309" width="4.9" height="15.0" fill="rgb(217,153,39)" rx="2" ry="2" />
<text  x="538.29" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::find (250 samples, 0.29%)</title><rect x="831.5" y="549" width="3.4" height="15.0" fill="rgb(239,166,22)" rx="2" ry="2" />
<text  x="834.55" y="559.5" ></text>
</g>
<g >
<title>__env_close_pp (11 samples, 0.01%)</title><rect x="180.8" y="469" width="0.1" height="15.0" fill="rgb(221,110,19)" rx="2" ry="2" />
<text  x="183.78" y="479.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::iterator::operator* (10 samples, 0.01%)</title><rect x="706.2" y="549" width="0.2" height="15.0" fill="rgb(219,4,24)" rx="2" ry="2" />
<text  x="709.23" y="559.5" ></text>
</g>
<g >
<title>CDataStream::GetVersion (9 samples, 0.01%)</title><rect x="467.6" y="405" width="0.1" height="15.0" fill="rgb(237,225,39)" rx="2" ry="2" />
<text  x="470.62" y="415.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CMerkleTx, std::allocator&lt;CMerkleTx&gt; &gt; (66 samples, 0.08%)</title><rect x="572.0" y="613" width="0.9" height="15.0" fill="rgb(240,120,0)" rx="2" ry="2" />
<text  x="575.01" y="623.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (194 samples, 0.22%)</title><rect x="641.0" y="565" width="2.6" height="15.0" fill="rgb(242,74,9)" rx="2" ry="2" />
<text  x="644.01" y="575.5" ></text>
</g>
<g >
<title>CHash256::Write (24 samples, 0.03%)</title><rect x="559.6" y="245" width="0.3" height="15.0" fill="rgb(230,173,41)" rx="2" ry="2" />
<text  x="562.61" y="255.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.01%)</title><rect x="101.9" y="277" width="0.1" height="15.0" fill="rgb(213,129,49)" rx="2" ry="2" />
<text  x="104.89" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::clear (9 samples, 0.01%)</title><rect x="1016.3" y="645" width="0.2" height="15.0" fill="rgb(209,228,34)" rx="2" ry="2" />
<text  x="1019.33" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;void*, CLockLocation&gt; &gt; (84 samples, 0.10%)</title><rect x="943.1" y="517" width="1.1" height="15.0" fill="rgb(247,112,52)" rx="2" ry="2" />
<text  x="946.06" y="527.5" ></text>
</g>
<g >
<title>__memp_pgread (8 samples, 0.01%)</title><rect x="358.7" y="597" width="0.1" height="15.0" fill="rgb(224,37,51)" rx="2" ry="2" />
<text  x="361.72" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="106.4" y="453" width="0.2" height="15.0" fill="rgb(248,189,15)" rx="2" ry="2" />
<text  x="109.45" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (11 samples, 0.01%)</title><rect x="578.0" y="597" width="0.2" height="15.0" fill="rgb(220,215,26)" rx="2" ry="2" />
<text  x="581.05" y="607.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt; (121 samples, 0.14%)</title><rect x="43.1" y="645" width="1.6" height="15.0" fill="rgb(230,103,5)" rx="2" ry="2" />
<text  x="46.11" y="655.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (127 samples, 0.15%)</title><rect x="1121.8" y="661" width="1.7" height="15.0" fill="rgb(216,88,25)" rx="2" ry="2" />
<text  x="1124.82" y="671.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (12 samples, 0.01%)</title><rect x="126.5" y="405" width="0.2" height="15.0" fill="rgb(237,50,13)" rx="2" ry="2" />
<text  x="129.53" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_erase_aux (37 samples, 0.04%)</title><rect x="612.3" y="485" width="0.5" height="15.0" fill="rgb(217,123,15)" rx="2" ry="2" />
<text  x="615.30" y="495.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false, false&gt;, bool&gt; (29 samples, 0.03%)</title><rect x="856.0" y="341" width="0.4" height="15.0" fill="rgb(225,14,48)" rx="2" ry="2" />
<text  x="859.02" y="351.5" ></text>
</g>
<g >
<title>CScript::Serialize&lt;CHashWriter&gt; (311 samples, 0.36%)</title><rect x="1135.8" y="325" width="4.2" height="15.0" fill="rgb(242,47,18)" rx="2" ry="2" />
<text  x="1138.80" y="335.5" ></text>
</g>
<g >
<title>__lock_get_internal (39 samples, 0.04%)</title><rect x="159.7" y="453" width="0.5" height="15.0" fill="rgb(220,136,28)" rx="2" ry="2" />
<text  x="162.71" y="463.5" ></text>
</g>
<g >
<title>ThreadScriptCheck (31 samples, 0.04%)</title><rect x="1145.8" y="677" width="0.4" height="15.0" fill="rgb(247,57,5)" rx="2" ry="2" />
<text  x="1148.83" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (57 samples, 0.07%)</title><rect x="48.2" y="581" width="0.7" height="15.0" fill="rgb(224,174,13)" rx="2" ry="2" />
<text  x="51.16" y="591.5" ></text>
</g>
<g >
<title>arith_uint256::SetCompact (16 samples, 0.02%)</title><rect x="49.7" y="661" width="0.2" height="15.0" fill="rgb(213,185,4)" rx="2" ry="2" />
<text  x="52.71" y="671.5" ></text>
</g>
<g >
<title>Hash160&lt;unsigned char const*&gt; (152 samples, 0.17%)</title><rect x="1123.5" y="645" width="2.1" height="15.0" fill="rgb(231,87,8)" rx="2" ry="2" />
<text  x="1126.54" y="655.5" ></text>
</g>
<g >
<title>CSHA512::Finalize (394 samples, 0.45%)</title><rect x="1184.2" y="597" width="5.3" height="15.0" fill="rgb(216,219,33)" rx="2" ry="2" />
<text  x="1187.22" y="607.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock (20 samples, 0.02%)</title><rect x="734.2" y="597" width="0.3" height="15.0" fill="rgb(254,104,35)" rx="2" ry="2" />
<text  x="737.22" y="607.5" ></text>
</g>
<g >
<title>__uint32_identity (11 samples, 0.01%)</title><rect x="804.2" y="517" width="0.2" height="15.0" fill="rgb(240,127,28)" rx="2" ry="2" />
<text  x="807.22" y="527.5" ></text>
</g>
<g >
<title>__db_cursor (28 samples, 0.03%)</title><rect x="137.6" y="533" width="0.4" height="15.0" fill="rgb(213,189,45)" rx="2" ry="2" />
<text  x="140.63" y="543.5" ></text>
</g>
<g >
<title>TLS wrapper function for g_lockstack (9 samples, 0.01%)</title><rect x="984.6" y="549" width="0.2" height="15.0" fill="rgb(243,177,46)" rx="2" ry="2" />
<text  x="987.64" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;void*, void*&gt;, std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::pair&lt;void*, void*&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt; &gt;::end (25 samples, 0.03%)</title><rect x="729.5" y="565" width="0.4" height="15.0" fill="rgb(210,3,11)" rx="2" ry="2" />
<text  x="732.53" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::vector (115 samples, 0.13%)</title><rect x="383.8" y="677" width="1.5" height="15.0" fill="rgb(210,144,35)" rx="2" ry="2" />
<text  x="386.77" y="687.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt; (17 samples, 0.02%)</title><rect x="884.2" y="517" width="0.2" height="15.0" fill="rgb(248,121,7)" rx="2" ry="2" />
<text  x="887.16" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::resize (361 samples, 0.41%)</title><rect x="489.5" y="357" width="4.8" height="15.0" fill="rgb(229,3,19)" rx="2" ry="2" />
<text  x="492.46" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, uint256&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_eq (8 samples, 0.01%)</title><rect x="911.7" y="549" width="0.1" height="15.0" fill="rgb(215,121,49)" rx="2" ry="2" />
<text  x="914.69" y="559.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.05%)</title><rect x="99.0" y="309" width="0.5" height="15.0" fill="rgb(233,188,31)" rx="2" ry="2" />
<text  x="101.97" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;uint256&gt;::operator (17 samples, 0.02%)</title><rect x="57.0" y="501" width="0.2" height="15.0" fill="rgb(230,212,15)" rx="2" ry="2" />
<text  x="59.99" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.01%)</title><rect x="735.6" y="581" width="0.1" height="15.0" fill="rgb(218,177,7)" rx="2" ry="2" />
<text  x="738.61" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::destroy&lt;unsigned char&gt; (70 samples, 0.08%)</title><rect x="1076.5" y="613" width="1.0" height="15.0" fill="rgb(253,199,6)" rx="2" ry="2" />
<text  x="1079.53" y="623.5" ></text>
</g>
<g >
<title>std::mutex::lock (56 samples, 0.06%)</title><rect x="939.6" y="517" width="0.8" height="15.0" fill="rgb(244,66,18)" rx="2" ry="2" />
<text  x="942.63" y="527.5" ></text>
</g>
<g >
<title>CScript::Unserialize&lt;CDataStream&gt; (170 samples, 0.19%)</title><rect x="409.9" y="645" width="2.3" height="15.0" fill="rgb(209,168,30)" rx="2" ry="2" />
<text  x="412.95" y="655.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (164 samples, 0.19%)</title><rect x="180.9" y="453" width="2.2" height="15.0" fill="rgb(236,14,6)" rx="2" ry="2" />
<text  x="183.93" y="463.5" ></text>
</g>
<g >
<title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (327 samples, 0.37%)</title><rect x="551.1" y="341" width="4.4" height="15.0" fill="rgb(247,199,17)" rx="2" ry="2" />
<text  x="554.05" y="351.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, CScript&gt; (107 samples, 0.12%)</title><rect x="552.5" y="213" width="1.4" height="15.0" fill="rgb(212,191,48)" rx="2" ry="2" />
<text  x="555.50" y="223.5" ></text>
</g>
<g >
<title>__os_malloc (13 samples, 0.01%)</title><rect x="177.3" y="533" width="0.2" height="15.0" fill="rgb(239,4,29)" rx="2" ry="2" />
<text  x="180.29" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt;::_M_default_append (1,303 samples, 1.49%)</title><rect x="651.4" y="645" width="17.5" height="15.0" fill="rgb(254,164,9)" rx="2" ry="2" />
<text  x="654.38" y="655.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="549" width="3.8" height="15.0" fill="rgb(230,57,34)" rx="2" ry="2" />
<text  x="1142.99" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;CMerkleTx&gt;::~allocator (12 samples, 0.01%)</title><rect x="603.0" y="581" width="0.2" height="15.0" fill="rgb(205,4,35)" rx="2" ry="2" />
<text  x="606.03" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (26 samples, 0.03%)</title><rect x="525.6" y="277" width="0.3" height="15.0" fill="rgb(214,109,48)" rx="2" ry="2" />
<text  x="528.60" y="287.5" ></text>
</g>
<g >
<title>CHash256::Write (33 samples, 0.04%)</title><rect x="524.0" y="277" width="0.4" height="15.0" fill="rgb(236,9,15)" rx="2" ry="2" />
<text  x="526.98" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="732.9" y="517" width="0.1" height="15.0" fill="rgb(245,199,52)" rx="2" ry="2" />
<text  x="735.87" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (364 samples, 0.42%)</title><rect x="1081.9" y="549" width="4.9" height="15.0" fill="rgb(224,85,9)" rx="2" ry="2" />
<text  x="1084.89" y="559.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.02%)</title><rect x="1143.9" y="341" width="0.2" height="15.0" fill="rgb(236,156,10)" rx="2" ry="2" />
<text  x="1146.88" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (19 samples, 0.02%)</title><rect x="1102.3" y="645" width="0.2" height="15.0" fill="rgb(222,24,50)" rx="2" ry="2" />
<text  x="1105.26" y="655.5" ></text>
</g>
<g >
<title>__db_tas_mutex_lock (12 samples, 0.01%)</title><rect x="96.8" y="373" width="0.2" height="15.0" fill="rgb(217,120,32)" rx="2" ry="2" />
<text  x="99.81" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt;::push_back (56 samples, 0.06%)</title><rect x="880.1" y="581" width="0.7" height="15.0" fill="rgb(234,94,3)" rx="2" ry="2" />
<text  x="883.09" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned int&gt;::deallocate (9 samples, 0.01%)</title><rect x="685.5" y="581" width="0.1" height="15.0" fill="rgb(247,32,36)" rx="2" ry="2" />
<text  x="688.51" y="591.5" ></text>
</g>
<g >
<title>CMutableTransaction::Unserialize&lt;CDataStream&gt; (3,775 samples, 4.31%)</title><rect x="466.7" y="437" width="50.9" height="15.0" fill="rgb(228,187,40)" rx="2" ry="2" />
<text  x="469.71" y="447.5" >CMuta..</text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="92.3" y="373" width="0.2" height="15.0" fill="rgb(222,101,53)" rx="2" ry="2" />
<text  x="95.34" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (595 samples, 0.68%)</title><rect x="1135.8" y="645" width="8.0" height="15.0" fill="rgb(218,184,53)" rx="2" ry="2" />
<text  x="1138.80" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (25 samples, 0.03%)</title><rect x="1044.4" y="613" width="0.3" height="15.0" fill="rgb(219,186,22)" rx="2" ry="2" />
<text  x="1047.36" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (26 samples, 0.03%)</title><rect x="595.3" y="581" width="0.3" height="15.0" fill="rgb(210,154,45)" rx="2" ry="2" />
<text  x="598.28" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned int&gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="883.6" y="581" width="0.2" height="15.0" fill="rgb(227,124,3)" rx="2" ry="2" />
<text  x="886.59" y="591.5" ></text>
</g>
<g >
<title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::shrink_to_fit (14 samples, 0.02%)</title><rect x="491.9" y="213" width="0.2" height="15.0" fill="rgb(213,205,31)" rx="2" ry="2" />
<text  x="494.93" y="223.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (25 samples, 0.03%)</title><rect x="45.3" y="597" width="0.4" height="15.0" fill="rgb(254,78,5)" rx="2" ry="2" />
<text  x="48.33" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (24 samples, 0.03%)</title><rect x="1102.9" y="661" width="0.3" height="15.0" fill="rgb(205,175,11)" rx="2" ry="2" />
<text  x="1105.90" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;::_M_v (10 samples, 0.01%)</title><rect x="995.3" y="613" width="0.1" height="15.0" fill="rgb(227,202,42)" rx="2" ry="2" />
<text  x="998.28" y="623.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (52 samples, 0.06%)</title><rect x="573.0" y="613" width="0.7" height="15.0" fill="rgb(230,17,24)" rx="2" ry="2" />
<text  x="576.02" y="623.5" ></text>
</g>
<g >
<title>CuckooCache::bit_packed_atomic_flags::bit_packed_atomic_flags (15 samples, 0.02%)</title><rect x="31.3" y="645" width="0.2" height="15.0" fill="rgb(210,105,43)" rx="2" ry="2" />
<text  x="34.27" y="655.5" ></text>
</g>
<g >
<title>CDataStream::read (390 samples, 0.45%)</title><rect x="404.2" y="629" width="5.2" height="15.0" fill="rgb(238,56,24)" rx="2" ry="2" />
<text  x="407.16" y="639.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, COutPoint&gt; (192 samples, 0.22%)</title><rect x="526.8" y="245" width="2.6" height="15.0" fill="rgb(206,97,46)" rx="2" ry="2" />
<text  x="529.77" y="255.5" ></text>
</g>
<g >
<title>MakeUnique&lt;interfaces::(anonymous namespace)::LockImpl, AnnotatedMixin&lt;std::recursive_mutex&gt;&amp;, char const  (852 samples, 0.97%)</title><rect x="935.7" y="629" width="11.5" height="15.0" fill="rgb(216,112,24)" rx="2" ry="2" />
<text  x="938.72" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt;, CAddressBookData, std::less&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; &gt;, std::allocator&lt;std::pair&lt;boost::variant&lt;CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown&gt; const, CAddressBookData&gt; &gt; &gt;::operator[] (19 samples, 0.02%)</title><rect x="1061.9" y="677" width="0.3" height="15.0" fill="rgb(227,41,45)" rx="2" ry="2" />
<text  x="1064.95" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_M_ptr (42 samples, 0.05%)</title><rect x="876.9" y="485" width="0.5" height="15.0" fill="rgb(245,69,35)" rx="2" ry="2" />
<text  x="879.85" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::_M_ptr (19 samples, 0.02%)</title><rect x="949.3" y="581" width="0.3" height="15.0" fill="rgb(235,200,45)" rx="2" ry="2" />
<text  x="952.33" y="591.5" ></text>
</g>
<g >
<title>std::advance&lt;unsigned char const*, unsigned long&gt; (8 samples, 0.01%)</title><rect x="1099.2" y="629" width="0.1" height="15.0" fill="rgb(251,130,2)" rx="2" ry="2" />
<text  x="1102.22" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::clear (11 samples, 0.01%)</title><rect x="517.4" y="405" width="0.2" height="15.0" fill="rgb(235,135,34)" rx="2" ry="2" />
<text  x="520.43" y="415.5" ></text>
</g>
<g >
<title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (164 samples, 0.19%)</title><rect x="180.9" y="469" width="2.2" height="15.0" fill="rgb(245,116,27)" rx="2" ry="2" />
<text  x="183.93" y="479.5" ></text>
</g>
<g >
<title>pop_lock (42 samples, 0.05%)</title><rect x="835.8" y="597" width="0.6" height="15.0" fill="rgb(251,122,31)" rx="2" ry="2" />
<text  x="838.85" y="607.5" ></text>
</g>
<g >
<title>CSHA256::CSHA256 (8 samples, 0.01%)</title><rect x="1053.3" y="645" width="0.1" height="15.0" fill="rgb(233,53,37)" rx="2" ry="2" />
<text  x="1056.27" y="655.5" ></text>
</g>
<g >
<title>ReadCompactSize&lt;CDataStream&gt; (22 samples, 0.03%)</title><rect x="574.2" y="581" width="0.3" height="15.0" fill="rgb(245,101,46)" rx="2" ry="2" />
<text  x="577.17" y="591.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, CScript&gt; (137 samples, 0.16%)</title><rect x="547.4" y="229" width="1.8" height="15.0" fill="rgb(232,166,39)" rx="2" ry="2" />
<text  x="550.38" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_M_addr (13 samples, 0.01%)</title><rect x="965.3" y="565" width="0.2" height="15.0" fill="rgb(227,204,21)" rx="2" ry="2" />
<text  x="968.28" y="575.5" ></text>
</g>
<g >
<title>__db_vrfy_pgset_inc (645 samples, 0.74%)</title><rect x="112.7" y="501" width="8.7" height="15.0" fill="rgb(223,140,16)" rx="2" ry="2" />
<text  x="115.70" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;CScriptID, CScript, SaltedIDHasher, std::equal_to&lt;CScriptID&gt;, std::allocator&lt;std::pair&lt;CScriptID const, CScript&gt; &gt; &gt;::operator[] (402 samples, 0.46%)</title><rect x="735.4" y="645" width="5.5" height="15.0" fill="rgb(216,9,14)" rx="2" ry="2" />
<text  x="738.44" y="655.5" ></text>
</g>
<g >
<title>__db_vrfy_getpageinfo (62 samples, 0.07%)</title><rect x="162.7" y="565" width="0.8" height="15.0" fill="rgb(240,190,19)" rx="2" ry="2" />
<text  x="165.71" y="575.5" ></text>
</g>
<g >
<title>__dbc_iget (64 samples, 0.07%)</title><rect x="66.3" y="517" width="0.9" height="15.0" fill="rgb(212,200,33)" rx="2" ry="2" />
<text  x="69.32" y="527.5" ></text>
</g>
<g >
<title>BerkeleyBatch::VerifyDatabaseFile (20 samples, 0.02%)</title><rect x="1144.6" y="677" width="0.2" height="15.0" fill="rgb(211,151,9)" rx="2" ry="2" />
<text  x="1147.57" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, uint256&gt;, true&gt; &gt;::allocate (54 samples, 0.06%)</title><rect x="928.4" y="533" width="0.7" height="15.0" fill="rgb(242,76,47)" rx="2" ry="2" />
<text  x="931.40" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::insert&lt;char const*, void&gt; (9,690 samples, 11.07%)</title><rect x="196.1" y="661" width="130.6" height="15.0" fill="rgb(231,174,54)" rx="2" ry="2" />
<text  x="199.12" y="671.5" >std::vector&lt;char..</text>
</g>
<g >
<title>std::pair&lt;void*, CLockLocation&gt;::pair&lt;void*&amp;, true&gt; (35 samples, 0.04%)</title><rect x="830.8" y="549" width="0.5" height="15.0" fill="rgb(253,195,4)" rx="2" ry="2" />
<text  x="833.82" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (11 samples, 0.01%)</title><rect x="180.8" y="597" width="0.1" height="15.0" fill="rgb(237,85,4)" rx="2" ry="2" />
<text  x="183.78" y="607.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CSizeComputer, long&gt; (46 samples, 0.05%)</title><rect x="1035.3" y="469" width="0.6" height="15.0" fill="rgb(248,228,53)" rx="2" ry="2" />
<text  x="1038.28" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::max_size (13 samples, 0.01%)</title><rect x="483.2" y="309" width="0.2" height="15.0" fill="rgb(229,129,20)" rx="2" ry="2" />
<text  x="486.19" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (15 samples, 0.02%)</title><rect x="1048.2" y="597" width="0.2" height="15.0" fill="rgb(226,23,19)" rx="2" ry="2" />
<text  x="1051.19" y="607.5" ></text>
</g>
<g >
<title>Dbt::~Dbt (10 samples, 0.01%)</title><rect x="191.7" y="661" width="0.1" height="15.0" fill="rgb(234,167,42)" rx="2" ry="2" />
<text  x="194.71" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_construct_node&lt;unsigned long const&amp;, char*&amp;&gt; (38 samples, 0.04%)</title><rect x="848.8" y="341" width="0.5" height="15.0" fill="rgb(232,47,0)" rx="2" ry="2" />
<text  x="851.77" y="351.5" ></text>
</g>
<g >
<title>LeaveCritical (37 samples, 0.04%)</title><rect x="734.6" y="629" width="0.5" height="15.0" fill="rgb(214,130,36)" rx="2" ry="2" />
<text  x="737.64" y="639.5" ></text>
</g>
<g >
<title>ser_readdata32&lt;CDataStream&gt; (14 samples, 0.02%)</title><rect x="444.6" y="597" width="0.2" height="15.0" fill="rgb(212,38,53)" rx="2" ry="2" />
<text  x="447.65" y="607.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="158.0" y="533" width="0.1" height="15.0" fill="rgb(225,34,18)" rx="2" ry="2" />
<text  x="160.97" y="543.5" ></text>
</g>
<g >
<title>ser_readdata8&lt;CDataStream&gt; (11 samples, 0.01%)</title><rect x="486.1" y="341" width="0.1" height="15.0" fill="rgb(209,222,38)" rx="2" ry="2" />
<text  x="489.07" y="351.5" ></text>
</g>
<g >
<title>CSHA256::Write (164 samples, 0.19%)</title><rect x="180.9" y="181" width="2.2" height="15.0" fill="rgb(242,203,18)" rx="2" ry="2" />
<text  x="183.93" y="191.5" ></text>
</g>
<g >
<title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt;, std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (30 samples, 0.03%)</title><rect x="881.9" y="645" width="0.4" height="15.0" fill="rgb(232,64,44)" rx="2" ry="2" />
<text  x="884.91" y="655.5" ></text>
</g>
<g >
<title>_mm_set_epi64x (27 samples, 0.03%)</title><rect x="1111.2" y="357" width="0.4" height="15.0" fill="rgb(210,102,47)" rx="2" ry="2" />
<text  x="1114.20" y="367.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (12 samples, 0.01%)</title><rect x="882.2" y="629" width="0.1" height="15.0" fill="rgb(249,171,53)" rx="2" ry="2" />
<text  x="885.15" y="639.5" ></text>
</g>
<g >
<title>__dbc_cleanup (13 samples, 0.01%)</title><rect x="126.8" y="453" width="0.2" height="15.0" fill="rgb(252,55,8)" rx="2" ry="2" />
<text  x="129.78" y="463.5" ></text>
</g>
<g >
<title>__db_put (716 samples, 0.82%)</title><rect x="147.6" y="549" width="9.7" height="15.0" fill="rgb(232,79,47)" rx="2" ry="2" />
<text  x="150.65" y="559.5" ></text>
</g>
<g >
<title>CDataStream::read (20 samples, 0.02%)</title><rect x="409.5" y="597" width="0.3" height="15.0" fill="rgb(242,191,21)" rx="2" ry="2" />
<text  x="412.51" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;char*, zero_after_free_allocator&lt;char&gt; &gt; (97 samples, 0.11%)</title><rect x="634.3" y="581" width="1.3" height="15.0" fill="rgb(234,54,19)" rx="2" ry="2" />
<text  x="637.26" y="591.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned char*, std::vector&lt;unsigned char, secure_allocator&lt;unsigned char&gt; &gt; &gt; (13 samples, 0.01%)</title><rect x="1094.0" y="549" width="0.1" height="15.0" fill="rgb(237,146,43)" rx="2" ry="2" />
<text  x="1096.96" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (12 samples, 0.01%)</title><rect x="733.1" y="533" width="0.2" height="15.0" fill="rgb(247,117,30)" rx="2" ry="2" />
<text  x="736.09" y="543.5" ></text>
</g>
<g >
<title>COutPoint::Serialize&lt;CHashWriter&gt; (173 samples, 0.20%)</title><rect x="527.0" y="197" width="2.3" height="15.0" fill="rgb(239,97,16)" rx="2" ry="2" />
<text  x="530.00" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Vector_base (44 samples, 0.05%)</title><rect x="1001.6" y="517" width="0.6" height="15.0" fill="rgb(205,165,23)" rx="2" ry="2" />
<text  x="1004.60" y="527.5" ></text>
</g>
<g >
<title>CSHA256::Write (8 samples, 0.01%)</title><rect x="554.7" y="229" width="0.1" height="15.0" fill="rgb(251,157,0)" rx="2" ry="2" />
<text  x="557.73" y="239.5" ></text>
</g>
<g >
<title>std::forward&lt;long&amp;&gt; (11 samples, 0.01%)</title><rect x="963.8" y="645" width="0.2" height="15.0" fill="rgb(249,152,6)" rx="2" ry="2" />
<text  x="966.84" y="655.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CTxIn&gt; (370 samples, 0.42%)</title><rect x="1026.6" y="533" width="5.0" height="15.0" fill="rgb(251,155,17)" rx="2" ry="2" />
<text  x="1029.57" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;CTransaction const,  (60 samples, 0.07%)</title><rect x="34.9" y="629" width="0.8" height="15.0" fill="rgb(240,7,12)" rx="2" ry="2" />
<text  x="37.92" y="639.5" ></text>
</g>
<g >
<title>__db_cursor (29 samples, 0.03%)</title><rect x="164.3" y="549" width="0.4" height="15.0" fill="rgb(230,192,1)" rx="2" ry="2" />
<text  x="167.30" y="559.5" ></text>
</g>
<g >
<title>CHash160::Finalize (1,255 samples, 1.43%)</title><rect x="708.5" y="613" width="16.9" height="15.0" fill="rgb(205,203,44)" rx="2" ry="2" />
<text  x="711.47" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::clear (88 samples, 0.10%)</title><rect x="410.5" y="533" width="1.2" height="15.0" fill="rgb(205,98,30)" rx="2" ry="2" />
<text  x="413.51" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CScriptID const, CScript&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;CScriptID const, CScript&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CScriptID const&amp;&gt;, std::tuple&lt;&gt; &gt; (97 samples, 0.11%)</title><rect x="826.6" y="565" width="1.3" height="15.0" fill="rgb(232,35,9)" rx="2" ry="2" />
<text  x="829.62" y="575.5" ></text>
</g>
<g >
<title>std::__addressof&lt;unsigned char&gt; (175 samples, 0.20%)</title><rect x="1069.3" y="645" width="2.4" height="15.0" fill="rgb(231,106,14)" rx="2" ry="2" />
<text  x="1072.31" y="655.5" ></text>
</g>
<g >
<title>__bam_iitem (47 samples, 0.05%)</title><rect x="126.2" y="437" width="0.6" height="15.0" fill="rgb(252,150,46)" rx="2" ry="2" />
<text  x="129.15" y="447.5" ></text>
</g>
<g >
<title>__bam_vrfy_subtree (4,413 samples, 5.04%)</title><rect x="78.0" y="565" width="59.5" height="15.0" fill="rgb(246,31,41)" rx="2" ry="2" />
<text  x="81.01" y="575.5" >__bam_..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (14 samples, 0.02%)</title><rect x="597.3" y="517" width="0.2" height="15.0" fill="rgb(251,53,18)" rx="2" ry="2" />
<text  x="600.35" y="527.5" ></text>
</g>
<g >
<title>CTransaction::IsCoinBase (40 samples, 0.05%)</title><rect x="1022.7" y="661" width="0.5" height="15.0" fill="rgb(237,92,48)" rx="2" ry="2" />
<text  x="1025.67" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;uint256, CWalletTx, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt; &gt;::end (8 samples, 0.01%)</title><rect x="18.9" y="741" width="0.2" height="15.0" fill="rgb(227,80,34)" rx="2" ry="2" />
<text  x="21.95" y="751.5" ></text>
</g>
<g >
<title>BlockHasher::operator (30 samples, 0.03%)</title><rect x="962.5" y="581" width="0.4" height="15.0" fill="rgb(242,190,9)" rx="2" ry="2" />
<text  x="965.47" y="591.5" ></text>
</g>
<g >
<title>CDataStream::operator&gt;&gt;&lt;uint256&amp;&gt; (32 samples, 0.04%)</title><rect x="574.9" y="629" width="0.4" height="15.0" fill="rgb(226,14,34)" rx="2" ry="2" />
<text  x="577.88" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::allocator&lt;std::pair&lt;CKeyID const, CKeyMetadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;CKeyID&gt;, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (62 samples, 0.07%)</title><rect x="888.7" y="613" width="0.9" height="15.0" fill="rgb(247,128,10)" rx="2" ry="2" />
<text  x="891.73" y="623.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (34 samples, 0.04%)</title><rect x="403.2" y="597" width="0.5" height="15.0" fill="rgb(229,151,38)" rx="2" ry="2" />
<text  x="406.19" y="607.5" ></text>
</g>
<g >
<title>CHashWriter::write (9 samples, 0.01%)</title><rect x="533.6" y="261" width="0.1" height="15.0" fill="rgb(229,180,53)" rx="2" ry="2" />
<text  x="536.56" y="271.5" ></text>
</g>
<g >
<title>std::__addressof&lt;unsigned char&gt; (26 samples, 0.03%)</title><rect x="671.7" y="629" width="0.4" height="15.0" fill="rgb(210,137,14)" rx="2" ry="2" />
<text  x="674.75" y="639.5" ></text>
</g>
<g >
<title>CKey::CKey (1,661 samples, 1.90%)</title><rect x="845.7" y="517" width="22.4" height="15.0" fill="rgb(243,62,44)" rx="2" ry="2" />
<text  x="848.71" y="527.5" >C..</text>
</g>
<g >
<title>[unknown] (17 samples, 0.02%)</title><rect x="146.8" y="325" width="0.2" height="15.0" fill="rgb(208,99,41)" rx="2" ry="2" />
<text  x="149.77" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (23 samples, 0.03%)</title><rect x="1052.5" y="597" width="0.3" height="15.0" fill="rgb(253,147,21)" rx="2" ry="2" />
<text  x="1055.50" y="607.5" ></text>
</g>
<g >
<title>__lock_get_internal (22 samples, 0.03%)</title><rect x="114.9" y="373" width="0.3" height="15.0" fill="rgb(254,70,38)" rx="2" ry="2" />
<text  x="117.86" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;zero_after_free_allocator&lt;char&gt; &gt;::destroy&lt;char&gt; (16 samples, 0.02%)</title><rect x="1152.6" y="741" width="0.2" height="15.0" fill="rgb(238,20,40)" rx="2" ry="2" />
<text  x="1155.56" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::destroy&lt;COutPoint&gt; (13 samples, 0.01%)</title><rect x="1047.4" y="581" width="0.1" height="15.0" fill="rgb(249,42,51)" rx="2" ry="2" />
<text  x="1050.35" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (16 samples, 0.02%)</title><rect x="855.2" y="325" width="0.2" height="15.0" fill="rgb(207,7,38)" rx="2" ry="2" />
<text  x="858.23" y="335.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (23 samples, 0.03%)</title><rect x="162.2" y="469" width="0.3" height="15.0" fill="rgb(219,137,49)" rx="2" ry="2" />
<text  x="165.20" y="479.5" ></text>
</g>
<g >
<title>__env_alloc (23 samples, 0.03%)</title><rect x="180.4" y="565" width="0.4" height="15.0" fill="rgb(241,60,40)" rx="2" ry="2" />
<text  x="183.45" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (10 samples, 0.01%)</title><rect x="612.7" y="469" width="0.1" height="15.0" fill="rgb(205,62,22)" rx="2" ry="2" />
<text  x="615.67" y="479.5" ></text>
</g>
<g >
<title>__dbc_iget (263 samples, 0.30%)</title><rect x="165.3" y="549" width="3.6" height="15.0" fill="rgb(207,167,7)" rx="2" ry="2" />
<text  x="168.31" y="559.5" ></text>
</g>
<g >
<title>CHash160::Finalize (1,369 samples, 1.56%)</title><rect x="767.1" y="581" width="18.4" height="15.0" fill="rgb(232,15,11)" rx="2" ry="2" />
<text  x="770.09" y="591.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (284 samples, 0.32%)</title><rect x="1140.0" y="277" width="3.8" height="15.0" fill="rgb(239,158,51)" rx="2" ry="2" />
<text  x="1142.99" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;interfaces::(anonymous namespace)::LockImpl, std::default_delete&lt;interfaces::(anonymous namespace)::LockImpl&gt; &gt;::release (31 samples, 0.04%)</title><rect x="949.2" y="613" width="0.4" height="15.0" fill="rgb(205,96,34)" rx="2" ry="2" />
<text  x="952.17" y="623.5" ></text>
</g>
<g >
<title>__db_retcopy (177 samples, 0.20%)</title><rect x="359.7" y="629" width="2.4" height="15.0" fill="rgb(224,88,7)" rx="2" ry="2" />
<text  x="362.73" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (13 samples, 0.01%)</title><rect x="482.2" y="213" width="0.2" height="15.0" fill="rgb(213,186,8)" rx="2" ry="2" />
<text  x="485.23" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (13 samples, 0.01%)</title><rect x="454.8" y="485" width="0.2" height="15.0" fill="rgb(215,66,36)" rx="2" ry="2" />
<text  x="457.78" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_lower_bound (18 samples, 0.02%)</title><rect x="613.0" y="485" width="0.3" height="15.0" fill="rgb(223,218,31)" rx="2" ry="2" />
<text  x="616.02" y="495.5" ></text>
</g>
<g >
<title>__os_malloc (25 samples, 0.03%)</title><rect x="79.5" y="453" width="0.4" height="15.0" fill="rgb(245,77,29)" rx="2" ry="2" />
<text  x="82.52" y="463.5" ></text>
</g>
<g >
<title>__bam_search (173 samples, 0.20%)</title><rect x="70.7" y="485" width="2.3" height="15.0" fill="rgb(242,163,7)" rx="2" ry="2" />
<text  x="73.67" y="495.5" ></text>
</g>
<g >
<title>Unserialize_impl&lt;CDataStream, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (965 samples, 1.10%)</title><rect x="471.4" y="373" width="13.0" height="15.0" fill="rgb(250,21,30)" rx="2" ry="2" />
<text  x="474.44" y="383.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (11 samples, 0.01%)</title><rect x="117.3" y="453" width="0.1" height="15.0" fill="rgb(244,2,41)" rx="2" ry="2" />
<text  x="120.30" y="463.5" ></text>
</g>
<g >
<title>__memp_fput (31 samples, 0.04%)</title><rect x="116.0" y="405" width="0.4" height="15.0" fill="rgb(233,168,41)" rx="2" ry="2" />
<text  x="118.99" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::base (13 samples, 0.01%)</title><rect x="1038.2" y="645" width="0.1" height="15.0" fill="rgb(223,164,16)" rx="2" ry="2" />
<text  x="1041.16" y="655.5" ></text>
</g>
<g >
<title>uint256::uint256 (31 samples, 0.04%)</title><rect x="1103.3" y="677" width="0.4" height="15.0" fill="rgb(211,24,11)" rx="2" ry="2" />
<text  x="1106.28" y="687.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CDataStream, KeyOriginInfo&amp;&gt; (258 samples, 0.29%)</title><rect x="395.4" y="613" width="3.5" height="15.0" fill="rgb(208,141,24)" rx="2" ry="2" />
<text  x="398.42" y="623.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::pair&lt;void*, void*&gt; const, std::vector&lt;std::pair&lt;void*, CLockLocation&gt;, std::allocator&lt;std::pair&lt;void*, CLockLocation&gt; &gt; &gt; &gt; &gt;::operator (19 samples, 0.02%)</title><rect x="731.5" y="517" width="0.2" height="15.0" fill="rgb(218,226,26)" rx="2" ry="2" />
<text  x="734.49" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="525.7" y="261" width="0.1" height="15.0" fill="rgb(238,52,12)" rx="2" ry="2" />
<text  x="528.65" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (43 samples, 0.05%)</title><rect x="461.0" y="549" width="0.5" height="15.0" fill="rgb(237,67,19)" rx="2" ry="2" />
<text  x="463.95" y="559.5" ></text>
</g>
<g >
<title>__memp_fget (16 samples, 0.02%)</title><rect x="1143.9" y="437" width="0.2" height="15.0" fill="rgb(220,228,19)" rx="2" ry="2" />
<text  x="1146.88" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (14 samples, 0.02%)</title><rect x="97.8" y="341" width="0.2" height="15.0" fill="rgb(235,26,53)" rx="2" ry="2" />
<text  x="100.78" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;COutPoint const&amp;&gt; (9 samples, 0.01%)</title><rect x="1044.8" y="613" width="0.1" height="15.0" fill="rgb(220,38,52)" rx="2" ry="2" />
<text  x="1047.77" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, char*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, char*&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::_M_construct_node&lt;unsigned long&amp;, char*&amp;&gt; (34 samples, 0.04%)</title><rect x="674.2" y="501" width="0.5" height="15.0" fill="rgb(217,70,31)" rx="2" ry="2" />
<text  x="677.20" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CScriptID, std::pair&lt;CScriptID const, CScript&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (15 samples, 0.02%)</title><rect x="735.5" y="597" width="0.2" height="15.0" fill="rgb(239,199,43)" rx="2" ry="2" />
<text  x="738.54" y="607.5" ></text>
</g>
<g >
<title>__libc_pread (48 samples, 0.05%)</title><rect x="98.9" y="357" width="0.6" height="15.0" fill="rgb(224,65,9)" rx="2" ry="2" />
<text  x="101.89" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (176 samples, 0.20%)</title><rect x="569.0" y="517" width="2.4" height="15.0" fill="rgb(212,123,53)" rx="2" ry="2" />
<text  x="572.03" y="527.5" ></text>
</g>
<g >
<title>std::allocator&lt;CTxOut&gt;::allocator (10 samples, 0.01%)</title><rect x="1058.7" y="469" width="0.1" height="15.0" fill="rgb(232,218,26)" rx="2" ry="2" />
<text  x="1061.66" y="479.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (1,562 samples, 1.78%)</title><rect x="519.4" y="421" width="21.1" height="15.0" fill="rgb(246,131,18)" rx="2" ry="2" />
<text  x="522.44" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;CKeyID, std::pair&lt;CKeyID const, CKeyMetadata&gt;, std::__detail::_Select1st, SaltedIDHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (101 samples, 0.12%)</title><rect x="889.7" y="629" width="1.3" height="15.0" fill="rgb(242,6,23)" rx="2" ry="2" />
<text  x="892.68" y="639.5" ></text>
</g>
<g >
<title>CWalletTx::GetHash (17 samples, 0.02%)</title><rect x="1019.3" y="677" width="0.3" height="15.0" fill="rgb(222,105,20)" rx="2" ry="2" />
<text  x="1022.34" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::size (8 samples, 0.01%)</title><rect x="474.1" y="149" width="0.1" height="15.0" fill="rgb(243,124,35)" rx="2" ry="2" />
<text  x="477.09" y="159.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CSizeComputer, unsigned int&gt; (14 samples, 0.02%)</title><rect x="1031.3" y="485" width="0.2" height="15.0" fill="rgb(249,87,39)" rx="2" ry="2" />
<text  x="1034.28" y="495.5" ></text>
</g>
<g >
<title>ChainActive (8 samples, 0.01%)</title><rect x="55.1" y="613" width="0.1" height="15.0" fill="rgb(249,21,3)" rx="2" ry="2" />
<text  x="58.06" y="623.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (8 samples, 0.01%)</title><rect x="664.0" y="565" width="0.1" height="15.0" fill="rgb(226,217,9)" rx="2" ry="2" />
<text  x="667.01" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, zero_after_free_allocator&lt;char&gt; &gt; &gt;::__normal_iterator (33 samples, 0.04%)</title><rect x="326.3" y="629" width="0.4" height="15.0" fill="rgb(237,53,38)" rx="2" ry="2" />
<text  x="329.26" y="639.5" ></text>
</g>
<g >
<title>Dbt::get_flags (17 samples, 0.02%)</title><rect x="191.4" y="661" width="0.2" height="15.0" fill="rgb(235,160,29)" rx="2" ry="2" />
<text  x="194.40" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;long const, CWalletTx*&gt; &gt;::_Rb_tree_const_iterator (10 samples, 0.01%)</title><rect x="1016.9" y="661" width="0.1" height="15.0" fill="rgb(221,76,34)" rx="2" ry="2" />
<text  x="1019.90" y="671.5" ></text>
</g>
<g >
<title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (54 samples, 0.06%)</title><rect x="546.5" y="165" width="0.7" height="15.0" fill="rgb(218,11,5)" rx="2" ry="2" />
<text  x="549.47" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (152 samples, 0.17%)</title><rect x="1087.0" y="533" width="2.1" height="15.0" fill="rgb(226,157,26)" rx="2" ry="2" />
<text  x="1090.04" y="543.5" ></text>
</g>
<g >
<title>base_blob&lt;256u&gt;::IsNull (8 samples, 0.01%)</title><rect x="1023.0" y="629" width="0.1" height="15.0" fill="rgb(249,229,1)" rx="2" ry="2" />
<text  x="1025.98" y="639.5" ></text>
</g>
<g >
<title>zero_after_free_allocator&lt;char&gt;::deallocate (179 samples, 0.20%)</title><rect x="388.2" y="613" width="2.4" height="15.0" fill="rgb(219,180,44)" rx="2" ry="2" />
<text  x="391.22" y="623.5" ></text>
</g>
<g >
<title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (164 samples, 0.19%)</title><rect x="180.9" y="293" width="2.2" height="15.0" fill="rgb(221,223,24)" rx="2" ry="2" />
<text  x="183.93" y="303.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (32 samples, 0.04%)</title><rect x="815.8" y="405" width="0.4" height="15.0" fill="rgb(244,158,41)" rx="2" ry="2" />
<text  x="818.81" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (30 samples, 0.03%)</title><rect x="565.8" y="501" width="0.4" height="15.0" fill="rgb(244,23,9)" rx="2" ry="2" />
<text  x="568.84" y="511.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (694 samples, 0.79%)</title><rect x="59.7" y="565" width="9.3" height="15.0" fill="rgb(210,56,40)" rx="2" ry="2" />
<text  x="62.69" y="575.5" ></text>
</g>
<g >
<title>__bam_cmp (44 samples, 0.05%)</title><rect x="107.3" y="405" width="0.6" height="15.0" fill="rgb(231,57,32)" rx="2" ry="2" />
<text  x="110.28" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (22 samples, 0.03%)</title><rect x="654.3" y="501" width="0.3" height="15.0" fill="rgb(230,116,24)" rx="2" ry="2" />
<text  x="657.28" y="511.5" ></text>
</g>
<g >
<title>CWalletTx::GetHash (64 samples, 0.07%)</title><rect x="34.9" y="645" width="0.8" height="15.0" fill="rgb(222,45,51)" rx="2" ry="2" />
<text  x="37.86" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CWalletTx&gt;, std::allocator&lt;std::pair&lt;uint256 const, CWalletTx&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (87 samples, 0.10%)</title><rect x="991.9" y="597" width="1.2" height="15.0" fill="rgb(244,69,15)" rx="2" ry="2" />
<text  x="994.94" y="607.5" ></text>
</g>
<g >
<title>Unserialize&lt;CDataStream, CScript&amp;&gt; (9 samples, 0.01%)</title><rect x="26.3" y="757" width="0.1" height="15.0" fill="rgb(231,76,20)" rx="2" ry="2" />
<text  x="29.29" y="767.5" ></text>
</g>
<g >
<title>SerializeHash&lt;CTransaction&gt; (164 samples, 0.19%)</title><rect x="183.1" y="533" width="2.3" height="15.0" fill="rgb(253,194,14)" rx="2" ry="2" />
<text  x="186.14" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;CKeyID const, CKey&gt;, true&gt; &gt;::construct&lt;std::pair&lt;CKeyID const, CKey&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;CKeyID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (9 samples, 0.01%)</title><rect x="1148.3" y="757" width="0.1" height="15.0" fill="rgb(249,2,32)" rx="2" ry="2" />
<text  x="1151.30" y="767.5" ></text>
</g>
<g >
<title>std::operator==&lt;char*&gt; (74 samples, 0.08%)</title><rect x="318.1" y="565" width="1.0" height="15.0" fill="rgb(236,225,21)" rx="2" ry="2" />
<text  x="321.11" y="575.5" ></text>
</g>
<g >
<title>__db_lget (23 samples, 0.03%)</title><rect x="118.9" y="405" width="0.4" height="15.0" fill="rgb(206,22,25)" rx="2" ry="2" />
<text  x="121.94" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (9 samples, 0.01%)</title><rect x="815.5" y="357" width="0.1" height="15.0" fill="rgb(244,133,46)" rx="2" ry="2" />
<text  x="818.51" y="367.5" ></text>
</g>
<g >
<title>__mutex_alloc_int (11 samples, 0.01%)</title><rect x="98.6" y="373" width="0.2" height="15.0" fill="rgb(254,52,52)" rx="2" ry="2" />
<text  x="101.63" y="383.5" ></text>
</g>
<g >
<title>CChain::Contains (125 samples, 0.14%)</title><rect x="952.0" y="645" width="1.6" height="15.0" fill="rgb(244,216,20)" rx="2" ry="2" />
<text  x="954.96" y="655.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, CBlockIndex*&gt;*, std::vector&lt;std::pair&lt;int, CBlockIndex*&gt;, std::allocator&lt;std::pair&lt;int, CBlockIndex*&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (9 samples, 0.01%)</title><rect x="52.6" y="597" width="0.2" height="15.0" fill="rgb(245,97,11)" rx="2" ry="2" />
<text  x="55.64" y="607.5" ></text>
</g>
<g >
<title>ChainActive (103 samples, 0.12%)</title><rect x="953.6" y="645" width="1.4" height="15.0" fill="rgb(250,48,32)" rx="2" ry="2" />
<text  x="956.64" y="655.5" ></text>
</g>
<g >
<title>UnserializeTransaction&lt;CDataStream, CMutableTransaction&gt; (3,762 samples, 4.30%)</title><rect x="466.9" y="421" width="50.7" height="15.0" fill="rgb(237,165,53)" rx="2" ry="2" />
<text  x="469.88" y="431.5" >Unser..</text>
</g>
<g >
<title>CheckProofOfWork (35 samples, 0.04%)</title><rect x="47.2" y="661" width="0.5" height="15.0" fill="rgb(216,195,11)" rx="2" ry="2" />
<text  x="50.25" y="671.5" ></text>
</g>
<g >
<title>__tls_init (11 samples, 0.01%)</title><rect x="881.1" y="565" width="0.1" height="15.0" fill="rgb(217,120,5)" rx="2" ry="2" />
<text  x="884.09" y="575.5" ></text>
</g>
<g >
<title>operator- (8 samples, 0.01%)</title><rect x="725.5" y="613" width="0.1" height="15.0" fill="rgb(215,76,3)" rx="2" ry="2" />
<text  x="728.49" y="623.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (9 samples, 0.01%)</title><rect x="136.2" y="453" width="0.1" height="15.0" fill="rgb(224,49,7)" rx="2" ry="2" />
<text  x="139.22" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;char* const, unsigned long&gt;, false, false&gt;::operator (11 samples, 0.01%)</title><rect x="652.8" y="549" width="0.2" height="15.0" fill="rgb(253,118,17)" rx="2" ry="2" />
<text  x="655.83" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (66 samples, 0.08%)</title><rect x="941.4" y="485" width="0.9" height="15.0" fill="rgb(229,49,2)" rx="2" ry="2" />
<text  x="944.39" y="495.5" ></text>
</g>
<g >
<title>CHashWriter::GetHash (116 samples, 0.13%)</title><rect x="541.4" y="405" width="1.5" height="15.0" fill="rgb(216,135,2)" rx="2" ry="2" />
<text  x="544.37" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::max_size (24 samples, 0.03%)</title><rect x="1101.7" y="661" width="0.3" height="15.0" fill="rgb(209,188,51)" rx="2" ry="2" />
<text  x="1104.66" y="671.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter&gt; (9 samples, 0.01%)</title><rect x="528.2" y="133" width="0.1" height="15.0" fill="rgb(218,164,27)" rx="2" ry="2" />
<text  x="531.17" y="143.5" ></text>
</g>
<g >
<title>CHash256::Finalize (149 samples, 0.17%)</title><rect x="520.5" y="389" width="2.0" height="15.0" fill="rgb(205,128,37)" rx="2" ry="2" />
<text  x="523.45" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;CTransaction&gt;,  (21 samples, 0.02%)</title><rect x="1060.3" y="581" width="0.3" height="15.0" fill="rgb(214,195,47)" rx="2" ry="2" />
<text  x="1063.31" y="591.5" ></text>
</g>
<g >
<title>CScript::Unserialize&lt;CDataStream&gt; (250 samples, 0.29%)</title><rect x="475.5" y="261" width="3.4" height="15.0" fill="rgb(249,207,8)" rx="2" ry="2" />
<text  x="478.52" y="271.5" ></text>
</g>
<g >
<title>__db_vrfy_ovfl_structure (12 samples, 0.01%)</title><rect x="1144.6" y="517" width="0.2" height="15.0" fill="rgb(217,6,51)" rx="2" ry="2" />
<text  x="1147.61" y="527.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (223 samples, 0.25%)</title><rect x="1062.2" y="677" width="3.0" height="15.0" fill="rgb(224,60,23)" rx="2" ry="2" />
<text  x="1065.21" y="687.5" ></text>
</g>
<g >
<title>__memp_fput (18 samples, 0.02%)</title><rect x="357.5" y="597" width="0.3" height="15.0" fill="rgb(249,78,32)" rx="2" ry="2" />
<text  x="360.51" y="607.5" ></text>
</g>
<g >
<title>__dbc_iput (44 samples, 0.05%)</title><rect x="65.7" y="517" width="0.5" height="15.0" fill="rgb(210,35,19)" rx="2" ry="2" />
<text  x="68.66" y="527.5" ></text>
</g>
<g >
<title>Serialize&lt;CSizeComputer, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (328 samples, 0.37%)</title><rect x="1032.6" y="565" width="4.4" height="15.0" fill="rgb(209,189,35)" rx="2" ry="2" />
<text  x="1035.56" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (28 samples, 0.03%)</title><rect x="593.6" y="565" width="0.3" height="15.0" fill="rgb(248,190,9)" rx="2" ry="2" />
<text  x="596.56" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;CTxOut*, unsigned long&gt; (74 samples, 0.08%)</title><rect x="491.2" y="293" width="1.0" height="15.0" fill="rgb(216,156,23)" rx="2" ry="2" />
<text  x="494.22" y="303.5" ></text>
</g>
<g >
<title>CSHA256::Write (10 samples, 0.01%)</title><rect x="548.1" y="69" width="0.1" height="15.0" fill="rgb(217,20,17)" rx="2" ry="2" />
<text  x="551.06" y="79.5" ></text>
</g>
<g >
<title>__db_tas_mutex_unlock (10 samples, 0.01%)</title><rect x="106.1" y="437" width="0.1" height="15.0" fill="rgb(246,77,37)" rx="2" ry="2" />
<text  x="109.09" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.01%)</title><rect x="616.2" y="469" width="0.2" height="15.0" fill="rgb(213,36,51)" rx="2" ry="2" />
<text  x="619.24" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char* const, unsigned long&gt;, false&gt; &gt;::construct&lt;std::pair&lt;char* const, unsigned long&gt;, char*, unsigned long&amp;&gt; (8 samples, 0.01%)</title><rect x="862.1" y="309" width="0.1" height="15.0" fill="rgb(216,162,27)" rx="2" ry="2" />
<text  x="865.08" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (45 samples, 0.05%)</title><rect x="592.3" y="565" width="0.6" height="15.0" fill="rgb(208,62,51)" rx="2" ry="2" />
<text  x="595.31" y="575.5" ></text>
</g>
<g >
<title>CScript::~CScript (12 samples, 0.01%)</title><rect x="1025.7" y="533" width="0.2" height="15.0" fill="rgb(222,22,2)" rx="2" ry="2" />
<text  x="1028.74" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;secure_allocator&lt;unsigned char&gt; &gt;::destroy&lt;unsigned char&gt; (70 samples, 0.08%)</title><rect x="672.1" y="629" width="0.9" height="15.0" fill="rgb(222,5,52)" rx="2" ry="2" />
<text  x="675.10" y="639.5" ></text>
</g>
<g >
<title>ReadLE32 (51 samples, 0.06%)</title><rect x="702.3" y="597" width="0.7" height="15.0" fill="rgb(226,210,22)" rx="2" ry="2" />
<text  x="705.32" y="607.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (40 samples, 0.05%)</title><rect x="504.6" y="261" width="0.5" height="15.0" fill="rgb(233,57,43)" rx="2" ry="2" />
<text  x="507.59" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (23 samples, 0.03%)</title><rect x="470.6" y="325" width="0.3" height="15.0" fill="rgb(216,207,43)" rx="2" ry="2" />
<text  x="473.57" y="335.5" ></text>
</g>
<g >
<title>__memp_alloc (85 samples, 0.10%)</title><rect x="86.1" y="405" width="1.1" height="15.0" fill="rgb(237,23,35)" rx="2" ry="2" />
<text  x="89.07" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, zero_after_free_allocator&lt;char&gt; &gt;::~_Vector_base (351 samples, 0.40%)</title><rect x="386.9" y="661" width="4.7" height="15.0" fill="rgb(246,109,17)" rx="2" ry="2" />
<text  x="389.86" y="671.5" ></text>
</g>
<g >
<title>__db_close (129 samples, 0.15%)</title><rect x="57.8" y="597" width="1.7" height="15.0" fill="rgb(210,142,26)" rx="2" ry="2" />
<text  x="60.80" y="607.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (15 samples, 0.02%)</title><rect x="1101.3" y="629" width="0.2" height="15.0" fill="rgb(223,24,23)" rx="2" ry="2" />
<text  x="1104.30" y="639.5" ></text>
</g>
<g >
<title>UnserializeMany&lt;CDataStream&gt; (10 samples, 0.01%)</title><rect x="478.8" y="197" width="0.1" height="15.0" fill="rgb(222,23,51)" rx="2" ry="2" />
<text  x="481.75" y="207.5" ></text>
</g>
<g >
<title>SerializeMany&lt;CHashWriter, long&gt; (72 samples, 0.08%)</title><rect x="537.9" y="229" width="1.0" height="15.0" fill="rgb(234,220,40)" rx="2" ry="2" />
<text  x="540.92" y="239.5" ></text>
</g>
<g >
<title>uint256::uint256 (19 samples, 0.02%)</title><rect x="1058.8" y="517" width="0.3" height="15.0" fill="rgb(236,106,9)" rx="2" ry="2" />
<text  x="1061.80" y="527.5" ></text>
</g>
<g >
<title>std::multimap&lt;unsigned long, char*, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;::end (17 samples, 0.02%)</title><rect x="653.2" y="549" width="0.2" height="15.0" fill="rgb(214,213,0)" rx="2" ry="2" />
<text  x="656.16" y="559.5" ></text>
</g>
<g >
<title>CSHA256::Write (43 samples, 0.05%)</title><rect x="46.0" y="565" width="0.6" height="15.0" fill="rgb(236,117,44)" rx="2" ry="2" />
<text  x="49.01" y="575.5" ></text>
</g>
<g >
<title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::erase (199 samples, 0.23%)</title><rect x="906.7" y="629" width="2.7" height="15.0" fill="rgb(229,82,17)" rx="2" ry="2" />
<text  x="909.70" y="639.5" ></text>
</g>
<g >
<title>[libdb_cxx-4.8.so] (24 samples, 0.03%)</title><rect x="148.1" y="469" width="0.4" height="15.0" fill="rgb(213,172,6)" rx="2" ry="2" />
<text  x="151.13" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (34 samples, 0.04%)</title><rect x="514.0" y="357" width="0.5" height="15.0" fill="rgb(232,166,25)" rx="2" ry="2" />
<text  x="517.05" y="367.5" ></text>
</g>
<g >
<title>__memp_bhwrite (9 samples, 0.01%)</title><rect x="98.5" y="373" width="0.1" height="15.0" fill="rgb(214,42,36)" rx="2" ry="2" />
<text  x="101.50" y="383.5" ></text>
</g>
<g >
<title>Serialize&lt;CHashWriter, COutPoint&gt; (178 samples, 0.20%)</title><rect x="526.9" y="213" width="2.4" height="15.0" fill="rgb(209,210,53)" rx="2" ry="2" />
<text  x="529.93" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::operator* (8 samples, 0.01%)</title><rect x="1037.7" y="661" width="0.1" height="15.0" fill="rgb(228,82,35)" rx="2" ry="2" />
<text  x="1040.71" y="671.5" ></text>
</g>
<g >
<title>__lock_put (20 samples, 0.02%)</title><rect x="73.8" y="485" width="0.3" height="15.0" fill="rgb(205,176,24)" rx="2" ry="2" />
<text  x="76.78" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;char* const, std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, char*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (44 samples, 0.05%)</title><rect x="678.3" y="485" width="0.6" height="15.0" fill="rgb(220,175,5)" rx="2" ry="2" />
<text  x="681.31" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (33 samples, 0.04%)</title><rect x="662.3" y="437" width="0.4" height="15.0" fill="rgb(236,191,53)" rx="2" ry="2" />
<text  x="665.29" y="447.5" ></text>
</g>
<g >
<title>__db_vrfy_putpageinfo (720 samples, 0.82%)</title><rect x="147.6" y="565" width="9.7" height="15.0" fill="rgb(211,63,28)" rx="2" ry="2" />
<text  x="150.61" y="575.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (29 samples, 0.03%)</title><rect x="599.0" y="517" width="0.4" height="15.0" fill="rgb(241,175,41)" rx="2" ry="2" />
<text  x="601.98" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char*, std::pair&lt;char* const, unsigned long&gt;, std::allocator&lt;std::pair&lt;char* const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char*&gt;, std::hash&lt;char*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (12 samples, 0.01%)</title><rect x="659.8" y="501" width="0.1" height="15.0" fill="rgb(235,196,19)" rx="2" ry="2" />
<text  x="662.78" y="511.5" ></text>
</g>
</g>
</svg>
